

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Tue Nov 02 12:21:08 2021

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text10,global,reloc=2,class=CODE,delta=1
    19                           	psect	text11,global,reloc=2,class=CODE,delta=1
    20                           	psect	text12,global,reloc=2,class=CODE,delta=1
    21                           	psect	text13,global,reloc=2,class=CODE,delta=1
    22                           	psect	text14,global,reloc=2,class=CODE,delta=1
    23                           	psect	text15,global,reloc=2,class=CODE,delta=1
    24                           	psect	text16,global,reloc=2,class=CODE,delta=1
    25                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    26                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    27                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    28                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    29                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    30                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    31  0000                     
    32                           ; Version 2.35
    33                           ; Generated 05/05/2021 GMT
    34                           ; 
    35                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    36                           ; All rights reserved.
    37                           ; 
    38                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    39                           ; 
    40                           ; Redistribution and use in source and binary forms, with or without modification, are
    41                           ; permitted provided that the following conditions are met:
    42                           ; 
    43                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    44                           ;        conditions and the following disclaimer.
    45                           ; 
    46                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    47                           ;        of conditions and the following disclaimer in the documentation and/or other
    48                           ;        materials provided with the distribution. Publication is not required when
    49                           ;        this file is used in an embedded application.
    50                           ; 
    51                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    52                           ;        software without specific prior written permission.
    53                           ; 
    54                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    55                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    56                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    57                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    58                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    59                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    60                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    61                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    62                           ; 
    63                           ; 
    64                           ; Code-generator required, PIC18F67K40 Definitions
    65                           ; 
    66                           ; SFR Addresses
    67  0000                     _PIR2bits	set	3637
    68  0000                     _PIR0bits	set	3635
    69  0000                     _PIE2bits	set	3627
    70  0000                     _PIE0bits	set	3625
    71  0000                     _CM1CON1bits	set	3793
    72  0000                     _CM1CON0bits	set	3792
    73  0000                     _CM1PCHbits	set	3795
    74  0000                     _CM1NCHbits	set	3794
    75  0000                     _DAC1CON1bits	set	3783
    76  0000                     _DAC1CON0bits	set	3782
    77  0000                     _T0CON0bits	set	4053
    78  0000                     _T0CON1bits	set	4054
    79  0000                     _TRISHbits	set	3976
    80  0000                     _TRISAbits	set	3969
    81  0000                     _TRISGbits	set	3975
    82  0000                     _LATFbits	set	3966
    83  0000                     _LATAbits	set	3961
    84  0000                     _LATGbits	set	3967
    85  0000                     _LATHbits	set	3968
    86  0000                     _TMR0L	set	4051
    87  0000                     _TMR0H	set	4052
    88  0000                     _INTCONbits	set	4082
    89  0000                     _TRISFbits	set	3974
    90                           
    91                           ; #config settings
    92                           
    93                           	psect	cinit
    94  0010EA                     __pcinit:
    95                           	callstack 0
    96  0010EA                     start_initialization:
    97                           	callstack 0
    98  0010EA                     __initialization:
    99                           	callstack 0
   100                           
   101                           ; Clear objects allocated to COMRAM (2 bytes)
   102  0010EA  6A4E               	clrf	(__pbssCOMRAM+1)& (0+255),c
   103  0010EC  6A4D               	clrf	__pbssCOMRAM& (0+255),c
   104  0010EE                     end_of_initialization:
   105                           	callstack 0
   106  0010EE                     __end_of__initialization:
   107                           	callstack 0
   108  0010EE  904F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   109  0010F0  924F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   110  0010F2  0100               	movlb	0
   111  0010F4  EF9E  F004         	goto	_main	;jump to C main() function
   112                           
   113                           	psect	bssCOMRAM
   114  00004D                     __pbssCOMRAM:
   115                           	callstack 0
   116  00004D                     _dawndusk:
   117                           	callstack 0
   118  00004D                     	ds	1
   119  00004E                     _minutehand:
   120                           	callstack 0
   121  00004E                     	ds	1
   122                           
   123                           	psect	cstackCOMRAM
   124  000001                     __pcstackCOMRAM:
   125                           	callstack 0
   126  000001                     ?_TimeDiff:
   127                           	callstack 0
   128  000001                     ?___awmod:
   129                           	callstack 0
   130  000001                     ?___lwmod:
   131                           	callstack 0
   132  000001                     LEDarray_disp_bin@number:
   133                           	callstack 0
   134  000001                     SmallHours@hour:
   135                           	callstack 0
   136  000001                     TimeDiff@hour1:
   137                           	callstack 0
   138  000001                     UpdateDawnDusk@pdawnhour:
   139                           	callstack 0
   140  000001                     ___awmod@dividend:
   141                           	callstack 0
   142  000001                     ___lwmod@dividend:
   143                           	callstack 0
   144                           
   145                           ; 2 bytes @ 0x0
   146  000001                     	ds	2
   147  000003                     SmallHours@minute:
   148                           	callstack 0
   149  000003                     TimeDiff@minute1:
   150                           	callstack 0
   151  000003                     UpdateDawnDusk@pdawnminute:
   152                           	callstack 0
   153  000003                     ___awmod@divisor:
   154                           	callstack 0
   155  000003                     ___lwmod@divisor:
   156                           	callstack 0
   157                           
   158                           ; 2 bytes @ 0x2
   159  000003                     	ds	2
   160  000005                     ___awmod@counter:
   161                           	callstack 0
   162  000005                     ___lwmod@counter:
   163                           	callstack 0
   164  000005                     TimeDiff@hour2:
   165                           	callstack 0
   166  000005                     UpdateDawnDusk@pduskhour:
   167                           	callstack 0
   168                           
   169                           ; 2 bytes @ 0x4
   170  000005                     	ds	1
   171  000006                     ___awmod@sign:
   172                           	callstack 0
   173  000006                     LeapYear@year:
   174                           	callstack 0
   175                           
   176                           ; 2 bytes @ 0x5
   177  000006                     	ds	1
   178  000007                     TimeDiff@minute2:
   179                           	callstack 0
   180  000007                     UpdateDawnDusk@pduskminute:
   181                           	callstack 0
   182                           
   183                           ; 2 bytes @ 0x6
   184  000007                     	ds	1
   185  000008                     ??_LeapYear:
   186                           
   187                           ; 1 bytes @ 0x7
   188  000008                     	ds	1
   189  000009                     ??_TimeDiff:
   190  000009                     UpdateDawnDusk@phour:
   191                           	callstack 0
   192                           
   193                           ; 2 bytes @ 0x8
   194  000009                     	ds	1
   195  00000A                     ?___awdiv:
   196                           	callstack 0
   197  00000A                     LeapYear@leapyear:
   198                           	callstack 0
   199  00000A                     ___awdiv@dividend:
   200                           	callstack 0
   201                           
   202                           ; 2 bytes @ 0x9
   203  00000A                     	ds	1
   204  00000B                     Timekeeper@pyear:
   205                           	callstack 0
   206  00000B                     UpdateDawnDusk@pminute:
   207                           	callstack 0
   208                           
   209                           ; 2 bytes @ 0xA
   210  00000B                     	ds	1
   211  00000C                     ___awdiv@divisor:
   212                           	callstack 0
   213                           
   214                           ; 2 bytes @ 0xB
   215  00000C                     	ds	1
   216  00000D                     Timekeeper@pmonth:
   217                           	callstack 0
   218                           
   219                           ; 2 bytes @ 0xC
   220  00000D                     	ds	1
   221  00000E                     ___awdiv@counter:
   222                           	callstack 0
   223                           
   224                           ; 1 bytes @ 0xD
   225  00000E                     	ds	1
   226  00000F                     ___awdiv@sign:
   227                           	callstack 0
   228  00000F                     Timekeeper@pday:
   229                           	callstack 0
   230                           
   231                           ; 2 bytes @ 0xE
   232  00000F                     	ds	1
   233  000010                     ___awdiv@quotient:
   234                           	callstack 0
   235                           
   236                           ; 2 bytes @ 0xF
   237  000010                     	ds	1
   238  000011                     Timekeeper@phour:
   239                           	callstack 0
   240                           
   241                           ; 2 bytes @ 0x10
   242  000011                     	ds	1
   243  000012                     TimeAvg@hour1:
   244                           	callstack 0
   245                           
   246                           ; 2 bytes @ 0x11
   247  000012                     	ds	1
   248  000013                     Timekeeper@pminute:
   249                           	callstack 0
   250                           
   251                           ; 2 bytes @ 0x12
   252  000013                     	ds	1
   253  000014                     TimeAvg@minute1:
   254                           	callstack 0
   255                           
   256                           ; 2 bytes @ 0x13
   257  000014                     	ds	1
   258  000015                     Timekeeper@pdayofweek:
   259                           	callstack 0
   260                           
   261                           ; 2 bytes @ 0x14
   262  000015                     	ds	1
   263  000016                     TimeAvg@hour2:
   264                           	callstack 0
   265                           
   266                           ; 2 bytes @ 0x15
   267  000016                     	ds	1
   268  000017                     Timekeeper@pDST:
   269                           	callstack 0
   270                           
   271                           ; 2 bytes @ 0x16
   272  000017                     	ds	1
   273  000018                     TimeAvg@minute2:
   274                           	callstack 0
   275                           
   276                           ; 2 bytes @ 0x17
   277  000018                     	ds	1
   278  000019                     
   279                           ; 1 bytes @ 0x18
   280  000019                     	ds	1
   281  00001A                     TimeAvg@pavghour:
   282                           	callstack 0
   283                           
   284                           ; 2 bytes @ 0x19
   285  00001A                     	ds	2
   286  00001C                     TimeAvg@pavgminute:
   287                           	callstack 0
   288                           
   289                           ; 2 bytes @ 0x1B
   290  00001C                     	ds	2
   291  00001E                     ??_TimeAvg:
   292                           
   293                           ; 1 bytes @ 0x1D
   294  00001E                     	ds	4
   295  000022                     TimeAvg@HalfTimeDiff:
   296                           	callstack 0
   297                           
   298                           ; 2 bytes @ 0x21
   299  000022                     	ds	2
   300  000024                     SunPleaseFixTheDamnClock@pdawnhour:
   301                           	callstack 0
   302                           
   303                           ; 2 bytes @ 0x23
   304  000024                     	ds	2
   305  000026                     SunPleaseFixTheDamnClock@pdawnminute:
   306                           	callstack 0
   307                           
   308                           ; 2 bytes @ 0x25
   309  000026                     	ds	2
   310  000028                     SunPleaseFixTheDamnClock@pduskhour:
   311                           	callstack 0
   312                           
   313                           ; 2 bytes @ 0x27
   314  000028                     	ds	2
   315  00002A                     SunPleaseFixTheDamnClock@pduskminute:
   316                           	callstack 0
   317                           
   318                           ; 2 bytes @ 0x29
   319  00002A                     	ds	2
   320  00002C                     SunPleaseFixTheDamnClock@phour:
   321                           	callstack 0
   322                           
   323                           ; 2 bytes @ 0x2B
   324  00002C                     	ds	2
   325  00002E                     SunPleaseFixTheDamnClock@pminute:
   326                           	callstack 0
   327                           
   328                           ; 2 bytes @ 0x2D
   329  00002E                     	ds	2
   330  000030                     SunPleaseFixTheDamnClock@DST:
   331                           	callstack 0
   332                           
   333                           ; 1 bytes @ 0x2F
   334  000030                     	ds	1
   335  000031                     ??_SunPleaseFixTheDamnClock:
   336                           
   337                           ; 1 bytes @ 0x30
   338  000031                     	ds	4
   339  000035                     SunPleaseFixTheDamnClock@avghour:
   340                           	callstack 0
   341                           
   342                           ; 2 bytes @ 0x34
   343  000035                     	ds	2
   344  000037                     SunPleaseFixTheDamnClock@avgminute:
   345                           	callstack 0
   346                           
   347                           ; 2 bytes @ 0x36
   348  000037                     	ds	2
   349  000039                     SunPleaseFixTheDamnClock@timedifference:
   350                           	callstack 0
   351                           
   352                           ; 2 bytes @ 0x38
   353  000039                     	ds	2
   354  00003B                     main@year:
   355                           	callstack 0
   356                           
   357                           ; 2 bytes @ 0x3A
   358  00003B                     	ds	2
   359  00003D                     main@dayofweek:
   360                           	callstack 0
   361                           
   362                           ; 1 bytes @ 0x3C
   363  00003D                     	ds	1
   364  00003E                     main@DST:
   365                           	callstack 0
   366                           
   367                           ; 1 bytes @ 0x3D
   368  00003E                     	ds	1
   369  00003F                     main@day:
   370                           	callstack 0
   371                           
   372                           ; 1 bytes @ 0x3E
   373  00003F                     	ds	1
   374  000040                     main@dawnminute:
   375                           	callstack 0
   376                           
   377                           ; 2 bytes @ 0x3F
   378  000040                     	ds	2
   379  000042                     main@duskminute:
   380                           	callstack 0
   381                           
   382                           ; 2 bytes @ 0x41
   383  000042                     	ds	2
   384  000044                     main@dawnhour:
   385                           	callstack 0
   386                           
   387                           ; 2 bytes @ 0x43
   388  000044                     	ds	2
   389  000046                     main@duskhour:
   390                           	callstack 0
   391                           
   392                           ; 2 bytes @ 0x45
   393  000046                     	ds	2
   394  000048                     main@month:
   395                           	callstack 0
   396                           
   397                           ; 1 bytes @ 0x47
   398  000048                     	ds	1
   399  000049                     main@minute:
   400                           	callstack 0
   401                           
   402                           ; 2 bytes @ 0x48
   403  000049                     	ds	2
   404  00004B                     main@hour:
   405                           	callstack 0
   406                           
   407                           ; 2 bytes @ 0x4A
   408  00004B                     	ds	2
   409                           
   410 ;;
   411 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   412 ;;
   413 ;; *************** function _main *****************
   414 ;; Defined at:
   415 ;;		line 17 in file "main.c"
   416 ;; Parameters:    Size  Location     Type
   417 ;;		None
   418 ;; Auto vars:     Size  Location     Type
   419 ;;  hour            2   74[COMRAM] int 
   420 ;;  minute          2   72[COMRAM] int 
   421 ;;  duskhour        2   69[COMRAM] int 
   422 ;;  dawnhour        2   67[COMRAM] int 
   423 ;;  duskminute      2   65[COMRAM] int 
   424 ;;  dawnminute      2   63[COMRAM] int 
   425 ;;  year            2   58[COMRAM] unsigned int 
   426 ;;  month           1   71[COMRAM] unsigned char 
   427 ;;  day             1   62[COMRAM] unsigned char 
   428 ;;  DST             1   61[COMRAM] unsigned char 
   429 ;;  dayofweek       1   60[COMRAM] unsigned char 
   430 ;; Return value:  Size  Location     Type
   431 ;;                  1    wreg      void 
   432 ;; Registers used:
   433 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
   434 ;; Tracked objects:
   435 ;;		On entry : 0/0
   436 ;;		On exit  : 0/0
   437 ;;		Unchanged: 0/0
   438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   439 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   440 ;;      Locals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   441 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   442 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   443 ;;Total ram usage:       18 bytes
   444 ;; Hardware stack levels required when called: 4
   445 ;; This function calls:
   446 ;;		_Comp1_init
   447 ;;		_Interrupts_init
   448 ;;		_LEDarray_disp_bin
   449 ;;		_Lights_init
   450 ;;		_SmallHours
   451 ;;		_SunPleaseFixTheDamnClock
   452 ;;		_Timekeeper
   453 ;;		_Timer0_init
   454 ;;		_UpdateDawnDusk
   455 ;; This function is called by:
   456 ;;		Startup code after reset
   457 ;; This function uses a non-reentrant model
   458 ;;
   459                           
   460                           	psect	text0
   461  00093C                     __ptext0:
   462                           	callstack 0
   463  00093C                     _main:
   464                           	callstack 27
   465  00093C                     
   466                           ;main.c: 19:     unsigned int year = 2021;
   467  00093C  0E07               	movlw	7
   468  00093E  6E3C               	movwf	(main@year+1)^0,c
   469  000940  0EE5               	movlw	229
   470  000942  6E3B               	movwf	main@year^0,c
   471                           
   472                           ;main.c: 20:     char month = 11;
   473  000944  0E0B               	movlw	11
   474  000946  6E48               	movwf	main@month^0,c
   475                           
   476                           ;main.c: 21:     char day = 2;
   477  000948  0E02               	movlw	2
   478  00094A  6E3F               	movwf	main@day^0,c
   479                           
   480                           ;main.c: 22:     int hour = 12;
   481  00094C  0E00               	movlw	0
   482  00094E  6E4C               	movwf	(main@hour+1)^0,c
   483  000950  0E0C               	movlw	12
   484  000952  6E4B               	movwf	main@hour^0,c
   485                           
   486                           ;main.c: 23:     int minute = 0;
   487  000954  0E00               	movlw	0
   488  000956  6E4A               	movwf	(main@minute+1)^0,c
   489  000958  0E00               	movlw	0
   490  00095A  6E49               	movwf	main@minute^0,c
   491                           
   492                           ;main.c: 24:     char dayofweek = 2;
   493  00095C  0E02               	movlw	2
   494  00095E  6E3D               	movwf	main@dayofweek^0,c
   495                           
   496                           ;main.c: 25:     char DST = 0;
   497  000960  0E00               	movlw	0
   498  000962  6E3E               	movwf	main@DST^0,c
   499                           
   500                           ;main.c: 26:     int dawnhour = 7;
   501  000964  0E00               	movlw	0
   502  000966  6E45               	movwf	(main@dawnhour+1)^0,c
   503  000968  0E07               	movlw	7
   504  00096A  6E44               	movwf	main@dawnhour^0,c
   505                           
   506                           ;main.c: 27:     int dawnminute = 0;
   507  00096C  0E00               	movlw	0
   508  00096E  6E41               	movwf	(main@dawnminute+1)^0,c
   509  000970  0E00               	movlw	0
   510  000972  6E40               	movwf	main@dawnminute^0,c
   511                           
   512                           ;main.c: 28:     int duskhour = 17;
   513  000974  0E00               	movlw	0
   514  000976  6E47               	movwf	(main@duskhour+1)^0,c
   515  000978  0E11               	movlw	17
   516  00097A  6E46               	movwf	main@duskhour^0,c
   517                           
   518                           ;main.c: 29:     int duskminute = 0;
   519  00097C  0E00               	movlw	0
   520  00097E  6E43               	movwf	(main@duskminute+1)^0,c
   521  000980  0E00               	movlw	0
   522  000982  6E42               	movwf	main@duskminute^0,c
   523  000984                     
   524                           ;main.c: 32:     Lights_init();
   525  000984  EC5E  F008         	call	_Lights_init	;wreg free
   526                           
   527                           ;main.c: 33:     Timer0_init();
   528  000988  EC4E  F008         	call	_Timer0_init	;wreg free
   529                           
   530                           ;main.c: 34:     Comp1_init();
   531  00098C  EC3B  F008         	call	_Comp1_init	;wreg free
   532  000990                     
   533                           ;main.c: 35:     Interrupts_init();
   534  000990  EC7C  F008         	call	_Interrupts_init	;wreg free
   535  000994                     l81:
   536                           
   537                           ;main.c: 38:         if (minutehand) {
   538  000994  504E               	movf	_minutehand^0,w,c
   539  000996  B4D8               	btfsc	status,2,c
   540  000998  EFD0  F004         	goto	u1581
   541  00099C  EFD2  F004         	goto	u1580
   542  0009A0                     u1581:
   543  0009A0  EFF2  F004         	goto	l1613
   544  0009A4                     u1580:
   545  0009A4                     
   546                           ;main.c: 39:             Timekeeper(&year, &month, &day, &hour, &minute, &dayofweek, &DS
      +                          T);
   547  0009A4  0E3B               	movlw	low main@year
   548  0009A6  6E0B               	movwf	Timekeeper@pyear^0,c
   549  0009A8  0E00               	movlw	high main@year
   550  0009AA  6E0C               	movwf	(Timekeeper@pyear+1)^0,c
   551  0009AC  0E48               	movlw	low main@month
   552  0009AE  6E0D               	movwf	Timekeeper@pmonth^0,c
   553  0009B0  0E00               	movlw	high main@month
   554  0009B2  6E0E               	movwf	(Timekeeper@pmonth+1)^0,c
   555  0009B4  0E3F               	movlw	low main@day
   556  0009B6  6E0F               	movwf	Timekeeper@pday^0,c
   557  0009B8  0E00               	movlw	high main@day
   558  0009BA  6E10               	movwf	(Timekeeper@pday+1)^0,c
   559  0009BC  0E4B               	movlw	low main@hour
   560  0009BE  6E11               	movwf	Timekeeper@phour^0,c
   561  0009C0  0E00               	movlw	high main@hour
   562  0009C2  6E12               	movwf	(Timekeeper@phour+1)^0,c
   563  0009C4  0E49               	movlw	low main@minute
   564  0009C6  6E13               	movwf	Timekeeper@pminute^0,c
   565  0009C8  0E00               	movlw	high main@minute
   566  0009CA  6E14               	movwf	(Timekeeper@pminute+1)^0,c
   567  0009CC  0E3D               	movlw	low main@dayofweek
   568  0009CE  6E15               	movwf	Timekeeper@pdayofweek^0,c
   569  0009D0  0E00               	movlw	high main@dayofweek
   570  0009D2  6E16               	movwf	(Timekeeper@pdayofweek+1)^0,c
   571  0009D4  0E3E               	movlw	low main@DST
   572  0009D6  6E17               	movwf	Timekeeper@pDST^0,c
   573  0009D8  0E00               	movlw	high main@DST
   574  0009DA  6E18               	movwf	(Timekeeper@pDST+1)^0,c
   575  0009DC  EC73  F002         	call	_Timekeeper	;wreg free
   576  0009E0                     
   577                           ;main.c: 40:             minutehand = 0;
   578  0009E0  0E00               	movlw	0
   579  0009E2  6E4E               	movwf	_minutehand^0,c
   580  0009E4                     l1613:
   581                           
   582                           ;main.c: 43:         LEDarray_disp_bin(hour);
   583  0009E4  C04B  F001         	movff	main@hour,LEDarray_disp_bin@number
   584  0009E8  C04C  F002         	movff	main@hour+1,LEDarray_disp_bin@number+1
   585  0009EC  EC9D  F007         	call	_LEDarray_disp_bin	;wreg free
   586  0009F0                     
   587                           ;main.c: 45:         SmallHours(hour, minute);
   588  0009F0  C04B  F001         	movff	main@hour,SmallHours@hour
   589  0009F4  C04C  F002         	movff	main@hour+1,SmallHours@hour+1
   590  0009F8  C049  F003         	movff	main@minute,SmallHours@minute
   591  0009FC  C04A  F004         	movff	main@minute+1,SmallHours@minute+1
   592  000A00  ECD5  F007         	call	_SmallHours	;wreg free
   593  000A04                     
   594                           ;main.c: 47:         if (dawndusk) {
   595  000A04  504D               	movf	_dawndusk^0,w,c
   596  000A06  B4D8               	btfsc	status,2,c
   597  000A08  EF08  F005         	goto	u1591
   598  000A0C  EF0A  F005         	goto	u1590
   599  000A10                     u1591:
   600  000A10  EF26  F005         	goto	l1623
   601  000A14                     u1590:
   602  000A14                     
   603                           ;main.c: 48:             UpdateDawnDusk(&dawnhour, &dawnminute, &duskhour, &duskminute, 
      +                          &hour, &minute);
   604  000A14  0E44               	movlw	low main@dawnhour
   605  000A16  6E01               	movwf	UpdateDawnDusk@pdawnhour^0,c
   606  000A18  0E00               	movlw	high main@dawnhour
   607  000A1A  6E02               	movwf	(UpdateDawnDusk@pdawnhour+1)^0,c
   608  000A1C  0E40               	movlw	low main@dawnminute
   609  000A1E  6E03               	movwf	UpdateDawnDusk@pdawnminute^0,c
   610  000A20  0E00               	movlw	high main@dawnminute
   611  000A22  6E04               	movwf	(UpdateDawnDusk@pdawnminute+1)^0,c
   612  000A24  0E46               	movlw	low main@duskhour
   613  000A26  6E05               	movwf	UpdateDawnDusk@pduskhour^0,c
   614  000A28  0E00               	movlw	high main@duskhour
   615  000A2A  6E06               	movwf	(UpdateDawnDusk@pduskhour+1)^0,c
   616  000A2C  0E42               	movlw	low main@duskminute
   617  000A2E  6E07               	movwf	UpdateDawnDusk@pduskminute^0,c
   618  000A30  0E00               	movlw	high main@duskminute
   619  000A32  6E08               	movwf	(UpdateDawnDusk@pduskminute+1)^0,c
   620  000A34  0E4B               	movlw	low main@hour
   621  000A36  6E09               	movwf	UpdateDawnDusk@phour^0,c
   622  000A38  0E00               	movlw	high main@hour
   623  000A3A  6E0A               	movwf	(UpdateDawnDusk@phour+1)^0,c
   624  000A3C  0E49               	movlw	low main@minute
   625  000A3E  6E0B               	movwf	UpdateDawnDusk@pminute^0,c
   626  000A40  0E00               	movlw	high main@minute
   627  000A42  6E0C               	movwf	(UpdateDawnDusk@pminute+1)^0,c
   628  000A44  EC17  F007         	call	_UpdateDawnDusk	;wreg free
   629  000A48                     
   630                           ;main.c: 49:             dawndusk = 0;
   631  000A48  0E00               	movlw	0
   632  000A4A  6E4D               	movwf	_dawndusk^0,c
   633  000A4C                     l1623:
   634                           
   635                           ;main.c: 52:         if (hour == 12 && minute == 0) {
   636  000A4C  0E0C               	movlw	12
   637  000A4E  184B               	xorwf	main@hour^0,w,c
   638  000A50  104C               	iorwf	(main@hour+1)^0,w,c
   639  000A52  A4D8               	btfss	status,2,c
   640  000A54  EF2E  F005         	goto	u1601
   641  000A58  EF30  F005         	goto	u1600
   642  000A5C                     u1601:
   643  000A5C  EFCA  F004         	goto	l81
   644  000A60                     u1600:
   645  000A60  5049               	movf	main@minute^0,w,c
   646  000A62  104A               	iorwf	(main@minute+1)^0,w,c
   647  000A64  A4D8               	btfss	status,2,c
   648  000A66  EF37  F005         	goto	u1611
   649  000A6A  EF39  F005         	goto	u1610
   650  000A6E                     u1611:
   651  000A6E  EFCA  F004         	goto	l81
   652  000A72                     u1610:
   653  000A72                     
   654                           ;main.c: 53:             SunPleaseFixTheDamnClock(&dawnhour, &dawnminute, &duskhour, &du
      +                          skminute, &hour, &minute, DST);
   655  000A72  0E44               	movlw	low main@dawnhour
   656  000A74  6E24               	movwf	SunPleaseFixTheDamnClock@pdawnhour^0,c
   657  000A76  0E00               	movlw	high main@dawnhour
   658  000A78  6E25               	movwf	(SunPleaseFixTheDamnClock@pdawnhour+1)^0,c
   659  000A7A  0E40               	movlw	low main@dawnminute
   660  000A7C  6E26               	movwf	SunPleaseFixTheDamnClock@pdawnminute^0,c
   661  000A7E  0E00               	movlw	high main@dawnminute
   662  000A80  6E27               	movwf	(SunPleaseFixTheDamnClock@pdawnminute+1)^0,c
   663  000A82  0E46               	movlw	low main@duskhour
   664  000A84  6E28               	movwf	SunPleaseFixTheDamnClock@pduskhour^0,c
   665  000A86  0E00               	movlw	high main@duskhour
   666  000A88  6E29               	movwf	(SunPleaseFixTheDamnClock@pduskhour+1)^0,c
   667  000A8A  0E42               	movlw	low main@duskminute
   668  000A8C  6E2A               	movwf	SunPleaseFixTheDamnClock@pduskminute^0,c
   669  000A8E  0E00               	movlw	high main@duskminute
   670  000A90  6E2B               	movwf	(SunPleaseFixTheDamnClock@pduskminute+1)^0,c
   671  000A92  0E4B               	movlw	low main@hour
   672  000A94  6E2C               	movwf	SunPleaseFixTheDamnClock@phour^0,c
   673  000A96  0E00               	movlw	high main@hour
   674  000A98  6E2D               	movwf	(SunPleaseFixTheDamnClock@phour+1)^0,c
   675  000A9A  0E49               	movlw	low main@minute
   676  000A9C  6E2E               	movwf	SunPleaseFixTheDamnClock@pminute^0,c
   677  000A9E  0E00               	movlw	high main@minute
   678  000AA0  6E2F               	movwf	(SunPleaseFixTheDamnClock@pminute+1)^0,c
   679  000AA2  C03E  F030         	movff	main@DST,SunPleaseFixTheDamnClock@DST
   680  000AA6  EC2F  F000         	call	_SunPleaseFixTheDamnClock	;wreg free
   681  000AAA  EFCA  F004         	goto	l81
   682  000AAE  EF2D  F000         	goto	start
   683  000AB2                     __end_of_main:
   684                           	callstack 0
   685                           
   686 ;; *************** function _UpdateDawnDusk *****************
   687 ;; Defined at:
   688 ;;		line 153 in file "timers.c"
   689 ;; Parameters:    Size  Location     Type
   690 ;;  pdawnhour       2    0[COMRAM] PTR int 
   691 ;;		 -> main@dawnhour(2), 
   692 ;;  pdawnminute     2    2[COMRAM] PTR int 
   693 ;;		 -> main@dawnminute(2), 
   694 ;;  pduskhour       2    4[COMRAM] PTR int 
   695 ;;		 -> main@duskhour(2), 
   696 ;;  pduskminute     2    6[COMRAM] PTR int 
   697 ;;		 -> main@duskminute(2), 
   698 ;;  phour           2    8[COMRAM] PTR int 
   699 ;;		 -> main@hour(2), 
   700 ;;  pminute         2   10[COMRAM] PTR int 
   701 ;;		 -> main@minute(2), 
   702 ;; Auto vars:     Size  Location     Type
   703 ;;		None
   704 ;; Return value:  Size  Location     Type
   705 ;;                  1    wreg      void 
   706 ;; Registers used:
   707 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
   708 ;; Tracked objects:
   709 ;;		On entry : 0/0
   710 ;;		On exit  : 0/0
   711 ;;		Unchanged: 0/0
   712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   713 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   714 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   715 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   716 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   717 ;;Total ram usage:       14 bytes
   718 ;; Hardware stack levels used: 1
   719 ;; Hardware stack levels required when called: 1
   720 ;; This function calls:
   721 ;;		Nothing
   722 ;; This function is called by:
   723 ;;		_main
   724 ;; This function uses a non-reentrant model
   725 ;;
   726                           
   727                           	psect	text1
   728  000E2E                     __ptext1:
   729                           	callstack 0
   730  000E2E                     _UpdateDawnDusk:
   731                           	callstack 29
   732  000E2E                     
   733                           ;timers.c: 153: void UpdateDawnDusk(int *pdawnhour, int *pdawnminute, int *pduskhour, in
      +                          t *pduskminute, int *phour, int *pminute);timers.c: 154: {;timers.c: 155:     if (*phour
      +                           < 12) {*pdawnhour = *phour; *pdawnminute = *pminute;}
   734  000E2E  C009  FFD9         	movff	UpdateDawnDusk@phour,fsr2l
   735  000E32  C00A  FFDA         	movff	UpdateDawnDusk@phour+1,fsr2h
   736  000E36  0E01               	movlw	1
   737  000E38  BEDB               	btfsc	plusw2,7,c
   738  000E3A  EF2B  F007         	goto	u1480
   739  000E3E  0E01               	movlw	1
   740  000E40  50DB               	movf	plusw2,w,c
   741  000E42  E107               	bnz	u1481
   742  000E44  0E0C               	movlw	12
   743  000E46  5CDE               	subwf	postinc2,w,c
   744  000E48  B0D8               	btfsc	status,0,c
   745  000E4A  EF29  F007         	goto	u1481
   746  000E4E  EF2B  F007         	goto	u1480
   747  000E52                     u1481:
   748  000E52  EF45  F007         	goto	l1561
   749  000E56                     u1480:
   750  000E56  C009  FFD9         	movff	UpdateDawnDusk@phour,fsr2l
   751  000E5A  C00A  FFDA         	movff	UpdateDawnDusk@phour+1,fsr2h
   752  000E5E  C001  FFE1         	movff	UpdateDawnDusk@pdawnhour,fsr1l
   753  000E62  C002  FFE2         	movff	UpdateDawnDusk@pdawnhour+1,fsr1h
   754  000E66  CFDE FFE6          	movff	postinc2,postinc1
   755  000E6A  CFDD FFE5          	movff	postdec2,postdec1
   756  000E6E  C00B  FFD9         	movff	UpdateDawnDusk@pminute,fsr2l
   757  000E72  C00C  FFDA         	movff	UpdateDawnDusk@pminute+1,fsr2h
   758  000E76  C003  FFE1         	movff	UpdateDawnDusk@pdawnminute,fsr1l
   759  000E7A  C004  FFE2         	movff	UpdateDawnDusk@pdawnminute+1,fsr1h
   760  000E7E  CFDE FFE6          	movff	postinc2,postinc1
   761  000E82  CFDD FFE5          	movff	postdec2,postdec1
   762  000E86  EF5D  F007         	goto	l205
   763  000E8A                     l1561:
   764  000E8A  C009  FFD9         	movff	UpdateDawnDusk@phour,fsr2l
   765  000E8E  C00A  FFDA         	movff	UpdateDawnDusk@phour+1,fsr2h
   766  000E92  C005  FFE1         	movff	UpdateDawnDusk@pduskhour,fsr1l
   767  000E96  C006  FFE2         	movff	UpdateDawnDusk@pduskhour+1,fsr1h
   768  000E9A  CFDE FFE6          	movff	postinc2,postinc1
   769  000E9E  CFDD FFE5          	movff	postdec2,postdec1
   770  000EA2  C00B  FFD9         	movff	UpdateDawnDusk@pminute,fsr2l
   771  000EA6  C00C  FFDA         	movff	UpdateDawnDusk@pminute+1,fsr2h
   772  000EAA  C007  FFE1         	movff	UpdateDawnDusk@pduskminute,fsr1l
   773  000EAE  C008  FFE2         	movff	UpdateDawnDusk@pduskminute+1,fsr1h
   774  000EB2  CFDE FFE6          	movff	postinc2,postinc1
   775  000EB6  CFDD FFE5          	movff	postdec2,postdec1
   776  000EBA                     l205:
   777  000EBA  0012               	return		;funcret
   778  000EBC                     __end_of_UpdateDawnDusk:
   779                           	callstack 0
   780                           
   781 ;; *************** function _Timer0_init *****************
   782 ;; Defined at:
   783 ;;		line 7 in file "timers.c"
   784 ;; Parameters:    Size  Location     Type
   785 ;;		None
   786 ;; Auto vars:     Size  Location     Type
   787 ;;		None
   788 ;; Return value:  Size  Location     Type
   789 ;;                  1    wreg      void 
   790 ;; Registers used:
   791 ;;		wreg, status,2
   792 ;; Tracked objects:
   793 ;;		On entry : 0/0
   794 ;;		On exit  : 0/0
   795 ;;		Unchanged: 0/0
   796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   797 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   798 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   799 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   800 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   801 ;;Total ram usage:        0 bytes
   802 ;; Hardware stack levels used: 1
   803 ;; Hardware stack levels required when called: 1
   804 ;; This function calls:
   805 ;;		Nothing
   806 ;; This function is called by:
   807 ;;		_main
   808 ;; This function uses a non-reentrant model
   809 ;;
   810                           
   811                           	psect	text2
   812  00109C                     __ptext2:
   813                           	callstack 0
   814  00109C                     _Timer0_init:
   815                           	callstack 29
   816  00109C                     
   817                           ;timers.c: 9:     T0CON1bits.T0CS=0b010;
   818  00109C  50D6               	movf	214,w,c	;volatile
   819  00109E  0B1F               	andlw	-225
   820  0010A0  0940               	iorlw	64
   821  0010A2  6ED6               	movwf	214,c	;volatile
   822  0010A4                     
   823                           ;timers.c: 10:     T0CON1bits.T0ASYNC=1;
   824  0010A4  88D6               	bsf	214,4,c	;volatile
   825                           
   826                           ;timers.c: 11:     T0CON1bits.T0CKPS=0b1110;
   827  0010A6  50D6               	movf	214,w,c	;volatile
   828  0010A8  0BF0               	andlw	-16
   829  0010AA  090E               	iorlw	14
   830  0010AC  6ED6               	movwf	214,c	;volatile
   831  0010AE                     
   832                           ;timers.c: 12:     T0CON0bits.T016BIT=1;
   833  0010AE  88D5               	bsf	213,4,c	;volatile
   834                           
   835                           ;timers.c: 16:     TMR0H=0b00011011;
   836  0010B0  0E1B               	movlw	27
   837  0010B2  6ED4               	movwf	212,c	;volatile
   838                           
   839                           ;timers.c: 17:     TMR0L=0b00011110;
   840  0010B4  0E1E               	movlw	30
   841  0010B6  6ED3               	movwf	211,c	;volatile
   842  0010B8                     
   843                           ;timers.c: 18:     T0CON0bits.T0EN=1;
   844  0010B8  8ED5               	bsf	213,7,c	;volatile
   845  0010BA  0012               	return		;funcret
   846  0010BC                     __end_of_Timer0_init:
   847                           	callstack 0
   848                           
   849 ;; *************** function _Timekeeper *****************
   850 ;; Defined at:
   851 ;;		line 24 in file "timers.c"
   852 ;; Parameters:    Size  Location     Type
   853 ;;  pyear           2   10[COMRAM] PTR unsigned int 
   854 ;;		 -> main@year(2), 
   855 ;;  pmonth          2   12[COMRAM] PTR unsigned char 
   856 ;;		 -> main@month(1), 
   857 ;;  pday            2   14[COMRAM] PTR unsigned char 
   858 ;;		 -> main@day(1), 
   859 ;;  phour           2   16[COMRAM] PTR int 
   860 ;;		 -> main@hour(2), 
   861 ;;  pminute         2   18[COMRAM] PTR int 
   862 ;;		 -> main@minute(2), 
   863 ;;  pdayofweek      2   20[COMRAM] PTR unsigned char 
   864 ;;		 -> main@dayofweek(1), 
   865 ;;  pDST            2   22[COMRAM] PTR unsigned char 
   866 ;;		 -> main@DST(1), 
   867 ;; Auto vars:     Size  Location     Type
   868 ;;		None
   869 ;; Return value:  Size  Location     Type
   870 ;;                  1    wreg      void 
   871 ;; Registers used:
   872 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   873 ;; Tracked objects:
   874 ;;		On entry : 0/0
   875 ;;		On exit  : 0/0
   876 ;;		Unchanged: 0/0
   877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   878 ;;      Params:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   879 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   880 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   881 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   882 ;;Total ram usage:       16 bytes
   883 ;; Hardware stack levels used: 1
   884 ;; Hardware stack levels required when called: 3
   885 ;; This function calls:
   886 ;;		_LeapYear
   887 ;; This function is called by:
   888 ;;		_main
   889 ;; This function uses a non-reentrant model
   890 ;;
   891                           
   892                           	psect	text3
   893  0004E6                     __ptext3:
   894                           	callstack 0
   895  0004E6                     _Timekeeper:
   896                           	callstack 27
   897  0004E6                     
   898                           ;timers.c: 26:     ++*pminute;
   899  0004E6  C013  FFD9         	movff	Timekeeper@pminute,fsr2l
   900  0004EA  C014  FFDA         	movff	Timekeeper@pminute+1,fsr2h
   901  0004EE  2ADE               	incf	postinc2,f,c
   902  0004F0  0E00               	movlw	0
   903  0004F2  22DD               	addwfc	postdec2,f,c
   904                           
   905                           ;timers.c: 28:     if (*pminute == 60) {*pminute = 0; ++*phour;}
   906  0004F4  C013  FFD9         	movff	Timekeeper@pminute,fsr2l
   907  0004F8  C014  FFDA         	movff	Timekeeper@pminute+1,fsr2h
   908  0004FC  0E3C               	movlw	60
   909  0004FE  18DE               	xorwf	postinc2,w,c
   910  000500  10DE               	iorwf	postinc2,w,c
   911  000502  A4D8               	btfss	status,2,c
   912  000504  EF86  F002         	goto	u1071
   913  000508  EF88  F002         	goto	u1070
   914  00050C                     u1071:
   915  00050C  EF97  F002         	goto	l1435
   916  000510                     u1070:
   917  000510  C013  FFD9         	movff	Timekeeper@pminute,fsr2l
   918  000514  C014  FFDA         	movff	Timekeeper@pminute+1,fsr2h
   919  000518  0E00               	movlw	0
   920  00051A  6EDE               	movwf	postinc2,c
   921  00051C  0E00               	movlw	0
   922  00051E  6EDD               	movwf	postdec2,c
   923  000520  C011  FFD9         	movff	Timekeeper@phour,fsr2l
   924  000524  C012  FFDA         	movff	Timekeeper@phour+1,fsr2h
   925  000528  2ADE               	incf	postinc2,f,c
   926  00052A  0E00               	movlw	0
   927  00052C  22DD               	addwfc	postdec2,f,c
   928  00052E                     l1435:
   929                           
   930                           ;timers.c: 30:     if (*phour == 24) {*phour = 0; ++*pday; ++*pdayofweek;}
   931  00052E  C011  FFD9         	movff	Timekeeper@phour,fsr2l
   932  000532  C012  FFDA         	movff	Timekeeper@phour+1,fsr2h
   933  000536  0E18               	movlw	24
   934  000538  18DE               	xorwf	postinc2,w,c
   935  00053A  10DE               	iorwf	postinc2,w,c
   936  00053C  A4D8               	btfss	status,2,c
   937  00053E  EFA3  F002         	goto	u1081
   938  000542  EFA5  F002         	goto	u1080
   939  000546                     u1081:
   940  000546  EFB7  F002         	goto	l1443
   941  00054A                     u1080:
   942  00054A  C011  FFD9         	movff	Timekeeper@phour,fsr2l
   943  00054E  C012  FFDA         	movff	Timekeeper@phour+1,fsr2h
   944  000552  0E00               	movlw	0
   945  000554  6EDE               	movwf	postinc2,c
   946  000556  0E00               	movlw	0
   947  000558  6EDD               	movwf	postdec2,c
   948  00055A  C00F  FFD9         	movff	Timekeeper@pday,fsr2l
   949  00055E  C010  FFDA         	movff	Timekeeper@pday+1,fsr2h
   950  000562  2ADF               	incf	indf2,f,c
   951  000564  C015  FFD9         	movff	Timekeeper@pdayofweek,fsr2l
   952  000568  C016  FFDA         	movff	Timekeeper@pdayofweek+1,fsr2h
   953  00056C  2ADF               	incf	indf2,f,c
   954  00056E                     l1443:
   955                           
   956                           ;timers.c: 32:     if (*pdayofweek == 8) {*pdayofweek = 1;}
   957  00056E  C015  FFD9         	movff	Timekeeper@pdayofweek,fsr2l
   958  000572  C016  FFDA         	movff	Timekeeper@pdayofweek+1,fsr2h
   959  000576  0E08               	movlw	8
   960  000578  18DE               	xorwf	postinc2,w,c
   961  00057A  A4D8               	btfss	status,2,c
   962  00057C  EFC2  F002         	goto	u1091
   963  000580  EFC4  F002         	goto	u1090
   964  000584                     u1091:
   965  000584  EFCA  F002         	goto	l1447
   966  000588                     u1090:
   967  000588  C015  FFD9         	movff	Timekeeper@pdayofweek,fsr2l
   968  00058C  C016  FFDA         	movff	Timekeeper@pdayofweek+1,fsr2h
   969  000590  0E01               	movlw	1
   970  000592  6EDF               	movwf	indf2,c
   971  000594                     l1447:
   972                           
   973                           ;timers.c: 34:     if (*pday == 29 && *pmonth == 2 && !LeapYear(*pyear)) {
   974  000594  C00F  FFD9         	movff	Timekeeper@pday,fsr2l
   975  000598  C010  FFDA         	movff	Timekeeper@pday+1,fsr2h
   976  00059C  0E1D               	movlw	29
   977  00059E  18DE               	xorwf	postinc2,w,c
   978  0005A0  A4D8               	btfss	status,2,c
   979  0005A2  EFD5  F002         	goto	u1101
   980  0005A6  EFD7  F002         	goto	u1100
   981  0005AA                     u1101:
   982  0005AA  EF01  F003         	goto	l1457
   983  0005AE                     u1100:
   984  0005AE  C00D  FFD9         	movff	Timekeeper@pmonth,fsr2l
   985  0005B2  C00E  FFDA         	movff	Timekeeper@pmonth+1,fsr2h
   986  0005B6  0E02               	movlw	2
   987  0005B8  18DE               	xorwf	postinc2,w,c
   988  0005BA  A4D8               	btfss	status,2,c
   989  0005BC  EFE2  F002         	goto	u1111
   990  0005C0  EFE4  F002         	goto	u1110
   991  0005C4                     u1111:
   992  0005C4  EF01  F003         	goto	l1457
   993  0005C8                     u1110:
   994  0005C8  C00B  FFD9         	movff	Timekeeper@pyear,fsr2l
   995  0005CC  C00C  FFDA         	movff	Timekeeper@pyear+1,fsr2h
   996  0005D0  CFDE F006          	movff	postinc2,LeapYear@year
   997  0005D4  CFDD F007          	movff	postdec2,LeapYear@year+1
   998  0005D8  EC5E  F007         	call	_LeapYear	;wreg free
   999  0005DC  0900               	iorlw	0
  1000  0005DE  A4D8               	btfss	status,2,c
  1001  0005E0  EFF4  F002         	goto	u1121
  1002  0005E4  EFF6  F002         	goto	u1120
  1003  0005E8                     u1121:
  1004  0005E8  EF01  F003         	goto	l1457
  1005  0005EC                     u1120:
  1006  0005EC                     
  1007                           ;timers.c: 35:         *pday = 1;
  1008  0005EC  C00F  FFD9         	movff	Timekeeper@pday,fsr2l
  1009  0005F0  C010  FFDA         	movff	Timekeeper@pday+1,fsr2h
  1010  0005F4  0E01               	movlw	1
  1011  0005F6  6EDF               	movwf	indf2,c
  1012  0005F8                     
  1013                           ;timers.c: 36:         ++*pmonth;
  1014  0005F8  C00D  FFD9         	movff	Timekeeper@pmonth,fsr2l
  1015  0005FC  C00E  FFDA         	movff	Timekeeper@pmonth+1,fsr2h
  1016  000600  2ADF               	incf	indf2,f,c
  1017  000602                     l1457:
  1018                           
  1019                           ;timers.c: 39:     if (*pday == 30 && *pmonth == 2 && LeapYear(*pyear)) {
  1020  000602  C00F  FFD9         	movff	Timekeeper@pday,fsr2l
  1021  000606  C010  FFDA         	movff	Timekeeper@pday+1,fsr2h
  1022  00060A  0E1E               	movlw	30
  1023  00060C  18DE               	xorwf	postinc2,w,c
  1024  00060E  A4D8               	btfss	status,2,c
  1025  000610  EF0C  F003         	goto	u1131
  1026  000614  EF0E  F003         	goto	u1130
  1027  000618                     u1131:
  1028  000618  EF38  F003         	goto	l1467
  1029  00061C                     u1130:
  1030  00061C  C00D  FFD9         	movff	Timekeeper@pmonth,fsr2l
  1031  000620  C00E  FFDA         	movff	Timekeeper@pmonth+1,fsr2h
  1032  000624  0E02               	movlw	2
  1033  000626  18DE               	xorwf	postinc2,w,c
  1034  000628  A4D8               	btfss	status,2,c
  1035  00062A  EF19  F003         	goto	u1141
  1036  00062E  EF1B  F003         	goto	u1140
  1037  000632                     u1141:
  1038  000632  EF38  F003         	goto	l1467
  1039  000636                     u1140:
  1040  000636  C00B  FFD9         	movff	Timekeeper@pyear,fsr2l
  1041  00063A  C00C  FFDA         	movff	Timekeeper@pyear+1,fsr2h
  1042  00063E  CFDE F006          	movff	postinc2,LeapYear@year
  1043  000642  CFDD F007          	movff	postdec2,LeapYear@year+1
  1044  000646  EC5E  F007         	call	_LeapYear	;wreg free
  1045  00064A  0900               	iorlw	0
  1046  00064C  B4D8               	btfsc	status,2,c
  1047  00064E  EF2B  F003         	goto	u1151
  1048  000652  EF2D  F003         	goto	u1150
  1049  000656                     u1151:
  1050  000656  EF38  F003         	goto	l1467
  1051  00065A                     u1150:
  1052  00065A                     
  1053                           ;timers.c: 40:         *pday = 1;
  1054  00065A  C00F  FFD9         	movff	Timekeeper@pday,fsr2l
  1055  00065E  C010  FFDA         	movff	Timekeeper@pday+1,fsr2h
  1056  000662  0E01               	movlw	1
  1057  000664  6EDF               	movwf	indf2,c
  1058  000666                     
  1059                           ;timers.c: 41:         ++*pmonth;
  1060  000666  C00D  FFD9         	movff	Timekeeper@pmonth,fsr2l
  1061  00066A  C00E  FFDA         	movff	Timekeeper@pmonth+1,fsr2h
  1062  00066E  2ADF               	incf	indf2,f,c
  1063  000670                     l1467:
  1064                           
  1065                           ;timers.c: 44:     if (*pday == 31 && (*pmonth == 4 || *pmonth == 6 || *pmonth == 9 || *
      +                          pmonth == 11)) {
  1066  000670  C00F  FFD9         	movff	Timekeeper@pday,fsr2l
  1067  000674  C010  FFDA         	movff	Timekeeper@pday+1,fsr2h
  1068  000678  0E1F               	movlw	31
  1069  00067A  18DE               	xorwf	postinc2,w,c
  1070  00067C  A4D8               	btfss	status,2,c
  1071  00067E  EF43  F003         	goto	u1161
  1072  000682  EF45  F003         	goto	u1160
  1073  000686                     u1161:
  1074  000686  EF84  F003         	goto	l1481
  1075  00068A                     u1160:
  1076  00068A  C00D  FFD9         	movff	Timekeeper@pmonth,fsr2l
  1077  00068E  C00E  FFDA         	movff	Timekeeper@pmonth+1,fsr2h
  1078  000692  0E04               	movlw	4
  1079  000694  18DE               	xorwf	postinc2,w,c
  1080  000696  B4D8               	btfsc	status,2,c
  1081  000698  EF50  F003         	goto	u1171
  1082  00069C  EF52  F003         	goto	u1170
  1083  0006A0                     u1171:
  1084  0006A0  EF79  F003         	goto	l1477
  1085  0006A4                     u1170:
  1086  0006A4  C00D  FFD9         	movff	Timekeeper@pmonth,fsr2l
  1087  0006A8  C00E  FFDA         	movff	Timekeeper@pmonth+1,fsr2h
  1088  0006AC  0E06               	movlw	6
  1089  0006AE  18DE               	xorwf	postinc2,w,c
  1090  0006B0  B4D8               	btfsc	status,2,c
  1091  0006B2  EF5D  F003         	goto	u1181
  1092  0006B6  EF5F  F003         	goto	u1180
  1093  0006BA                     u1181:
  1094  0006BA  EF79  F003         	goto	l1477
  1095  0006BE                     u1180:
  1096  0006BE  C00D  FFD9         	movff	Timekeeper@pmonth,fsr2l
  1097  0006C2  C00E  FFDA         	movff	Timekeeper@pmonth+1,fsr2h
  1098  0006C6  0E09               	movlw	9
  1099  0006C8  18DE               	xorwf	postinc2,w,c
  1100  0006CA  B4D8               	btfsc	status,2,c
  1101  0006CC  EF6A  F003         	goto	u1191
  1102  0006D0  EF6C  F003         	goto	u1190
  1103  0006D4                     u1191:
  1104  0006D4  EF79  F003         	goto	l1477
  1105  0006D8                     u1190:
  1106  0006D8  C00D  FFD9         	movff	Timekeeper@pmonth,fsr2l
  1107  0006DC  C00E  FFDA         	movff	Timekeeper@pmonth+1,fsr2h
  1108  0006E0  0E0B               	movlw	11
  1109  0006E2  18DE               	xorwf	postinc2,w,c
  1110  0006E4  A4D8               	btfss	status,2,c
  1111  0006E6  EF77  F003         	goto	u1201
  1112  0006EA  EF79  F003         	goto	u1200
  1113  0006EE                     u1201:
  1114  0006EE  EF84  F003         	goto	l1481
  1115  0006F2                     u1200:
  1116  0006F2                     l1477:
  1117                           
  1118                           ;timers.c: 45:         *pday = 1;
  1119  0006F2  C00F  FFD9         	movff	Timekeeper@pday,fsr2l
  1120  0006F6  C010  FFDA         	movff	Timekeeper@pday+1,fsr2h
  1121  0006FA  0E01               	movlw	1
  1122  0006FC  6EDF               	movwf	indf2,c
  1123  0006FE                     
  1124                           ;timers.c: 46:         ++*pmonth;
  1125  0006FE  C00D  FFD9         	movff	Timekeeper@pmonth,fsr2l
  1126  000702  C00E  FFDA         	movff	Timekeeper@pmonth+1,fsr2h
  1127  000706  2ADF               	incf	indf2,f,c
  1128  000708                     l1481:
  1129                           
  1130                           ;timers.c: 49:     if (*pday == 32 && (*pmonth == 1 || *pmonth == 3 || *pmonth == 5 || *
      +                          pmonth == 7 || *pmonth == 8 || *pmonth == 10 || *pmonth == 12)) {
  1131  000708  C00F  FFD9         	movff	Timekeeper@pday,fsr2l
  1132  00070C  C010  FFDA         	movff	Timekeeper@pday+1,fsr2h
  1133  000710  0E20               	movlw	32
  1134  000712  18DE               	xorwf	postinc2,w,c
  1135  000714  A4D8               	btfss	status,2,c
  1136  000716  EF8F  F003         	goto	u1211
  1137  00071A  EF91  F003         	goto	u1210
  1138  00071E                     u1211:
  1139  00071E  EFF6  F003         	goto	l1501
  1140  000722                     u1210:
  1141  000722  C00D  FFD9         	movff	Timekeeper@pmonth,fsr2l
  1142  000726  C00E  FFDA         	movff	Timekeeper@pmonth+1,fsr2h
  1143  00072A  04DE               	decf	postinc2,w,c
  1144  00072C  B4D8               	btfsc	status,2,c
  1145  00072E  EF9B  F003         	goto	u1221
  1146  000732  EF9D  F003         	goto	u1220
  1147  000736                     u1221:
  1148  000736  EFEB  F003         	goto	l1497
  1149  00073A                     u1220:
  1150  00073A  C00D  FFD9         	movff	Timekeeper@pmonth,fsr2l
  1151  00073E  C00E  FFDA         	movff	Timekeeper@pmonth+1,fsr2h
  1152  000742  0E03               	movlw	3
  1153  000744  18DE               	xorwf	postinc2,w,c
  1154  000746  B4D8               	btfsc	status,2,c
  1155  000748  EFA8  F003         	goto	u1231
  1156  00074C  EFAA  F003         	goto	u1230
  1157  000750                     u1231:
  1158  000750  EFEB  F003         	goto	l1497
  1159  000754                     u1230:
  1160  000754  C00D  FFD9         	movff	Timekeeper@pmonth,fsr2l
  1161  000758  C00E  FFDA         	movff	Timekeeper@pmonth+1,fsr2h
  1162  00075C  0E05               	movlw	5
  1163  00075E  18DE               	xorwf	postinc2,w,c
  1164  000760  B4D8               	btfsc	status,2,c
  1165  000762  EFB5  F003         	goto	u1241
  1166  000766  EFB7  F003         	goto	u1240
  1167  00076A                     u1241:
  1168  00076A  EFEB  F003         	goto	l1497
  1169  00076E                     u1240:
  1170  00076E  C00D  FFD9         	movff	Timekeeper@pmonth,fsr2l
  1171  000772  C00E  FFDA         	movff	Timekeeper@pmonth+1,fsr2h
  1172  000776  0E07               	movlw	7
  1173  000778  18DE               	xorwf	postinc2,w,c
  1174  00077A  B4D8               	btfsc	status,2,c
  1175  00077C  EFC2  F003         	goto	u1251
  1176  000780  EFC4  F003         	goto	u1250
  1177  000784                     u1251:
  1178  000784  EFEB  F003         	goto	l1497
  1179  000788                     u1250:
  1180  000788  C00D  FFD9         	movff	Timekeeper@pmonth,fsr2l
  1181  00078C  C00E  FFDA         	movff	Timekeeper@pmonth+1,fsr2h
  1182  000790  0E08               	movlw	8
  1183  000792  18DE               	xorwf	postinc2,w,c
  1184  000794  B4D8               	btfsc	status,2,c
  1185  000796  EFCF  F003         	goto	u1261
  1186  00079A  EFD1  F003         	goto	u1260
  1187  00079E                     u1261:
  1188  00079E  EFEB  F003         	goto	l1497
  1189  0007A2                     u1260:
  1190  0007A2  C00D  FFD9         	movff	Timekeeper@pmonth,fsr2l
  1191  0007A6  C00E  FFDA         	movff	Timekeeper@pmonth+1,fsr2h
  1192  0007AA  0E0A               	movlw	10
  1193  0007AC  18DE               	xorwf	postinc2,w,c
  1194  0007AE  B4D8               	btfsc	status,2,c
  1195  0007B0  EFDC  F003         	goto	u1271
  1196  0007B4  EFDE  F003         	goto	u1270
  1197  0007B8                     u1271:
  1198  0007B8  EFEB  F003         	goto	l1497
  1199  0007BC                     u1270:
  1200  0007BC  C00D  FFD9         	movff	Timekeeper@pmonth,fsr2l
  1201  0007C0  C00E  FFDA         	movff	Timekeeper@pmonth+1,fsr2h
  1202  0007C4  0E0C               	movlw	12
  1203  0007C6  18DE               	xorwf	postinc2,w,c
  1204  0007C8  A4D8               	btfss	status,2,c
  1205  0007CA  EFE9  F003         	goto	u1281
  1206  0007CE  EFEB  F003         	goto	u1280
  1207  0007D2                     u1281:
  1208  0007D2  EFF6  F003         	goto	l1501
  1209  0007D6                     u1280:
  1210  0007D6                     l1497:
  1211                           
  1212                           ;timers.c: 50:         *pday = 1;
  1213  0007D6  C00F  FFD9         	movff	Timekeeper@pday,fsr2l
  1214  0007DA  C010  FFDA         	movff	Timekeeper@pday+1,fsr2h
  1215  0007DE  0E01               	movlw	1
  1216  0007E0  6EDF               	movwf	indf2,c
  1217  0007E2                     
  1218                           ;timers.c: 51:         ++*pmonth;
  1219  0007E2  C00D  FFD9         	movff	Timekeeper@pmonth,fsr2l
  1220  0007E6  C00E  FFDA         	movff	Timekeeper@pmonth+1,fsr2h
  1221  0007EA  2ADF               	incf	indf2,f,c
  1222  0007EC                     l1501:
  1223                           
  1224                           ;timers.c: 54:     if (*pmonth == 13) {*pmonth = 1; ++*pyear;}
  1225  0007EC  C00D  FFD9         	movff	Timekeeper@pmonth,fsr2l
  1226  0007F0  C00E  FFDA         	movff	Timekeeper@pmonth+1,fsr2h
  1227  0007F4  0E0D               	movlw	13
  1228  0007F6  18DE               	xorwf	postinc2,w,c
  1229  0007F8  A4D8               	btfss	status,2,c
  1230  0007FA  EF01  F004         	goto	u1291
  1231  0007FE  EF03  F004         	goto	u1290
  1232  000802                     u1291:
  1233  000802  EF10  F004         	goto	l1507
  1234  000806                     u1290:
  1235  000806  C00D  FFD9         	movff	Timekeeper@pmonth,fsr2l
  1236  00080A  C00E  FFDA         	movff	Timekeeper@pmonth+1,fsr2h
  1237  00080E  0E01               	movlw	1
  1238  000810  6EDF               	movwf	indf2,c
  1239  000812  C00B  FFD9         	movff	Timekeeper@pyear,fsr2l
  1240  000816  C00C  FFDA         	movff	Timekeeper@pyear+1,fsr2h
  1241  00081A  2ADE               	incf	postinc2,f,c
  1242  00081C  0E00               	movlw	0
  1243  00081E  22DD               	addwfc	postdec2,f,c
  1244  000820                     l1507:
  1245                           
  1246                           ;timers.c: 57:     if (*pmonth == 3 && *pday >= 25 && *phour == 1 && *pdayofweek == 7) {
  1247  000820  C00D  FFD9         	movff	Timekeeper@pmonth,fsr2l
  1248  000824  C00E  FFDA         	movff	Timekeeper@pmonth+1,fsr2h
  1249  000828  0E03               	movlw	3
  1250  00082A  18DE               	xorwf	postinc2,w,c
  1251  00082C  A4D8               	btfss	status,2,c
  1252  00082E  EF1B  F004         	goto	u1301
  1253  000832  EF1D  F004         	goto	u1300
  1254  000836                     u1301:
  1255  000836  EF50  F004         	goto	l1519
  1256  00083A                     u1300:
  1257  00083A  C00F  FFD9         	movff	Timekeeper@pday,fsr2l
  1258  00083E  C010  FFDA         	movff	Timekeeper@pday+1,fsr2h
  1259  000842  0E18               	movlw	24
  1260  000844  64DF               	cpfsgt	indf2,c
  1261  000846  EF27  F004         	goto	u1311
  1262  00084A  EF29  F004         	goto	u1310
  1263  00084E                     u1311:
  1264  00084E  EF50  F004         	goto	l1519
  1265  000852                     u1310:
  1266  000852  C011  FFD9         	movff	Timekeeper@phour,fsr2l
  1267  000856  C012  FFDA         	movff	Timekeeper@phour+1,fsr2h
  1268  00085A  04DE               	decf	postinc2,w,c
  1269  00085C  10DE               	iorwf	postinc2,w,c
  1270  00085E  A4D8               	btfss	status,2,c
  1271  000860  EF34  F004         	goto	u1321
  1272  000864  EF36  F004         	goto	u1320
  1273  000868                     u1321:
  1274  000868  EF50  F004         	goto	l1519
  1275  00086C                     u1320:
  1276  00086C  C015  FFD9         	movff	Timekeeper@pdayofweek,fsr2l
  1277  000870  C016  FFDA         	movff	Timekeeper@pdayofweek+1,fsr2h
  1278  000874  0E07               	movlw	7
  1279  000876  18DE               	xorwf	postinc2,w,c
  1280  000878  A4D8               	btfss	status,2,c
  1281  00087A  EF41  F004         	goto	u1331
  1282  00087E  EF43  F004         	goto	u1330
  1283  000882                     u1331:
  1284  000882  EF50  F004         	goto	l1519
  1285  000886                     u1330:
  1286  000886                     
  1287                           ;timers.c: 58:         ++*phour;
  1288  000886  C011  FFD9         	movff	Timekeeper@phour,fsr2l
  1289  00088A  C012  FFDA         	movff	Timekeeper@phour+1,fsr2h
  1290  00088E  2ADE               	incf	postinc2,f,c
  1291  000890  0E00               	movlw	0
  1292  000892  22DD               	addwfc	postdec2,f,c
  1293  000894                     
  1294                           ;timers.c: 59:         *pDST = 1;
  1295  000894  C017  FFD9         	movff	Timekeeper@pDST,fsr2l
  1296  000898  C018  FFDA         	movff	Timekeeper@pDST+1,fsr2h
  1297  00089C  0E01               	movlw	1
  1298  00089E  6EDF               	movwf	indf2,c
  1299  0008A0                     l1519:
  1300                           
  1301                           ;timers.c: 62:     if (*pmonth == 10 && *pday >=25 && *phour == 2 && *pdayofweek == 7 &&
      +                           *pDST) {
  1302  0008A0  C00D  FFD9         	movff	Timekeeper@pmonth,fsr2l
  1303  0008A4  C00E  FFDA         	movff	Timekeeper@pmonth+1,fsr2h
  1304  0008A8  0E0A               	movlw	10
  1305  0008AA  18DE               	xorwf	postinc2,w,c
  1306  0008AC  A4D8               	btfss	status,2,c
  1307  0008AE  EF5B  F004         	goto	u1341
  1308  0008B2  EF5D  F004         	goto	u1340
  1309  0008B6                     u1341:
  1310  0008B6  EF9D  F004         	goto	l160
  1311  0008BA                     u1340:
  1312  0008BA  C00F  FFD9         	movff	Timekeeper@pday,fsr2l
  1313  0008BE  C010  FFDA         	movff	Timekeeper@pday+1,fsr2h
  1314  0008C2  0E18               	movlw	24
  1315  0008C4  64DF               	cpfsgt	indf2,c
  1316  0008C6  EF67  F004         	goto	u1351
  1317  0008CA  EF69  F004         	goto	u1350
  1318  0008CE                     u1351:
  1319  0008CE  EF9D  F004         	goto	l160
  1320  0008D2                     u1350:
  1321  0008D2  C011  FFD9         	movff	Timekeeper@phour,fsr2l
  1322  0008D6  C012  FFDA         	movff	Timekeeper@phour+1,fsr2h
  1323  0008DA  0E02               	movlw	2
  1324  0008DC  18DE               	xorwf	postinc2,w,c
  1325  0008DE  10DE               	iorwf	postinc2,w,c
  1326  0008E0  A4D8               	btfss	status,2,c
  1327  0008E2  EF75  F004         	goto	u1361
  1328  0008E6  EF77  F004         	goto	u1360
  1329  0008EA                     u1361:
  1330  0008EA  EF9D  F004         	goto	l160
  1331  0008EE                     u1360:
  1332  0008EE  C015  FFD9         	movff	Timekeeper@pdayofweek,fsr2l
  1333  0008F2  C016  FFDA         	movff	Timekeeper@pdayofweek+1,fsr2h
  1334  0008F6  0E07               	movlw	7
  1335  0008F8  18DE               	xorwf	postinc2,w,c
  1336  0008FA  A4D8               	btfss	status,2,c
  1337  0008FC  EF82  F004         	goto	u1371
  1338  000900  EF84  F004         	goto	u1370
  1339  000904                     u1371:
  1340  000904  EF9D  F004         	goto	l160
  1341  000908                     u1370:
  1342  000908  C017  FFD9         	movff	Timekeeper@pDST,fsr2l
  1343  00090C  C018  FFDA         	movff	Timekeeper@pDST+1,fsr2h
  1344  000910  50DF               	movf	indf2,w,c
  1345  000912  B4D8               	btfsc	status,2,c
  1346  000914  EF8E  F004         	goto	u1381
  1347  000918  EF90  F004         	goto	u1380
  1348  00091C                     u1381:
  1349  00091C  EF9D  F004         	goto	l160
  1350  000920                     u1380:
  1351  000920                     
  1352                           ;timers.c: 63:         --*phour;
  1353  000920  C011  FFD9         	movff	Timekeeper@phour,fsr2l
  1354  000924  C012  FFDA         	movff	Timekeeper@phour+1,fsr2h
  1355  000928  06DE               	decf	postinc2,f,c
  1356  00092A  0E00               	movlw	0
  1357  00092C  5ADD               	subwfb	postdec2,f,c
  1358  00092E                     
  1359                           ;timers.c: 64:         *pDST = 0;
  1360  00092E  C017  FFD9         	movff	Timekeeper@pDST,fsr2l
  1361  000932  C018  FFDA         	movff	Timekeeper@pDST+1,fsr2h
  1362  000936  0E00               	movlw	0
  1363  000938  6EDF               	movwf	indf2,c
  1364  00093A                     l160:
  1365  00093A  0012               	return		;funcret
  1366  00093C                     __end_of_Timekeeper:
  1367                           	callstack 0
  1368                           
  1369 ;; *************** function _LeapYear *****************
  1370 ;; Defined at:
  1371 ;;		line 71 in file "timers.c"
  1372 ;; Parameters:    Size  Location     Type
  1373 ;;  year            2    5[COMRAM] unsigned int 
  1374 ;; Auto vars:     Size  Location     Type
  1375 ;;  leapyear        1    9[COMRAM] unsigned char 
  1376 ;; Return value:  Size  Location     Type
  1377 ;;                  1    wreg      unsigned char 
  1378 ;; Registers used:
  1379 ;;		wreg, status,2, status,0, cstack
  1380 ;; Tracked objects:
  1381 ;;		On entry : 0/0
  1382 ;;		On exit  : 0/0
  1383 ;;		Unchanged: 0/0
  1384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1385 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1386 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1387 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1388 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1389 ;;Total ram usage:        5 bytes
  1390 ;; Hardware stack levels used: 1
  1391 ;; Hardware stack levels required when called: 2
  1392 ;; This function calls:
  1393 ;;		___lwmod
  1394 ;; This function is called by:
  1395 ;;		_Timekeeper
  1396 ;; This function uses a non-reentrant model
  1397 ;;
  1398                           
  1399                           	psect	text4
  1400  000EBC                     __ptext4:
  1401                           	callstack 0
  1402  000EBC                     _LeapYear:
  1403                           	callstack 27
  1404  000EBC                     
  1405                           ;timers.c: 71: char LeapYear(unsigned int year);timers.c: 72: {;timers.c: 73:     char l
      +                          eapyear;;timers.c: 74:     if (year % 4 == 0 && year % 100 != 0) {
  1406  000EBC  0E03               	movlw	3
  1407  000EBE  1406               	andwf	LeapYear@year^0,w,c
  1408  000EC0  6E08               	movwf	??_LeapYear^0,c
  1409  000EC2  0E00               	movlw	0
  1410  000EC4  1407               	andwf	(LeapYear@year+1)^0,w,c
  1411  000EC6  6E09               	movwf	(??_LeapYear+1)^0,c
  1412  000EC8  5008               	movf	??_LeapYear^0,w,c
  1413  000ECA  1009               	iorwf	(??_LeapYear+1)^0,w,c
  1414  000ECC  A4D8               	btfss	status,2,c
  1415  000ECE  EF6B  F007         	goto	u1021
  1416  000ED2  EF6D  F007         	goto	u1020
  1417  000ED6                     u1021:
  1418  000ED6  EF84  F007         	goto	l1407
  1419  000EDA                     u1020:
  1420  000EDA  C006  F001         	movff	LeapYear@year,___lwmod@dividend
  1421  000EDE  C007  F002         	movff	LeapYear@year+1,___lwmod@dividend+1
  1422  000EE2  0E00               	movlw	0
  1423  000EE4  6E04               	movwf	(___lwmod@divisor+1)^0,c
  1424  000EE6  0E64               	movlw	100
  1425  000EE8  6E03               	movwf	___lwmod@divisor^0,c
  1426  000EEA  EC09  F008         	call	___lwmod	;wreg free
  1427  000EEE  5001               	movf	?___lwmod^0,w,c
  1428  000EF0  1002               	iorwf	(?___lwmod+1)^0,w,c
  1429  000EF2  B4D8               	btfsc	status,2,c
  1430  000EF4  EF7E  F007         	goto	u1031
  1431  000EF8  EF80  F007         	goto	u1030
  1432  000EFC                     u1031:
  1433  000EFC  EF84  F007         	goto	l1407
  1434  000F00                     u1030:
  1435  000F00                     l1405:
  1436                           
  1437                           ;timers.c: 75:         leapyear = 1;
  1438  000F00  0E01               	movlw	1
  1439  000F02  6E0A               	movwf	LeapYear@leapyear^0,c
  1440                           
  1441                           ;timers.c: 76:     } else if (year % 400 == 0) {
  1442  000F04  EF9B  F007         	goto	l164
  1443  000F08                     l1407:
  1444  000F08  C006  F001         	movff	LeapYear@year,___lwmod@dividend
  1445  000F0C  C007  F002         	movff	LeapYear@year+1,___lwmod@dividend+1
  1446  000F10  0E01               	movlw	1
  1447  000F12  6E04               	movwf	(___lwmod@divisor+1)^0,c
  1448  000F14  0E90               	movlw	144
  1449  000F16  6E03               	movwf	___lwmod@divisor^0,c
  1450  000F18  EC09  F008         	call	___lwmod	;wreg free
  1451  000F1C  5001               	movf	?___lwmod^0,w,c
  1452  000F1E  1002               	iorwf	(?___lwmod+1)^0,w,c
  1453  000F20  A4D8               	btfss	status,2,c
  1454  000F22  EF95  F007         	goto	u1041
  1455  000F26  EF97  F007         	goto	u1040
  1456  000F2A                     u1041:
  1457  000F2A  EF99  F007         	goto	l1411
  1458  000F2E                     u1040:
  1459  000F2E  EF80  F007         	goto	l1405
  1460  000F32                     l1411:
  1461                           
  1462                           ;timers.c: 79:         leapyear = 0;
  1463  000F32  0E00               	movlw	0
  1464  000F34  6E0A               	movwf	LeapYear@leapyear^0,c
  1465  000F36                     l164:
  1466                           
  1467                           ;timers.c: 81:     return leapyear;
  1468  000F36  500A               	movf	LeapYear@leapyear^0,w,c
  1469  000F38  0012               	return		;funcret
  1470  000F3A                     __end_of_LeapYear:
  1471                           	callstack 0
  1472                           
  1473 ;; *************** function ___lwmod *****************
  1474 ;; Defined at:
  1475 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\lwmod.c"
  1476 ;; Parameters:    Size  Location     Type
  1477 ;;  dividend        2    0[COMRAM] unsigned int 
  1478 ;;  divisor         2    2[COMRAM] unsigned int 
  1479 ;; Auto vars:     Size  Location     Type
  1480 ;;  counter         1    4[COMRAM] unsigned char 
  1481 ;; Return value:  Size  Location     Type
  1482 ;;                  2    0[COMRAM] unsigned int 
  1483 ;; Registers used:
  1484 ;;		wreg, status,2, status,0
  1485 ;; Tracked objects:
  1486 ;;		On entry : 0/0
  1487 ;;		On exit  : 0/0
  1488 ;;		Unchanged: 0/0
  1489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1490 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1491 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1492 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1493 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1494 ;;Total ram usage:        5 bytes
  1495 ;; Hardware stack levels used: 1
  1496 ;; Hardware stack levels required when called: 1
  1497 ;; This function calls:
  1498 ;;		Nothing
  1499 ;; This function is called by:
  1500 ;;		_LeapYear
  1501 ;; This function uses a non-reentrant model
  1502 ;;
  1503                           
  1504                           	psect	text5
  1505  001012                     __ptext5:
  1506                           	callstack 0
  1507  001012                     ___lwmod:
  1508                           	callstack 27
  1509  001012  5003               	movf	___lwmod@divisor^0,w,c
  1510  001014  1004               	iorwf	(___lwmod@divisor+1)^0,w,c
  1511  001016  B4D8               	btfsc	status,2,c
  1512  001018  EF10  F008         	goto	u991
  1513  00101C  EF12  F008         	goto	u990
  1514  001020                     u991:
  1515  001020  EF36  F008         	goto	l709
  1516  001024                     u990:
  1517  001024  0E01               	movlw	1
  1518  001026  6E05               	movwf	___lwmod@counter^0,c
  1519  001028  EF1A  F008         	goto	l1391
  1520  00102C                     l1389:
  1521  00102C  90D8               	bcf	status,0,c
  1522  00102E  3603               	rlcf	___lwmod@divisor^0,f,c
  1523  001030  3604               	rlcf	(___lwmod@divisor+1)^0,f,c
  1524  001032  2A05               	incf	___lwmod@counter^0,f,c
  1525  001034                     l1391:
  1526  001034  AE04               	btfss	(___lwmod@divisor+1)^0,7,c
  1527  001036  EF1F  F008         	goto	u1001
  1528  00103A  EF21  F008         	goto	u1000
  1529  00103E                     u1001:
  1530  00103E  EF16  F008         	goto	l1389
  1531  001042                     u1000:
  1532  001042                     l1393:
  1533  001042  5003               	movf	___lwmod@divisor^0,w,c
  1534  001044  5C01               	subwf	___lwmod@dividend^0,w,c
  1535  001046  5004               	movf	(___lwmod@divisor+1)^0,w,c
  1536  001048  5802               	subwfb	(___lwmod@dividend+1)^0,w,c
  1537  00104A  A0D8               	btfss	status,0,c
  1538  00104C  EF2A  F008         	goto	u1011
  1539  001050  EF2C  F008         	goto	u1010
  1540  001054                     u1011:
  1541  001054  EF30  F008         	goto	l1397
  1542  001058                     u1010:
  1543  001058  5003               	movf	___lwmod@divisor^0,w,c
  1544  00105A  5E01               	subwf	___lwmod@dividend^0,f,c
  1545  00105C  5004               	movf	(___lwmod@divisor+1)^0,w,c
  1546  00105E  5A02               	subwfb	(___lwmod@dividend+1)^0,f,c
  1547  001060                     l1397:
  1548  001060  90D8               	bcf	status,0,c
  1549  001062  3204               	rrcf	(___lwmod@divisor+1)^0,f,c
  1550  001064  3203               	rrcf	___lwmod@divisor^0,f,c
  1551  001066  2E05               	decfsz	___lwmod@counter^0,f,c
  1552  001068  EF21  F008         	goto	l1393
  1553  00106C                     l709:
  1554  00106C  C001  F001         	movff	___lwmod@dividend,?___lwmod
  1555  001070  C002  F002         	movff	___lwmod@dividend+1,?___lwmod+1
  1556  001074  0012               	return		;funcret
  1557  001076                     __end_of___lwmod:
  1558                           	callstack 0
  1559                           
  1560 ;; *************** function _SunPleaseFixTheDamnClock *****************
  1561 ;; Defined at:
  1562 ;;		line 87 in file "timers.c"
  1563 ;; Parameters:    Size  Location     Type
  1564 ;;  pdawnhour       2   35[COMRAM] PTR int 
  1565 ;;		 -> main@dawnhour(2), 
  1566 ;;  pdawnminute     2   37[COMRAM] PTR int 
  1567 ;;		 -> main@dawnminute(2), 
  1568 ;;  pduskhour       2   39[COMRAM] PTR int 
  1569 ;;		 -> main@duskhour(2), 
  1570 ;;  pduskminute     2   41[COMRAM] PTR int 
  1571 ;;		 -> main@duskminute(2), 
  1572 ;;  phour           2   43[COMRAM] PTR int 
  1573 ;;		 -> main@hour(2), 
  1574 ;;  pminute         2   45[COMRAM] PTR int 
  1575 ;;		 -> main@minute(2), 
  1576 ;;  DST             1   47[COMRAM] unsigned char 
  1577 ;; Auto vars:     Size  Location     Type
  1578 ;;  timedifferen    2   56[COMRAM] int 
  1579 ;;  avgminute       2   54[COMRAM] int 
  1580 ;;  avghour         2   52[COMRAM] int 
  1581 ;; Return value:  Size  Location     Type
  1582 ;;                  1    wreg      void 
  1583 ;; Registers used:
  1584 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1585 ;; Tracked objects:
  1586 ;;		On entry : 0/0
  1587 ;;		On exit  : 0/0
  1588 ;;		Unchanged: 0/0
  1589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1590 ;;      Params:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1591 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1592 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1593 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1594 ;;Total ram usage:       23 bytes
  1595 ;; Hardware stack levels used: 1
  1596 ;; Hardware stack levels required when called: 3
  1597 ;; This function calls:
  1598 ;;		_TimeAvg
  1599 ;;		_TimeDiff
  1600 ;;		___awdiv
  1601 ;;		___awmod
  1602 ;; This function is called by:
  1603 ;;		_main
  1604 ;; This function uses a non-reentrant model
  1605 ;;
  1606                           
  1607                           	psect	text6
  1608  00005E                     __ptext6:
  1609                           	callstack 0
  1610  00005E                     _SunPleaseFixTheDamnClock:
  1611                           	callstack 27
  1612  00005E                     
  1613                           ;timers.c: 87: void SunPleaseFixTheDamnClock(int *pdawnhour, int *pdawnminute, int *pdus
      +                          khour, int *pduskminute, int *phour, int *pminute, char DST);timers.c: 88: {;timers.c: 8
      +                          9:     int avghour;;timers.c: 90:     int avgminute;;timers.c: 92:     if (DST) {*pdawnh
      +                          our = *pdawnhour - 1; *pduskhour = *pduskhour - 1;}
  1614  00005E  5030               	movf	SunPleaseFixTheDamnClock@DST^0,w,c
  1615  000060  B4D8               	btfsc	status,2,c
  1616  000062  EF35  F000         	goto	u1491
  1617  000066  EF37  F000         	goto	u1490
  1618  00006A                     u1491:
  1619  00006A  EF67  F000         	goto	l1567
  1620  00006E                     u1490:
  1621  00006E  0EFF               	movlw	255
  1622  000070  6E31               	movwf	??_SunPleaseFixTheDamnClock^0,c
  1623  000072  0EFF               	movlw	255
  1624  000074  6E32               	movwf	(??_SunPleaseFixTheDamnClock+1)^0,c
  1625  000076  C024  FFD9         	movff	SunPleaseFixTheDamnClock@pdawnhour,fsr2l
  1626  00007A  C025  FFDA         	movff	SunPleaseFixTheDamnClock@pdawnhour+1,fsr2h
  1627  00007E  CFDE F033          	movff	postinc2,??_SunPleaseFixTheDamnClock+2
  1628  000082  CFDD F034          	movff	postdec2,??_SunPleaseFixTheDamnClock+3
  1629  000086  5031               	movf	??_SunPleaseFixTheDamnClock^0,w,c
  1630  000088  2633               	addwf	(??_SunPleaseFixTheDamnClock+2)^0,f,c
  1631  00008A  5032               	movf	(??_SunPleaseFixTheDamnClock+1)^0,w,c
  1632  00008C  2234               	addwfc	(??_SunPleaseFixTheDamnClock+3)^0,f,c
  1633  00008E  C024  FFD9         	movff	SunPleaseFixTheDamnClock@pdawnhour,fsr2l
  1634  000092  C025  FFDA         	movff	SunPleaseFixTheDamnClock@pdawnhour+1,fsr2h
  1635  000096  C033  FFDE         	movff	??_SunPleaseFixTheDamnClock+2,postinc2
  1636  00009A  C034  FFDD         	movff	??_SunPleaseFixTheDamnClock+3,postdec2
  1637  00009E  0EFF               	movlw	255
  1638  0000A0  6E31               	movwf	??_SunPleaseFixTheDamnClock^0,c
  1639  0000A2  0EFF               	movlw	255
  1640  0000A4  6E32               	movwf	(??_SunPleaseFixTheDamnClock+1)^0,c
  1641  0000A6  C028  FFD9         	movff	SunPleaseFixTheDamnClock@pduskhour,fsr2l
  1642  0000AA  C029  FFDA         	movff	SunPleaseFixTheDamnClock@pduskhour+1,fsr2h
  1643  0000AE  CFDE F033          	movff	postinc2,??_SunPleaseFixTheDamnClock+2
  1644  0000B2  CFDD F034          	movff	postdec2,??_SunPleaseFixTheDamnClock+3
  1645  0000B6  5031               	movf	??_SunPleaseFixTheDamnClock^0,w,c
  1646  0000B8  2633               	addwf	(??_SunPleaseFixTheDamnClock+2)^0,f,c
  1647  0000BA  5032               	movf	(??_SunPleaseFixTheDamnClock+1)^0,w,c
  1648  0000BC  2234               	addwfc	(??_SunPleaseFixTheDamnClock+3)^0,f,c
  1649  0000BE  C028  FFD9         	movff	SunPleaseFixTheDamnClock@pduskhour,fsr2l
  1650  0000C2  C029  FFDA         	movff	SunPleaseFixTheDamnClock@pduskhour+1,fsr2h
  1651  0000C6  C033  FFDE         	movff	??_SunPleaseFixTheDamnClock+2,postinc2
  1652  0000CA  C034  FFDD         	movff	??_SunPleaseFixTheDamnClock+3,postdec2
  1653  0000CE                     l1567:
  1654                           
  1655                           ;timers.c: 93:     TimeAvg(*pdawnhour, *pdawnminute, *pduskhour, *pduskminute, &avghour,
      +                           &avgminute);
  1656  0000CE  C024  FFD9         	movff	SunPleaseFixTheDamnClock@pdawnhour,fsr2l
  1657  0000D2  C025  FFDA         	movff	SunPleaseFixTheDamnClock@pdawnhour+1,fsr2h
  1658  0000D6  CFDE F012          	movff	postinc2,TimeAvg@hour1
  1659  0000DA  CFDD F013          	movff	postdec2,TimeAvg@hour1+1
  1660  0000DE  C026  FFD9         	movff	SunPleaseFixTheDamnClock@pdawnminute,fsr2l
  1661  0000E2  C027  FFDA         	movff	SunPleaseFixTheDamnClock@pdawnminute+1,fsr2h
  1662  0000E6  CFDE F014          	movff	postinc2,TimeAvg@minute1
  1663  0000EA  CFDD F015          	movff	postdec2,TimeAvg@minute1+1
  1664  0000EE  C028  FFD9         	movff	SunPleaseFixTheDamnClock@pduskhour,fsr2l
  1665  0000F2  C029  FFDA         	movff	SunPleaseFixTheDamnClock@pduskhour+1,fsr2h
  1666  0000F6  CFDE F016          	movff	postinc2,TimeAvg@hour2
  1667  0000FA  CFDD F017          	movff	postdec2,TimeAvg@hour2+1
  1668  0000FE  C02A  FFD9         	movff	SunPleaseFixTheDamnClock@pduskminute,fsr2l
  1669  000102  C02B  FFDA         	movff	SunPleaseFixTheDamnClock@pduskminute+1,fsr2h
  1670  000106  CFDE F018          	movff	postinc2,TimeAvg@minute2
  1671  00010A  CFDD F019          	movff	postdec2,TimeAvg@minute2+1
  1672  00010E  0E35               	movlw	low SunPleaseFixTheDamnClock@avghour
  1673  000110  6E1A               	movwf	TimeAvg@pavghour^0,c
  1674  000112  0E00               	movlw	high SunPleaseFixTheDamnClock@avghour
  1675  000114  6E1B               	movwf	(TimeAvg@pavghour+1)^0,c
  1676  000116  0E37               	movlw	low SunPleaseFixTheDamnClock@avgminute
  1677  000118  6E1C               	movwf	TimeAvg@pavgminute^0,c
  1678  00011A  0E00               	movlw	high SunPleaseFixTheDamnClock@avgminute
  1679  00011C  6E1D               	movwf	(TimeAvg@pavgminute+1)^0,c
  1680  00011E  EC59  F005         	call	_TimeAvg	;wreg free
  1681  000122                     
  1682                           ;timers.c: 94:     if (DST) {*pdawnhour = *pdawnhour + 1; *pduskhour = *pduskhour + 1;}
  1683  000122  5030               	movf	SunPleaseFixTheDamnClock@DST^0,w,c
  1684  000124  B4D8               	btfsc	status,2,c
  1685  000126  EF97  F000         	goto	u1501
  1686  00012A  EF99  F000         	goto	u1500
  1687  00012E                     u1501:
  1688  00012E  EFC1  F000         	goto	l1573
  1689  000132                     u1500:
  1690  000132  C024  FFD9         	movff	SunPleaseFixTheDamnClock@pdawnhour,fsr2l
  1691  000136  C025  FFDA         	movff	SunPleaseFixTheDamnClock@pdawnhour+1,fsr2h
  1692  00013A  CFDE F031          	movff	postinc2,??_SunPleaseFixTheDamnClock
  1693  00013E  CFDD F032          	movff	postdec2,??_SunPleaseFixTheDamnClock+1
  1694  000142  0E01               	movlw	1
  1695  000144  2631               	addwf	??_SunPleaseFixTheDamnClock^0,f,c
  1696  000146  0E00               	movlw	0
  1697  000148  2232               	addwfc	(??_SunPleaseFixTheDamnClock+1)^0,f,c
  1698  00014A  C024  FFD9         	movff	SunPleaseFixTheDamnClock@pdawnhour,fsr2l
  1699  00014E  C025  FFDA         	movff	SunPleaseFixTheDamnClock@pdawnhour+1,fsr2h
  1700  000152  C031  FFDE         	movff	??_SunPleaseFixTheDamnClock,postinc2
  1701  000156  C032  FFDD         	movff	??_SunPleaseFixTheDamnClock+1,postdec2
  1702  00015A  C028  FFD9         	movff	SunPleaseFixTheDamnClock@pduskhour,fsr2l
  1703  00015E  C029  FFDA         	movff	SunPleaseFixTheDamnClock@pduskhour+1,fsr2h
  1704  000162  CFDE F031          	movff	postinc2,??_SunPleaseFixTheDamnClock
  1705  000166  CFDD F032          	movff	postdec2,??_SunPleaseFixTheDamnClock+1
  1706  00016A  0E01               	movlw	1
  1707  00016C  2631               	addwf	??_SunPleaseFixTheDamnClock^0,f,c
  1708  00016E  0E00               	movlw	0
  1709  000170  2232               	addwfc	(??_SunPleaseFixTheDamnClock+1)^0,f,c
  1710  000172  C028  FFD9         	movff	SunPleaseFixTheDamnClock@pduskhour,fsr2l
  1711  000176  C029  FFDA         	movff	SunPleaseFixTheDamnClock@pduskhour+1,fsr2h
  1712  00017A  C031  FFDE         	movff	??_SunPleaseFixTheDamnClock,postinc2
  1713  00017E  C032  FFDD         	movff	??_SunPleaseFixTheDamnClock+1,postdec2
  1714  000182                     l1573:
  1715                           
  1716                           ;timers.c: 95:     int timedifference = TimeDiff(avghour, avgminute, 12, 0);
  1717  000182  C035  F001         	movff	SunPleaseFixTheDamnClock@avghour,TimeDiff@hour1
  1718  000186  C036  F002         	movff	SunPleaseFixTheDamnClock@avghour+1,TimeDiff@hour1+1
  1719  00018A  C037  F003         	movff	SunPleaseFixTheDamnClock@avgminute,TimeDiff@minute1
  1720  00018E  C038  F004         	movff	SunPleaseFixTheDamnClock@avgminute+1,TimeDiff@minute1+1
  1721  000192  0E00               	movlw	0
  1722  000194  6E06               	movwf	(TimeDiff@hour2+1)^0,c
  1723  000196  0E0C               	movlw	12
  1724  000198  6E05               	movwf	TimeDiff@hour2^0,c
  1725  00019A  0E00               	movlw	0
  1726  00019C  6E08               	movwf	(TimeDiff@minute2+1)^0,c
  1727  00019E  0E00               	movlw	0
  1728  0001A0  6E07               	movwf	TimeDiff@minute2^0,c
  1729  0001A2  EC64  F006         	call	_TimeDiff	;wreg free
  1730  0001A6  C001  F039         	movff	?_TimeDiff,SunPleaseFixTheDamnClock@timedifference
  1731  0001AA  C002  F03A         	movff	?_TimeDiff+1,SunPleaseFixTheDamnClock@timedifference+1
  1732  0001AE                     
  1733                           ;timers.c: 97:     if (timedifference > 30 || timedifference < -30) {
  1734  0001AE  BE3A               	btfsc	(SunPleaseFixTheDamnClock@timedifference+1)^0,7,c
  1735  0001B0  EFE5  F000         	goto	u1510
  1736  0001B4  503A               	movf	(SunPleaseFixTheDamnClock@timedifference+1)^0,w,c
  1737  0001B6  E107               	bnz	u1511
  1738  0001B8  0E1F               	movlw	31
  1739  0001BA  5C39               	subwf	SunPleaseFixTheDamnClock@timedifference^0,w,c
  1740  0001BC  B0D8               	btfsc	status,0,c
  1741  0001BE  EFE3  F000         	goto	u1511
  1742  0001C2  EFE5  F000         	goto	u1510
  1743  0001C6                     u1511:
  1744  0001C6  EFF3  F000         	goto	l1579
  1745  0001CA                     u1510:
  1746  0001CA  AE3A               	btfss	(SunPleaseFixTheDamnClock@timedifference+1)^0,7,c
  1747  0001CC  EFF1  F000         	goto	u1521
  1748  0001D0  0EE2               	movlw	226
  1749  0001D2  5C39               	subwf	SunPleaseFixTheDamnClock@timedifference^0,w,c
  1750  0001D4  0EFF               	movlw	255
  1751  0001D6  583A               	subwfb	(SunPleaseFixTheDamnClock@timedifference+1)^0,w,c
  1752  0001D8  B0D8               	btfsc	status,0,c
  1753  0001DA  EFF1  F000         	goto	u1521
  1754  0001DE  EFF3  F000         	goto	u1520
  1755  0001E2                     u1521:
  1756  0001E2  EF72  F002         	goto	l182
  1757  0001E6                     u1520:
  1758  0001E6                     l1579:
  1759                           
  1760                           ;timers.c: 98:         *pminute = timedifference % 60;
  1761  0001E6  C039  F001         	movff	SunPleaseFixTheDamnClock@timedifference,___awmod@dividend
  1762  0001EA  C03A  F002         	movff	SunPleaseFixTheDamnClock@timedifference+1,___awmod@dividend+1
  1763  0001EE  0E00               	movlw	0
  1764  0001F0  6E04               	movwf	(___awmod@divisor+1)^0,c
  1765  0001F2  0E3C               	movlw	60
  1766  0001F4  6E03               	movwf	___awmod@divisor^0,c
  1767  0001F6  ECBF  F006         	call	___awmod	;wreg free
  1768  0001FA  C02E  FFD9         	movff	SunPleaseFixTheDamnClock@pminute,fsr2l
  1769  0001FE  C02F  FFDA         	movff	SunPleaseFixTheDamnClock@pminute+1,fsr2h
  1770  000202  C001  FFDE         	movff	?___awmod,postinc2
  1771  000206  C002  FFDD         	movff	?___awmod+1,postdec2
  1772                           
  1773                           ;timers.c: 99:         *pdawnminute = *pdawnminute + timedifference % 60;
  1774  00020A  C026  FFD9         	movff	SunPleaseFixTheDamnClock@pdawnminute,fsr2l
  1775  00020E  C027  FFDA         	movff	SunPleaseFixTheDamnClock@pdawnminute+1,fsr2h
  1776  000212  CFDE F031          	movff	postinc2,??_SunPleaseFixTheDamnClock
  1777  000216  CFDD F032          	movff	postdec2,??_SunPleaseFixTheDamnClock+1
  1778  00021A  C039  F001         	movff	SunPleaseFixTheDamnClock@timedifference,___awmod@dividend
  1779  00021E  C03A  F002         	movff	SunPleaseFixTheDamnClock@timedifference+1,___awmod@dividend+1
  1780  000222  0E00               	movlw	0
  1781  000224  6E04               	movwf	(___awmod@divisor+1)^0,c
  1782  000226  0E3C               	movlw	60
  1783  000228  6E03               	movwf	___awmod@divisor^0,c
  1784  00022A  ECBF  F006         	call	___awmod	;wreg free
  1785  00022E  5031               	movf	??_SunPleaseFixTheDamnClock^0,w,c
  1786  000230  2601               	addwf	?___awmod^0,f,c
  1787  000232  5032               	movf	(??_SunPleaseFixTheDamnClock+1)^0,w,c
  1788  000234  2202               	addwfc	(?___awmod+1)^0,f,c
  1789  000236  C026  FFD9         	movff	SunPleaseFixTheDamnClock@pdawnminute,fsr2l
  1790  00023A  C027  FFDA         	movff	SunPleaseFixTheDamnClock@pdawnminute+1,fsr2h
  1791  00023E  C001  FFDE         	movff	?___awmod,postinc2
  1792  000242  C002  FFDD         	movff	?___awmod+1,postdec2
  1793                           
  1794                           ;timers.c: 100:         *pduskminute = *pduskminute + timedifference % 60;
  1795  000246  C02A  FFD9         	movff	SunPleaseFixTheDamnClock@pduskminute,fsr2l
  1796  00024A  C02B  FFDA         	movff	SunPleaseFixTheDamnClock@pduskminute+1,fsr2h
  1797  00024E  CFDE F031          	movff	postinc2,??_SunPleaseFixTheDamnClock
  1798  000252  CFDD F032          	movff	postdec2,??_SunPleaseFixTheDamnClock+1
  1799  000256  C039  F001         	movff	SunPleaseFixTheDamnClock@timedifference,___awmod@dividend
  1800  00025A  C03A  F002         	movff	SunPleaseFixTheDamnClock@timedifference+1,___awmod@dividend+1
  1801  00025E  0E00               	movlw	0
  1802  000260  6E04               	movwf	(___awmod@divisor+1)^0,c
  1803  000262  0E3C               	movlw	60
  1804  000264  6E03               	movwf	___awmod@divisor^0,c
  1805  000266  ECBF  F006         	call	___awmod	;wreg free
  1806  00026A  5031               	movf	??_SunPleaseFixTheDamnClock^0,w,c
  1807  00026C  2601               	addwf	?___awmod^0,f,c
  1808  00026E  5032               	movf	(??_SunPleaseFixTheDamnClock+1)^0,w,c
  1809  000270  2202               	addwfc	(?___awmod+1)^0,f,c
  1810  000272  C02A  FFD9         	movff	SunPleaseFixTheDamnClock@pduskminute,fsr2l
  1811  000276  C02B  FFDA         	movff	SunPleaseFixTheDamnClock@pduskminute+1,fsr2h
  1812  00027A  C001  FFDE         	movff	?___awmod,postinc2
  1813  00027E  C002  FFDD         	movff	?___awmod+1,postdec2
  1814  000282                     
  1815                           ;timers.c: 102:         if (*pminute < 0) {--*phour; *pminute = *pminute + 60;}
  1816  000282  C02E  FFD9         	movff	SunPleaseFixTheDamnClock@pminute,fsr2l
  1817  000286  C02F  FFDA         	movff	SunPleaseFixTheDamnClock@pminute+1,fsr2h
  1818  00028A  0E01               	movlw	1
  1819  00028C  BEDB               	btfsc	plusw2,7,c
  1820  00028E  EF4D  F001         	goto	u1530
  1821  000292  EF4B  F001         	goto	u1531
  1822  000296                     u1531:
  1823  000296  EF68  F001         	goto	l175
  1824  00029A                     u1530:
  1825  00029A  C02C  FFD9         	movff	SunPleaseFixTheDamnClock@phour,fsr2l
  1826  00029E  C02D  FFDA         	movff	SunPleaseFixTheDamnClock@phour+1,fsr2h
  1827  0002A2  06DE               	decf	postinc2,f,c
  1828  0002A4  0E00               	movlw	0
  1829  0002A6  5ADD               	subwfb	postdec2,f,c
  1830  0002A8  C02E  FFD9         	movff	SunPleaseFixTheDamnClock@pminute,fsr2l
  1831  0002AC  C02F  FFDA         	movff	SunPleaseFixTheDamnClock@pminute+1,fsr2h
  1832  0002B0  CFDE F031          	movff	postinc2,??_SunPleaseFixTheDamnClock
  1833  0002B4  CFDD F032          	movff	postdec2,??_SunPleaseFixTheDamnClock+1
  1834  0002B8  0E3C               	movlw	60
  1835  0002BA  2631               	addwf	??_SunPleaseFixTheDamnClock^0,f,c
  1836  0002BC  0E00               	movlw	0
  1837  0002BE  2232               	addwfc	(??_SunPleaseFixTheDamnClock+1)^0,f,c
  1838  0002C0  C02E  FFD9         	movff	SunPleaseFixTheDamnClock@pminute,fsr2l
  1839  0002C4  C02F  FFDA         	movff	SunPleaseFixTheDamnClock@pminute+1,fsr2h
  1840  0002C8  C031  FFDE         	movff	??_SunPleaseFixTheDamnClock,postinc2
  1841  0002CC  C032  FFDD         	movff	??_SunPleaseFixTheDamnClock+1,postdec2
  1842  0002D0                     l175:
  1843                           
  1844                           ;timers.c: 104:         if (*pdawnminute >= 60) {++*pdawnhour; *pdawnminute = *pdawnminu
      +                          te - 60;}
  1845  0002D0  C026  FFD9         	movff	SunPleaseFixTheDamnClock@pdawnminute,fsr2l
  1846  0002D4  C027  FFDA         	movff	SunPleaseFixTheDamnClock@pdawnminute+1,fsr2h
  1847  0002D8  0E01               	movlw	1
  1848  0002DA  BEDB               	btfsc	plusw2,7,c
  1849  0002DC  EF7A  F001         	goto	u1541
  1850  0002E0  0E01               	movlw	1
  1851  0002E2  50DB               	movf	plusw2,w,c
  1852  0002E4  E109               	bnz	u1540
  1853  0002E6  0E3C               	movlw	60
  1854  0002E8  5CDE               	subwf	postinc2,w,c
  1855  0002EA  A0D8               	btfss	status,0,c
  1856  0002EC  EF7A  F001         	goto	u1541
  1857  0002F0  EF7C  F001         	goto	u1540
  1858  0002F4                     u1541:
  1859  0002F4  EF9D  F001         	goto	l1587
  1860  0002F8                     u1540:
  1861  0002F8  C024  FFD9         	movff	SunPleaseFixTheDamnClock@pdawnhour,fsr2l
  1862  0002FC  C025  FFDA         	movff	SunPleaseFixTheDamnClock@pdawnhour+1,fsr2h
  1863  000300  2ADE               	incf	postinc2,f,c
  1864  000302  0E00               	movlw	0
  1865  000304  22DD               	addwfc	postdec2,f,c
  1866  000306  0EC4               	movlw	196
  1867  000308  6E31               	movwf	??_SunPleaseFixTheDamnClock^0,c
  1868  00030A  0EFF               	movlw	255
  1869  00030C  6E32               	movwf	(??_SunPleaseFixTheDamnClock+1)^0,c
  1870  00030E  C026  FFD9         	movff	SunPleaseFixTheDamnClock@pdawnminute,fsr2l
  1871  000312  C027  FFDA         	movff	SunPleaseFixTheDamnClock@pdawnminute+1,fsr2h
  1872  000316  CFDE F033          	movff	postinc2,??_SunPleaseFixTheDamnClock+2
  1873  00031A  CFDD F034          	movff	postdec2,??_SunPleaseFixTheDamnClock+3
  1874  00031E  5031               	movf	??_SunPleaseFixTheDamnClock^0,w,c
  1875  000320  2633               	addwf	(??_SunPleaseFixTheDamnClock+2)^0,f,c
  1876  000322  5032               	movf	(??_SunPleaseFixTheDamnClock+1)^0,w,c
  1877  000324  2234               	addwfc	(??_SunPleaseFixTheDamnClock+3)^0,f,c
  1878  000326  C026  FFD9         	movff	SunPleaseFixTheDamnClock@pdawnminute,fsr2l
  1879  00032A  C027  FFDA         	movff	SunPleaseFixTheDamnClock@pdawnminute+1,fsr2h
  1880  00032E  C033  FFDE         	movff	??_SunPleaseFixTheDamnClock+2,postinc2
  1881  000332  C034  FFDD         	movff	??_SunPleaseFixTheDamnClock+3,postdec2
  1882  000336  EFC4  F001         	goto	l177
  1883  00033A                     l1587:
  1884  00033A  C026  FFD9         	movff	SunPleaseFixTheDamnClock@pdawnminute,fsr2l
  1885  00033E  C027  FFDA         	movff	SunPleaseFixTheDamnClock@pdawnminute+1,fsr2h
  1886  000342  0E01               	movlw	1
  1887  000344  BEDB               	btfsc	plusw2,7,c
  1888  000346  EFA9  F001         	goto	u1550
  1889  00034A  EFA7  F001         	goto	u1551
  1890  00034E                     u1551:
  1891  00034E  EFC4  F001         	goto	l177
  1892  000352                     u1550:
  1893  000352  C024  FFD9         	movff	SunPleaseFixTheDamnClock@pdawnhour,fsr2l
  1894  000356  C025  FFDA         	movff	SunPleaseFixTheDamnClock@pdawnhour+1,fsr2h
  1895  00035A  06DE               	decf	postinc2,f,c
  1896  00035C  0E00               	movlw	0
  1897  00035E  5ADD               	subwfb	postdec2,f,c
  1898  000360  C026  FFD9         	movff	SunPleaseFixTheDamnClock@pdawnminute,fsr2l
  1899  000364  C027  FFDA         	movff	SunPleaseFixTheDamnClock@pdawnminute+1,fsr2h
  1900  000368  CFDE F031          	movff	postinc2,??_SunPleaseFixTheDamnClock
  1901  00036C  CFDD F032          	movff	postdec2,??_SunPleaseFixTheDamnClock+1
  1902  000370  0E3C               	movlw	60
  1903  000372  2631               	addwf	??_SunPleaseFixTheDamnClock^0,f,c
  1904  000374  0E00               	movlw	0
  1905  000376  2232               	addwfc	(??_SunPleaseFixTheDamnClock+1)^0,f,c
  1906  000378  C026  FFD9         	movff	SunPleaseFixTheDamnClock@pdawnminute,fsr2l
  1907  00037C  C027  FFDA         	movff	SunPleaseFixTheDamnClock@pdawnminute+1,fsr2h
  1908  000380  C031  FFDE         	movff	??_SunPleaseFixTheDamnClock,postinc2
  1909  000384  C032  FFDD         	movff	??_SunPleaseFixTheDamnClock+1,postdec2
  1910  000388                     l177:
  1911                           
  1912                           ;timers.c: 107:         if (*pduskminute >= 60) {++*pduskhour; *pduskminute = *pduskminu
      +                          te - 60;}
  1913  000388  C02A  FFD9         	movff	SunPleaseFixTheDamnClock@pduskminute,fsr2l
  1914  00038C  C02B  FFDA         	movff	SunPleaseFixTheDamnClock@pduskminute+1,fsr2h
  1915  000390  0E01               	movlw	1
  1916  000392  BEDB               	btfsc	plusw2,7,c
  1917  000394  EFD6  F001         	goto	u1561
  1918  000398  0E01               	movlw	1
  1919  00039A  50DB               	movf	plusw2,w,c
  1920  00039C  E109               	bnz	u1560
  1921  00039E  0E3C               	movlw	60
  1922  0003A0  5CDE               	subwf	postinc2,w,c
  1923  0003A2  A0D8               	btfss	status,0,c
  1924  0003A4  EFD6  F001         	goto	u1561
  1925  0003A8  EFD8  F001         	goto	u1560
  1926  0003AC                     u1561:
  1927  0003AC  EFF9  F001         	goto	l1593
  1928  0003B0                     u1560:
  1929  0003B0  C028  FFD9         	movff	SunPleaseFixTheDamnClock@pduskhour,fsr2l
  1930  0003B4  C029  FFDA         	movff	SunPleaseFixTheDamnClock@pduskhour+1,fsr2h
  1931  0003B8  2ADE               	incf	postinc2,f,c
  1932  0003BA  0E00               	movlw	0
  1933  0003BC  22DD               	addwfc	postdec2,f,c
  1934  0003BE  0EC4               	movlw	196
  1935  0003C0  6E31               	movwf	??_SunPleaseFixTheDamnClock^0,c
  1936  0003C2  0EFF               	movlw	255
  1937  0003C4  6E32               	movwf	(??_SunPleaseFixTheDamnClock+1)^0,c
  1938  0003C6  C02A  FFD9         	movff	SunPleaseFixTheDamnClock@pduskminute,fsr2l
  1939  0003CA  C02B  FFDA         	movff	SunPleaseFixTheDamnClock@pduskminute+1,fsr2h
  1940  0003CE  CFDE F033          	movff	postinc2,??_SunPleaseFixTheDamnClock+2
  1941  0003D2  CFDD F034          	movff	postdec2,??_SunPleaseFixTheDamnClock+3
  1942  0003D6  5031               	movf	??_SunPleaseFixTheDamnClock^0,w,c
  1943  0003D8  2633               	addwf	(??_SunPleaseFixTheDamnClock+2)^0,f,c
  1944  0003DA  5032               	movf	(??_SunPleaseFixTheDamnClock+1)^0,w,c
  1945  0003DC  2234               	addwfc	(??_SunPleaseFixTheDamnClock+3)^0,f,c
  1946  0003DE  C02A  FFD9         	movff	SunPleaseFixTheDamnClock@pduskminute,fsr2l
  1947  0003E2  C02B  FFDA         	movff	SunPleaseFixTheDamnClock@pduskminute+1,fsr2h
  1948  0003E6  C033  FFDE         	movff	??_SunPleaseFixTheDamnClock+2,postinc2
  1949  0003EA  C034  FFDD         	movff	??_SunPleaseFixTheDamnClock+3,postdec2
  1950  0003EE  EF20  F002         	goto	l1597
  1951  0003F2                     l1593:
  1952  0003F2  C02A  FFD9         	movff	SunPleaseFixTheDamnClock@pduskminute,fsr2l
  1953  0003F6  C02B  FFDA         	movff	SunPleaseFixTheDamnClock@pduskminute+1,fsr2h
  1954  0003FA  0E01               	movlw	1
  1955  0003FC  BEDB               	btfsc	plusw2,7,c
  1956  0003FE  EF05  F002         	goto	u1570
  1957  000402  EF03  F002         	goto	u1571
  1958  000406                     u1571:
  1959  000406  EF20  F002         	goto	l1597
  1960  00040A                     u1570:
  1961  00040A  C028  FFD9         	movff	SunPleaseFixTheDamnClock@pduskhour,fsr2l
  1962  00040E  C029  FFDA         	movff	SunPleaseFixTheDamnClock@pduskhour+1,fsr2h
  1963  000412  06DE               	decf	postinc2,f,c
  1964  000414  0E00               	movlw	0
  1965  000416  5ADD               	subwfb	postdec2,f,c
  1966  000418  C02A  FFD9         	movff	SunPleaseFixTheDamnClock@pduskminute,fsr2l
  1967  00041C  C02B  FFDA         	movff	SunPleaseFixTheDamnClock@pduskminute+1,fsr2h
  1968  000420  CFDE F031          	movff	postinc2,??_SunPleaseFixTheDamnClock
  1969  000424  CFDD F032          	movff	postdec2,??_SunPleaseFixTheDamnClock+1
  1970  000428  0E3C               	movlw	60
  1971  00042A  2631               	addwf	??_SunPleaseFixTheDamnClock^0,f,c
  1972  00042C  0E00               	movlw	0
  1973  00042E  2232               	addwfc	(??_SunPleaseFixTheDamnClock+1)^0,f,c
  1974  000430  C02A  FFD9         	movff	SunPleaseFixTheDamnClock@pduskminute,fsr2l
  1975  000434  C02B  FFDA         	movff	SunPleaseFixTheDamnClock@pduskminute+1,fsr2h
  1976  000438  C031  FFDE         	movff	??_SunPleaseFixTheDamnClock,postinc2
  1977  00043C  C032  FFDD         	movff	??_SunPleaseFixTheDamnClock+1,postdec2
  1978  000440                     l1597:
  1979                           
  1980                           ;timers.c: 110:         *phour = 12 + timedifference / 60;
  1981  000440  C039  F00A         	movff	SunPleaseFixTheDamnClock@timedifference,___awdiv@dividend
  1982  000444  C03A  F00B         	movff	SunPleaseFixTheDamnClock@timedifference+1,___awdiv@dividend+1
  1983  000448  0E00               	movlw	0
  1984  00044A  6E0D               	movwf	(___awdiv@divisor+1)^0,c
  1985  00044C  0E3C               	movlw	60
  1986  00044E  6E0C               	movwf	___awdiv@divisor^0,c
  1987  000450  EC02  F006         	call	___awdiv	;wreg free
  1988  000454  0E0C               	movlw	12
  1989  000456  260A               	addwf	?___awdiv^0,f,c
  1990  000458  0E00               	movlw	0
  1991  00045A  220B               	addwfc	(?___awdiv+1)^0,f,c
  1992  00045C  C02C  FFD9         	movff	SunPleaseFixTheDamnClock@phour,fsr2l
  1993  000460  C02D  FFDA         	movff	SunPleaseFixTheDamnClock@phour+1,fsr2h
  1994  000464  C00A  FFDE         	movff	?___awdiv,postinc2
  1995  000468  C00B  FFDD         	movff	?___awdiv+1,postdec2
  1996  00046C                     
  1997                           ;timers.c: 111:         *pdawnhour = *pdawnhour + timedifference / 60;
  1998  00046C  C024  FFD9         	movff	SunPleaseFixTheDamnClock@pdawnhour,fsr2l
  1999  000470  C025  FFDA         	movff	SunPleaseFixTheDamnClock@pdawnhour+1,fsr2h
  2000  000474  CFDE F031          	movff	postinc2,??_SunPleaseFixTheDamnClock
  2001  000478  CFDD F032          	movff	postdec2,??_SunPleaseFixTheDamnClock+1
  2002  00047C  C039  F00A         	movff	SunPleaseFixTheDamnClock@timedifference,___awdiv@dividend
  2003  000480  C03A  F00B         	movff	SunPleaseFixTheDamnClock@timedifference+1,___awdiv@dividend+1
  2004  000484  0E00               	movlw	0
  2005  000486  6E0D               	movwf	(___awdiv@divisor+1)^0,c
  2006  000488  0E3C               	movlw	60
  2007  00048A  6E0C               	movwf	___awdiv@divisor^0,c
  2008  00048C  EC02  F006         	call	___awdiv	;wreg free
  2009  000490  5031               	movf	??_SunPleaseFixTheDamnClock^0,w,c
  2010  000492  260A               	addwf	?___awdiv^0,f,c
  2011  000494  5032               	movf	(??_SunPleaseFixTheDamnClock+1)^0,w,c
  2012  000496  220B               	addwfc	(?___awdiv+1)^0,f,c
  2013  000498  C024  FFD9         	movff	SunPleaseFixTheDamnClock@pdawnhour,fsr2l
  2014  00049C  C025  FFDA         	movff	SunPleaseFixTheDamnClock@pdawnhour+1,fsr2h
  2015  0004A0  C00A  FFDE         	movff	?___awdiv,postinc2
  2016  0004A4  C00B  FFDD         	movff	?___awdiv+1,postdec2
  2017  0004A8                     
  2018                           ;timers.c: 112:         *pduskhour = *pduskhour + timedifference / 60;
  2019  0004A8  C028  FFD9         	movff	SunPleaseFixTheDamnClock@pduskhour,fsr2l
  2020  0004AC  C029  FFDA         	movff	SunPleaseFixTheDamnClock@pduskhour+1,fsr2h
  2021  0004B0  CFDE F031          	movff	postinc2,??_SunPleaseFixTheDamnClock
  2022  0004B4  CFDD F032          	movff	postdec2,??_SunPleaseFixTheDamnClock+1
  2023  0004B8  C039  F00A         	movff	SunPleaseFixTheDamnClock@timedifference,___awdiv@dividend
  2024  0004BC  C03A  F00B         	movff	SunPleaseFixTheDamnClock@timedifference+1,___awdiv@dividend+1
  2025  0004C0  0E00               	movlw	0
  2026  0004C2  6E0D               	movwf	(___awdiv@divisor+1)^0,c
  2027  0004C4  0E3C               	movlw	60
  2028  0004C6  6E0C               	movwf	___awdiv@divisor^0,c
  2029  0004C8  EC02  F006         	call	___awdiv	;wreg free
  2030  0004CC  5031               	movf	??_SunPleaseFixTheDamnClock^0,w,c
  2031  0004CE  260A               	addwf	?___awdiv^0,f,c
  2032  0004D0  5032               	movf	(??_SunPleaseFixTheDamnClock+1)^0,w,c
  2033  0004D2  220B               	addwfc	(?___awdiv+1)^0,f,c
  2034  0004D4  C028  FFD9         	movff	SunPleaseFixTheDamnClock@pduskhour,fsr2l
  2035  0004D8  C029  FFDA         	movff	SunPleaseFixTheDamnClock@pduskhour+1,fsr2h
  2036  0004DC  C00A  FFDE         	movff	?___awdiv,postinc2
  2037  0004E0  C00B  FFDD         	movff	?___awdiv+1,postdec2
  2038  0004E4                     l182:
  2039  0004E4  0012               	return		;funcret
  2040  0004E6                     __end_of_SunPleaseFixTheDamnClock:
  2041                           	callstack 0
  2042                           
  2043 ;; *************** function _TimeAvg *****************
  2044 ;; Defined at:
  2045 ;;		line 139 in file "timers.c"
  2046 ;; Parameters:    Size  Location     Type
  2047 ;;  hour1           2   17[COMRAM] int 
  2048 ;;  minute1         2   19[COMRAM] int 
  2049 ;;  hour2           2   21[COMRAM] int 
  2050 ;;  minute2         2   23[COMRAM] int 
  2051 ;;  pavghour        2   25[COMRAM] PTR int 
  2052 ;;		 -> SunPleaseFixTheDamnClock@avghour(2), 
  2053 ;;  pavgminute      2   27[COMRAM] PTR int 
  2054 ;;		 -> SunPleaseFixTheDamnClock@avgminute(2), 
  2055 ;; Auto vars:     Size  Location     Type
  2056 ;;  HalfTimeDiff    2   33[COMRAM] int 
  2057 ;; Return value:  Size  Location     Type
  2058 ;;                  1    wreg      void 
  2059 ;; Registers used:
  2060 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2061 ;; Tracked objects:
  2062 ;;		On entry : 0/0
  2063 ;;		On exit  : 0/0
  2064 ;;		Unchanged: 0/0
  2065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2066 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2067 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2068 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2069 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2070 ;;Total ram usage:       18 bytes
  2071 ;; Hardware stack levels used: 1
  2072 ;; Hardware stack levels required when called: 2
  2073 ;; This function calls:
  2074 ;;		_TimeDiff
  2075 ;;		___awdiv
  2076 ;;		___awmod
  2077 ;; This function is called by:
  2078 ;;		_SunPleaseFixTheDamnClock
  2079 ;; This function uses a non-reentrant model
  2080 ;;
  2081                           
  2082                           	psect	text7
  2083  000AB2                     __ptext7:
  2084                           	callstack 0
  2085  000AB2                     _TimeAvg:
  2086                           	callstack 27
  2087  000AB2                     
  2088                           ;timers.c: 139: void TimeAvg(int hour1, int minute1, int hour2, int minute2, int *pavgho
      +                          ur, int *pavgminute);timers.c: 140: {;timers.c: 141:     int HalfTimeDiff = TimeDiff(hou
      +                          r1, minute1, hour2, minute2) / 2;
  2089  000AB2  C018  F007         	movff	TimeAvg@minute2,TimeDiff@minute2
  2090  000AB6  C019  F008         	movff	TimeAvg@minute2+1,TimeDiff@minute2+1
  2091  000ABA  C016  F005         	movff	TimeAvg@hour2,TimeDiff@hour2
  2092  000ABE  C017  F006         	movff	TimeAvg@hour2+1,TimeDiff@hour2+1
  2093  000AC2  C014  F003         	movff	TimeAvg@minute1,TimeDiff@minute1
  2094  000AC6  C015  F004         	movff	TimeAvg@minute1+1,TimeDiff@minute1+1
  2095  000ACA  C012  F001         	movff	TimeAvg@hour1,TimeDiff@hour1
  2096  000ACE  C013  F002         	movff	TimeAvg@hour1+1,TimeDiff@hour1+1
  2097  000AD2  EC64  F006         	call	_TimeDiff	;wreg free
  2098  000AD6  C001  F00A         	movff	?_TimeDiff,___awdiv@dividend
  2099  000ADA  C002  F00B         	movff	?_TimeDiff+1,___awdiv@dividend+1
  2100  000ADE  0E00               	movlw	0
  2101  000AE0  6E0D               	movwf	(___awdiv@divisor+1)^0,c
  2102  000AE2  0E02               	movlw	2
  2103  000AE4  6E0C               	movwf	___awdiv@divisor^0,c
  2104  000AE6  EC02  F006         	call	___awdiv	;wreg free
  2105  000AEA  C00A  F022         	movff	?___awdiv,TimeAvg@HalfTimeDiff
  2106  000AEE  C00B  F023         	movff	?___awdiv+1,TimeAvg@HalfTimeDiff+1
  2107  000AF2                     
  2108                           ;timers.c: 143:     *pavghour = hour1 + HalfTimeDiff / 60;
  2109  000AF2  C022  F00A         	movff	TimeAvg@HalfTimeDiff,___awdiv@dividend
  2110  000AF6  C023  F00B         	movff	TimeAvg@HalfTimeDiff+1,___awdiv@dividend+1
  2111  000AFA  0E00               	movlw	0
  2112  000AFC  6E0D               	movwf	(___awdiv@divisor+1)^0,c
  2113  000AFE  0E3C               	movlw	60
  2114  000B00  6E0C               	movwf	___awdiv@divisor^0,c
  2115  000B02  EC02  F006         	call	___awdiv	;wreg free
  2116  000B06  5012               	movf	TimeAvg@hour1^0,w,c
  2117  000B08  260A               	addwf	?___awdiv^0,f,c
  2118  000B0A  5013               	movf	(TimeAvg@hour1+1)^0,w,c
  2119  000B0C  220B               	addwfc	(?___awdiv+1)^0,f,c
  2120  000B0E  C01A  FFD9         	movff	TimeAvg@pavghour,fsr2l
  2121  000B12  C01B  FFDA         	movff	TimeAvg@pavghour+1,fsr2h
  2122  000B16  C00A  FFDE         	movff	?___awdiv,postinc2
  2123  000B1A  C00B  FFDD         	movff	?___awdiv+1,postdec2
  2124  000B1E                     
  2125                           ;timers.c: 144:     *pavgminute = minute1 + HalfTimeDiff % 60;
  2126  000B1E  C022  F001         	movff	TimeAvg@HalfTimeDiff,___awmod@dividend
  2127  000B22  C023  F002         	movff	TimeAvg@HalfTimeDiff+1,___awmod@dividend+1
  2128  000B26  0E00               	movlw	0
  2129  000B28  6E04               	movwf	(___awmod@divisor+1)^0,c
  2130  000B2A  0E3C               	movlw	60
  2131  000B2C  6E03               	movwf	___awmod@divisor^0,c
  2132  000B2E  ECBF  F006         	call	___awmod	;wreg free
  2133  000B32  5014               	movf	TimeAvg@minute1^0,w,c
  2134  000B34  2601               	addwf	?___awmod^0,f,c
  2135  000B36  5015               	movf	(TimeAvg@minute1+1)^0,w,c
  2136  000B38  2202               	addwfc	(?___awmod+1)^0,f,c
  2137  000B3A  C01C  FFD9         	movff	TimeAvg@pavgminute,fsr2l
  2138  000B3E  C01D  FFDA         	movff	TimeAvg@pavgminute+1,fsr2h
  2139  000B42  C001  FFDE         	movff	?___awmod,postinc2
  2140  000B46  C002  FFDD         	movff	?___awmod+1,postdec2
  2141  000B4A                     
  2142                           ;timers.c: 146:     if (*pavgminute >= 60) {++*pavghour; *pavgminute = *pavgminute - 60;
      +                          }
  2143  000B4A  C01C  FFD9         	movff	TimeAvg@pavgminute,fsr2l
  2144  000B4E  C01D  FFDA         	movff	TimeAvg@pavgminute+1,fsr2h
  2145  000B52  0E01               	movlw	1
  2146  000B54  BEDB               	btfsc	plusw2,7,c
  2147  000B56  EFB7  F005         	goto	u1051
  2148  000B5A  0E01               	movlw	1
  2149  000B5C  50DB               	movf	plusw2,w,c
  2150  000B5E  E109               	bnz	u1050
  2151  000B60  0E3C               	movlw	60
  2152  000B62  5CDE               	subwf	postinc2,w,c
  2153  000B64  A0D8               	btfss	status,0,c
  2154  000B66  EFB7  F005         	goto	u1051
  2155  000B6A  EFB9  F005         	goto	u1050
  2156  000B6E                     u1051:
  2157  000B6E  EFDA  F005         	goto	l1425
  2158  000B72                     u1050:
  2159  000B72  C01A  FFD9         	movff	TimeAvg@pavghour,fsr2l
  2160  000B76  C01B  FFDA         	movff	TimeAvg@pavghour+1,fsr2h
  2161  000B7A  2ADE               	incf	postinc2,f,c
  2162  000B7C  0E00               	movlw	0
  2163  000B7E  22DD               	addwfc	postdec2,f,c
  2164  000B80  0EC4               	movlw	196
  2165  000B82  6E1E               	movwf	??_TimeAvg^0,c
  2166  000B84  0EFF               	movlw	255
  2167  000B86  6E1F               	movwf	(??_TimeAvg+1)^0,c
  2168  000B88  C01C  FFD9         	movff	TimeAvg@pavgminute,fsr2l
  2169  000B8C  C01D  FFDA         	movff	TimeAvg@pavgminute+1,fsr2h
  2170  000B90  CFDE F020          	movff	postinc2,??_TimeAvg+2
  2171  000B94  CFDD F021          	movff	postdec2,??_TimeAvg+3
  2172  000B98  501E               	movf	??_TimeAvg^0,w,c
  2173  000B9A  2620               	addwf	(??_TimeAvg+2)^0,f,c
  2174  000B9C  501F               	movf	(??_TimeAvg+1)^0,w,c
  2175  000B9E  2221               	addwfc	(??_TimeAvg+3)^0,f,c
  2176  000BA0  C01C  FFD9         	movff	TimeAvg@pavgminute,fsr2l
  2177  000BA4  C01D  FFDA         	movff	TimeAvg@pavgminute+1,fsr2h
  2178  000BA8  C020  FFDE         	movff	??_TimeAvg+2,postinc2
  2179  000BAC  C021  FFDD         	movff	??_TimeAvg+3,postdec2
  2180  000BB0  EF01  F006         	goto	l200
  2181  000BB4                     l1425:
  2182  000BB4  C01C  FFD9         	movff	TimeAvg@pavgminute,fsr2l
  2183  000BB8  C01D  FFDA         	movff	TimeAvg@pavgminute+1,fsr2h
  2184  000BBC  0E01               	movlw	1
  2185  000BBE  BEDB               	btfsc	plusw2,7,c
  2186  000BC0  EFE6  F005         	goto	u1060
  2187  000BC4  EFE4  F005         	goto	u1061
  2188  000BC8                     u1061:
  2189  000BC8  EF01  F006         	goto	l200
  2190  000BCC                     u1060:
  2191  000BCC  C01A  FFD9         	movff	TimeAvg@pavghour,fsr2l
  2192  000BD0  C01B  FFDA         	movff	TimeAvg@pavghour+1,fsr2h
  2193  000BD4  06DE               	decf	postinc2,f,c
  2194  000BD6  0E00               	movlw	0
  2195  000BD8  5ADD               	subwfb	postdec2,f,c
  2196  000BDA  C01C  FFD9         	movff	TimeAvg@pavgminute,fsr2l
  2197  000BDE  C01D  FFDA         	movff	TimeAvg@pavgminute+1,fsr2h
  2198  000BE2  CFDE F01E          	movff	postinc2,??_TimeAvg
  2199  000BE6  CFDD F01F          	movff	postdec2,??_TimeAvg+1
  2200  000BEA  0E3C               	movlw	60
  2201  000BEC  261E               	addwf	??_TimeAvg^0,f,c
  2202  000BEE  0E00               	movlw	0
  2203  000BF0  221F               	addwfc	(??_TimeAvg+1)^0,f,c
  2204  000BF2  C01C  FFD9         	movff	TimeAvg@pavgminute,fsr2l
  2205  000BF6  C01D  FFDA         	movff	TimeAvg@pavgminute+1,fsr2h
  2206  000BFA  C01E  FFDE         	movff	??_TimeAvg,postinc2
  2207  000BFE  C01F  FFDD         	movff	??_TimeAvg+1,postdec2
  2208  000C02                     l200:
  2209  000C02  0012               	return		;funcret
  2210  000C04                     __end_of_TimeAvg:
  2211                           	callstack 0
  2212                           
  2213 ;; *************** function ___awmod *****************
  2214 ;; Defined at:
  2215 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\awmod.c"
  2216 ;; Parameters:    Size  Location     Type
  2217 ;;  dividend        2    0[COMRAM] int 
  2218 ;;  divisor         2    2[COMRAM] int 
  2219 ;; Auto vars:     Size  Location     Type
  2220 ;;  sign            1    5[COMRAM] unsigned char 
  2221 ;;  counter         1    4[COMRAM] unsigned char 
  2222 ;; Return value:  Size  Location     Type
  2223 ;;                  2    0[COMRAM] int 
  2224 ;; Registers used:
  2225 ;;		wreg, status,2, status,0
  2226 ;; Tracked objects:
  2227 ;;		On entry : 0/0
  2228 ;;		On exit  : 0/0
  2229 ;;		Unchanged: 0/0
  2230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2231 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2232 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2233 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2234 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2235 ;;Total ram usage:        6 bytes
  2236 ;; Hardware stack levels used: 1
  2237 ;; Hardware stack levels required when called: 1
  2238 ;; This function calls:
  2239 ;;		Nothing
  2240 ;; This function is called by:
  2241 ;;		_SunPleaseFixTheDamnClock
  2242 ;;		_TimeAvg
  2243 ;; This function uses a non-reentrant model
  2244 ;;
  2245                           
  2246                           	psect	text8
  2247  000D7E                     __ptext8:
  2248                           	callstack 0
  2249  000D7E                     ___awmod:
  2250                           	callstack 28
  2251  000D7E  0E00               	movlw	0
  2252  000D80  6E06               	movwf	___awmod@sign^0,c
  2253  000D82  BE02               	btfsc	(___awmod@dividend+1)^0,7,c
  2254  000D84  EFC8  F006         	goto	u930
  2255  000D88  EFC6  F006         	goto	u931
  2256  000D8C                     u931:
  2257  000D8C  EFCE  F006         	goto	l1357
  2258  000D90                     u930:
  2259  000D90  6C01               	negf	___awmod@dividend^0,c
  2260  000D92  1E02               	comf	(___awmod@dividend+1)^0,f,c
  2261  000D94  B0D8               	btfsc	status,0,c
  2262  000D96  2A02               	incf	(___awmod@dividend+1)^0,f,c
  2263  000D98  0E01               	movlw	1
  2264  000D9A  6E06               	movwf	___awmod@sign^0,c
  2265  000D9C                     l1357:
  2266  000D9C  BE04               	btfsc	(___awmod@divisor+1)^0,7,c
  2267  000D9E  EFD5  F006         	goto	u940
  2268  000DA2  EFD3  F006         	goto	u941
  2269  000DA6                     u941:
  2270  000DA6  EFD9  F006         	goto	l1361
  2271  000DAA                     u940:
  2272  000DAA  6C03               	negf	___awmod@divisor^0,c
  2273  000DAC  1E04               	comf	(___awmod@divisor+1)^0,f,c
  2274  000DAE  B0D8               	btfsc	status,0,c
  2275  000DB0  2A04               	incf	(___awmod@divisor+1)^0,f,c
  2276  000DB2                     l1361:
  2277  000DB2  5003               	movf	___awmod@divisor^0,w,c
  2278  000DB4  1004               	iorwf	(___awmod@divisor+1)^0,w,c
  2279  000DB6  B4D8               	btfsc	status,2,c
  2280  000DB8  EFE0  F006         	goto	u951
  2281  000DBC  EFE2  F006         	goto	u950
  2282  000DC0                     u951:
  2283  000DC0  EF06  F007         	goto	l1377
  2284  000DC4                     u950:
  2285  000DC4  0E01               	movlw	1
  2286  000DC6  6E05               	movwf	___awmod@counter^0,c
  2287  000DC8  EFEA  F006         	goto	l1367
  2288  000DCC                     l1365:
  2289  000DCC  90D8               	bcf	status,0,c
  2290  000DCE  3603               	rlcf	___awmod@divisor^0,f,c
  2291  000DD0  3604               	rlcf	(___awmod@divisor+1)^0,f,c
  2292  000DD2  2A05               	incf	___awmod@counter^0,f,c
  2293  000DD4                     l1367:
  2294  000DD4  AE04               	btfss	(___awmod@divisor+1)^0,7,c
  2295  000DD6  EFEF  F006         	goto	u961
  2296  000DDA  EFF1  F006         	goto	u960
  2297  000DDE                     u961:
  2298  000DDE  EFE6  F006         	goto	l1365
  2299  000DE2                     u960:
  2300  000DE2                     l1369:
  2301  000DE2  5003               	movf	___awmod@divisor^0,w,c
  2302  000DE4  5C01               	subwf	___awmod@dividend^0,w,c
  2303  000DE6  5004               	movf	(___awmod@divisor+1)^0,w,c
  2304  000DE8  5802               	subwfb	(___awmod@dividend+1)^0,w,c
  2305  000DEA  A0D8               	btfss	status,0,c
  2306  000DEC  EFFA  F006         	goto	u971
  2307  000DF0  EFFC  F006         	goto	u970
  2308  000DF4                     u971:
  2309  000DF4  EF00  F007         	goto	l1373
  2310  000DF8                     u970:
  2311  000DF8  5003               	movf	___awmod@divisor^0,w,c
  2312  000DFA  5E01               	subwf	___awmod@dividend^0,f,c
  2313  000DFC  5004               	movf	(___awmod@divisor+1)^0,w,c
  2314  000DFE  5A02               	subwfb	(___awmod@dividend+1)^0,f,c
  2315  000E00                     l1373:
  2316  000E00  90D8               	bcf	status,0,c
  2317  000E02  3204               	rrcf	(___awmod@divisor+1)^0,f,c
  2318  000E04  3203               	rrcf	___awmod@divisor^0,f,c
  2319  000E06  2E05               	decfsz	___awmod@counter^0,f,c
  2320  000E08  EFF1  F006         	goto	l1369
  2321  000E0C                     l1377:
  2322  000E0C  5006               	movf	___awmod@sign^0,w,c
  2323  000E0E  B4D8               	btfsc	status,2,c
  2324  000E10  EF0C  F007         	goto	u981
  2325  000E14  EF0E  F007         	goto	u980
  2326  000E18                     u981:
  2327  000E18  EF12  F007         	goto	l1381
  2328  000E1C                     u980:
  2329  000E1C  6C01               	negf	___awmod@dividend^0,c
  2330  000E1E  1E02               	comf	(___awmod@dividend+1)^0,f,c
  2331  000E20  B0D8               	btfsc	status,0,c
  2332  000E22  2A02               	incf	(___awmod@dividend+1)^0,f,c
  2333  000E24                     l1381:
  2334  000E24  C001  F001         	movff	___awmod@dividend,?___awmod
  2335  000E28  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  2336  000E2C  0012               	return		;funcret
  2337  000E2E                     __end_of___awmod:
  2338                           	callstack 0
  2339                           
  2340 ;; *************** function ___awdiv *****************
  2341 ;; Defined at:
  2342 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\awdiv.c"
  2343 ;; Parameters:    Size  Location     Type
  2344 ;;  dividend        2    9[COMRAM] int 
  2345 ;;  divisor         2   11[COMRAM] int 
  2346 ;; Auto vars:     Size  Location     Type
  2347 ;;  quotient        2   15[COMRAM] int 
  2348 ;;  sign            1   14[COMRAM] unsigned char 
  2349 ;;  counter         1   13[COMRAM] unsigned char 
  2350 ;; Return value:  Size  Location     Type
  2351 ;;                  2    9[COMRAM] int 
  2352 ;; Registers used:
  2353 ;;		wreg, status,2, status,0
  2354 ;; Tracked objects:
  2355 ;;		On entry : 0/0
  2356 ;;		On exit  : 0/0
  2357 ;;		Unchanged: 0/0
  2358 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2359 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2360 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2361 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2362 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2363 ;;Total ram usage:        8 bytes
  2364 ;; Hardware stack levels used: 1
  2365 ;; Hardware stack levels required when called: 1
  2366 ;; This function calls:
  2367 ;;		Nothing
  2368 ;; This function is called by:
  2369 ;;		_SunPleaseFixTheDamnClock
  2370 ;;		_TimeAvg
  2371 ;; This function uses a non-reentrant model
  2372 ;;
  2373                           
  2374                           	psect	text9
  2375  000C04                     __ptext9:
  2376                           	callstack 0
  2377  000C04                     ___awdiv:
  2378                           	callstack 28
  2379  000C04  0E00               	movlw	0
  2380  000C06  6E0F               	movwf	___awdiv@sign^0,c
  2381  000C08  BE0D               	btfsc	(___awdiv@divisor+1)^0,7,c
  2382  000C0A  EF0B  F006         	goto	u870
  2383  000C0E  EF09  F006         	goto	u871
  2384  000C12                     u871:
  2385  000C12  EF11  F006         	goto	l1313
  2386  000C16                     u870:
  2387  000C16  6C0C               	negf	___awdiv@divisor^0,c
  2388  000C18  1E0D               	comf	(___awdiv@divisor+1)^0,f,c
  2389  000C1A  B0D8               	btfsc	status,0,c
  2390  000C1C  2A0D               	incf	(___awdiv@divisor+1)^0,f,c
  2391  000C1E  0E01               	movlw	1
  2392  000C20  6E0F               	movwf	___awdiv@sign^0,c
  2393  000C22                     l1313:
  2394  000C22  BE0B               	btfsc	(___awdiv@dividend+1)^0,7,c
  2395  000C24  EF18  F006         	goto	u880
  2396  000C28  EF16  F006         	goto	u881
  2397  000C2C                     u881:
  2398  000C2C  EF1E  F006         	goto	l1319
  2399  000C30                     u880:
  2400  000C30  6C0A               	negf	___awdiv@dividend^0,c
  2401  000C32  1E0B               	comf	(___awdiv@dividend+1)^0,f,c
  2402  000C34  B0D8               	btfsc	status,0,c
  2403  000C36  2A0B               	incf	(___awdiv@dividend+1)^0,f,c
  2404  000C38  0E01               	movlw	1
  2405  000C3A  1A0F               	xorwf	___awdiv@sign^0,f,c
  2406  000C3C                     l1319:
  2407  000C3C  0E00               	movlw	0
  2408  000C3E  6E11               	movwf	(___awdiv@quotient+1)^0,c
  2409  000C40  0E00               	movlw	0
  2410  000C42  6E10               	movwf	___awdiv@quotient^0,c
  2411  000C44  500C               	movf	___awdiv@divisor^0,w,c
  2412  000C46  100D               	iorwf	(___awdiv@divisor+1)^0,w,c
  2413  000C48  B4D8               	btfsc	status,2,c
  2414  000C4A  EF29  F006         	goto	u891
  2415  000C4E  EF2B  F006         	goto	u890
  2416  000C52                     u891:
  2417  000C52  EF53  F006         	goto	l1341
  2418  000C56                     u890:
  2419  000C56  0E01               	movlw	1
  2420  000C58  6E0E               	movwf	___awdiv@counter^0,c
  2421  000C5A  EF33  F006         	goto	l1327
  2422  000C5E                     l1325:
  2423  000C5E  90D8               	bcf	status,0,c
  2424  000C60  360C               	rlcf	___awdiv@divisor^0,f,c
  2425  000C62  360D               	rlcf	(___awdiv@divisor+1)^0,f,c
  2426  000C64  2A0E               	incf	___awdiv@counter^0,f,c
  2427  000C66                     l1327:
  2428  000C66  AE0D               	btfss	(___awdiv@divisor+1)^0,7,c
  2429  000C68  EF38  F006         	goto	u901
  2430  000C6C  EF3A  F006         	goto	u900
  2431  000C70                     u901:
  2432  000C70  EF2F  F006         	goto	l1325
  2433  000C74                     u900:
  2434  000C74                     l1329:
  2435  000C74  90D8               	bcf	status,0,c
  2436  000C76  3610               	rlcf	___awdiv@quotient^0,f,c
  2437  000C78  3611               	rlcf	(___awdiv@quotient+1)^0,f,c
  2438  000C7A  500C               	movf	___awdiv@divisor^0,w,c
  2439  000C7C  5C0A               	subwf	___awdiv@dividend^0,w,c
  2440  000C7E  500D               	movf	(___awdiv@divisor+1)^0,w,c
  2441  000C80  580B               	subwfb	(___awdiv@dividend+1)^0,w,c
  2442  000C82  A0D8               	btfss	status,0,c
  2443  000C84  EF46  F006         	goto	u911
  2444  000C88  EF48  F006         	goto	u910
  2445  000C8C                     u911:
  2446  000C8C  EF4D  F006         	goto	l1337
  2447  000C90                     u910:
  2448  000C90  500C               	movf	___awdiv@divisor^0,w,c
  2449  000C92  5E0A               	subwf	___awdiv@dividend^0,f,c
  2450  000C94  500D               	movf	(___awdiv@divisor+1)^0,w,c
  2451  000C96  5A0B               	subwfb	(___awdiv@dividend+1)^0,f,c
  2452  000C98  8010               	bsf	___awdiv@quotient^0,0,c
  2453  000C9A                     l1337:
  2454  000C9A  90D8               	bcf	status,0,c
  2455  000C9C  320D               	rrcf	(___awdiv@divisor+1)^0,f,c
  2456  000C9E  320C               	rrcf	___awdiv@divisor^0,f,c
  2457  000CA0  2E0E               	decfsz	___awdiv@counter^0,f,c
  2458  000CA2  EF3A  F006         	goto	l1329
  2459  000CA6                     l1341:
  2460  000CA6  500F               	movf	___awdiv@sign^0,w,c
  2461  000CA8  B4D8               	btfsc	status,2,c
  2462  000CAA  EF59  F006         	goto	u921
  2463  000CAE  EF5B  F006         	goto	u920
  2464  000CB2                     u921:
  2465  000CB2  EF5F  F006         	goto	l1345
  2466  000CB6                     u920:
  2467  000CB6  6C10               	negf	___awdiv@quotient^0,c
  2468  000CB8  1E11               	comf	(___awdiv@quotient+1)^0,f,c
  2469  000CBA  B0D8               	btfsc	status,0,c
  2470  000CBC  2A11               	incf	(___awdiv@quotient+1)^0,f,c
  2471  000CBE                     l1345:
  2472  000CBE  C010  F00A         	movff	___awdiv@quotient,?___awdiv
  2473  000CC2  C011  F00B         	movff	___awdiv@quotient+1,?___awdiv+1
  2474  000CC6  0012               	return		;funcret
  2475  000CC8                     __end_of___awdiv:
  2476                           	callstack 0
  2477                           
  2478 ;; *************** function _TimeDiff *****************
  2479 ;; Defined at:
  2480 ;;		line 119 in file "timers.c"
  2481 ;; Parameters:    Size  Location     Type
  2482 ;;  hour1           2    0[COMRAM] int 
  2483 ;;  minute1         2    2[COMRAM] int 
  2484 ;;  hour2           2    4[COMRAM] int 
  2485 ;;  minute2         2    6[COMRAM] int 
  2486 ;; Auto vars:     Size  Location     Type
  2487 ;;		None
  2488 ;; Return value:  Size  Location     Type
  2489 ;;                  2    0[COMRAM] int 
  2490 ;; Registers used:
  2491 ;;		wreg, status,2, status,0
  2492 ;; Tracked objects:
  2493 ;;		On entry : 0/0
  2494 ;;		On exit  : 0/0
  2495 ;;		Unchanged: 0/0
  2496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2497 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2498 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2499 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2500 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2501 ;;Total ram usage:        9 bytes
  2502 ;; Hardware stack levels used: 1
  2503 ;; Hardware stack levels required when called: 1
  2504 ;; This function calls:
  2505 ;;		Nothing
  2506 ;; This function is called by:
  2507 ;;		_SunPleaseFixTheDamnClock
  2508 ;;		_TimeAvg
  2509 ;; This function uses a non-reentrant model
  2510 ;;
  2511                           
  2512                           	psect	text10
  2513  000CC8                     __ptext10:
  2514                           	callstack 0
  2515  000CC8                     _TimeDiff:
  2516                           	callstack 28
  2517  000CC8                     
  2518                           ;timers.c: 119: int TimeDiff(int hour1, int minute1, int hour2, int minute2);timers.c: 1
      +                          20: {;timers.c: 121:     if (hour2 > hour1) {
  2519  000CC8  5005               	movf	TimeDiff@hour2^0,w,c
  2520  000CCA  5C01               	subwf	TimeDiff@hour1^0,w,c
  2521  000CCC  5002               	movf	(TimeDiff@hour1+1)^0,w,c
  2522  000CCE  0A80               	xorlw	128
  2523  000CD0  6E09               	movwf	??_TimeDiff^0,c
  2524  000CD2  5006               	movf	(TimeDiff@hour2+1)^0,w,c
  2525  000CD4  0A80               	xorlw	128
  2526  000CD6  5809               	subwfb	??_TimeDiff^0,w,c
  2527  000CD8  B0D8               	btfsc	status,0,c
  2528  000CDA  EF71  F006         	goto	u831
  2529  000CDE  EF73  F006         	goto	u830
  2530  000CE2                     u831:
  2531  000CE2  EF8F  F006         	goto	l1291
  2532  000CE6                     u830:
  2533  000CE6  EF7E  F006         	goto	l1289
  2534  000CEA                     l1285:
  2535                           
  2536                           ;timers.c: 123:             --hour2;
  2537  000CEA  0605               	decf	TimeDiff@hour2^0,f,c
  2538  000CEC  A0D8               	btfss	status,0,c
  2539  000CEE  0606               	decf	(TimeDiff@hour2+1)^0,f,c
  2540  000CF0                     
  2541                           ;timers.c: 124:             minute2 = minute2 + 60;
  2542  000CF0  0E3C               	movlw	60
  2543  000CF2  2407               	addwf	TimeDiff@minute2^0,w,c
  2544  000CF4  6E07               	movwf	TimeDiff@minute2^0,c
  2545  000CF6  0E00               	movlw	0
  2546  000CF8  2008               	addwfc	(TimeDiff@minute2+1)^0,w,c
  2547  000CFA  6E08               	movwf	(TimeDiff@minute2+1)^0,c
  2548  000CFC                     l1289:
  2549                           
  2550                           ;timers.c: 122:         while (hour2 > hour1) {
  2551  000CFC  5005               	movf	TimeDiff@hour2^0,w,c
  2552  000CFE  5C01               	subwf	TimeDiff@hour1^0,w,c
  2553  000D00  5002               	movf	(TimeDiff@hour1+1)^0,w,c
  2554  000D02  0A80               	xorlw	128
  2555  000D04  6E09               	movwf	??_TimeDiff^0,c
  2556  000D06  5006               	movf	(TimeDiff@hour2+1)^0,w,c
  2557  000D08  0A80               	xorlw	128
  2558  000D0A  5809               	subwfb	??_TimeDiff^0,w,c
  2559  000D0C  A0D8               	btfss	status,0,c
  2560  000D0E  EF8B  F006         	goto	u841
  2561  000D12  EF8D  F006         	goto	u840
  2562  000D16                     u841:
  2563  000D16  EF75  F006         	goto	l1285
  2564  000D1A                     u840:
  2565  000D1A  EFB8  F006         	goto	l1301
  2566  000D1E                     l1291:
  2567  000D1E  5001               	movf	TimeDiff@hour1^0,w,c
  2568  000D20  5C05               	subwf	TimeDiff@hour2^0,w,c
  2569  000D22  5006               	movf	(TimeDiff@hour2+1)^0,w,c
  2570  000D24  0A80               	xorlw	128
  2571  000D26  6E09               	movwf	??_TimeDiff^0,c
  2572  000D28  5002               	movf	(TimeDiff@hour1+1)^0,w,c
  2573  000D2A  0A80               	xorlw	128
  2574  000D2C  5809               	subwfb	??_TimeDiff^0,w,c
  2575  000D2E  B0D8               	btfsc	status,0,c
  2576  000D30  EF9C  F006         	goto	u851
  2577  000D34  EF9E  F006         	goto	u850
  2578  000D38                     u851:
  2579  000D38  EFB8  F006         	goto	l1301
  2580  000D3C                     u850:
  2581  000D3C  EFA9  F006         	goto	l1299
  2582  000D40                     l1295:
  2583                           
  2584                           ;timers.c: 129:             --hour1;
  2585  000D40  0601               	decf	TimeDiff@hour1^0,f,c
  2586  000D42  A0D8               	btfss	status,0,c
  2587  000D44  0602               	decf	(TimeDiff@hour1+1)^0,f,c
  2588  000D46                     
  2589                           ;timers.c: 130:             minute1 = minute1 + 60;
  2590  000D46  0E3C               	movlw	60
  2591  000D48  2403               	addwf	TimeDiff@minute1^0,w,c
  2592  000D4A  6E03               	movwf	TimeDiff@minute1^0,c
  2593  000D4C  0E00               	movlw	0
  2594  000D4E  2004               	addwfc	(TimeDiff@minute1+1)^0,w,c
  2595  000D50  6E04               	movwf	(TimeDiff@minute1+1)^0,c
  2596  000D52                     l1299:
  2597                           
  2598                           ;timers.c: 128:         while (hour1 > hour2) {
  2599  000D52  5001               	movf	TimeDiff@hour1^0,w,c
  2600  000D54  5C05               	subwf	TimeDiff@hour2^0,w,c
  2601  000D56  5006               	movf	(TimeDiff@hour2+1)^0,w,c
  2602  000D58  0A80               	xorlw	128
  2603  000D5A  6E09               	movwf	??_TimeDiff^0,c
  2604  000D5C  5002               	movf	(TimeDiff@hour1+1)^0,w,c
  2605  000D5E  0A80               	xorlw	128
  2606  000D60  5809               	subwfb	??_TimeDiff^0,w,c
  2607  000D62  A0D8               	btfss	status,0,c
  2608  000D64  EFB6  F006         	goto	u861
  2609  000D68  EFB8  F006         	goto	u860
  2610  000D6C                     u861:
  2611  000D6C  EFA0  F006         	goto	l1295
  2612  000D70                     u860:
  2613  000D70                     l1301:
  2614                           
  2615                           ;timers.c: 133:     return minute2 - minute1;
  2616  000D70  5003               	movf	TimeDiff@minute1^0,w,c
  2617  000D72  5C07               	subwf	TimeDiff@minute2^0,w,c
  2618  000D74  6E01               	movwf	?_TimeDiff^0,c
  2619  000D76  5004               	movf	(TimeDiff@minute1+1)^0,w,c
  2620  000D78  5808               	subwfb	(TimeDiff@minute2+1)^0,w,c
  2621  000D7A  6E02               	movwf	(?_TimeDiff+1)^0,c
  2622  000D7C  0012               	return		;funcret
  2623  000D7E                     __end_of_TimeDiff:
  2624                           	callstack 0
  2625                           
  2626 ;; *************** function _SmallHours *****************
  2627 ;; Defined at:
  2628 ;;		line 42 in file "lights.c"
  2629 ;; Parameters:    Size  Location     Type
  2630 ;;  hour            2    0[COMRAM] int 
  2631 ;;  minute          2    2[COMRAM] int 
  2632 ;; Auto vars:     Size  Location     Type
  2633 ;;		None
  2634 ;; Return value:  Size  Location     Type
  2635 ;;                  1    wreg      void 
  2636 ;; Registers used:
  2637 ;;		wreg, status,2, status,0
  2638 ;; Tracked objects:
  2639 ;;		On entry : 0/0
  2640 ;;		On exit  : 0/0
  2641 ;;		Unchanged: 0/0
  2642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2643 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2644 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2645 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2646 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2647 ;;Total ram usage:        4 bytes
  2648 ;; Hardware stack levels used: 1
  2649 ;; Hardware stack levels required when called: 1
  2650 ;; This function calls:
  2651 ;;		Nothing
  2652 ;; This function is called by:
  2653 ;;		_main
  2654 ;; This function uses a non-reentrant model
  2655 ;;
  2656                           
  2657                           	psect	text11
  2658  000FAA                     __ptext11:
  2659                           	callstack 0
  2660  000FAA                     _SmallHours:
  2661                           	callstack 29
  2662  000FAA                     
  2663                           ;lights.c: 42: void SmallHours(int hour, int minute);lights.c: 43: {;lights.c: 44:     i
      +                          f (hour >= 1 && hour < 5) {
  2664  000FAA  BE02               	btfsc	(SmallHours@hour+1)^0,7,c
  2665  000FAC  EFE0  F007         	goto	u1441
  2666  000FB0  5002               	movf	(SmallHours@hour+1)^0,w,c
  2667  000FB2  E108               	bnz	u1440
  2668  000FB4  0401               	decf	SmallHours@hour^0,w,c
  2669  000FB6  A0D8               	btfss	status,0,c
  2670  000FB8  EFE0  F007         	goto	u1441
  2671  000FBC  EFE2  F007         	goto	u1440
  2672  000FC0                     u1441:
  2673  000FC0  EFF3  F007         	goto	l1551
  2674  000FC4                     u1440:
  2675  000FC4  BE02               	btfsc	(SmallHours@hour+1)^0,7,c
  2676  000FC6  EFF0  F007         	goto	u1450
  2677  000FCA  5002               	movf	(SmallHours@hour+1)^0,w,c
  2678  000FCC  E107               	bnz	u1451
  2679  000FCE  0E05               	movlw	5
  2680  000FD0  5C01               	subwf	SmallHours@hour^0,w,c
  2681  000FD2  B0D8               	btfsc	status,0,c
  2682  000FD4  EFEE  F007         	goto	u1451
  2683  000FD8  EFF0  F007         	goto	u1450
  2684  000FDC                     u1451:
  2685  000FDC  EFF3  F007         	goto	l1551
  2686  000FE0                     u1450:
  2687  000FE0                     
  2688                           ;lights.c: 45:         CM1CON0bits.EN = 0;
  2689  000FE0  010E               	movlb	14	; () banked
  2690  000FE2  9FD0               	bcf	208,7,b	;volatile
  2691                           
  2692                           ;lights.c: 46:         LATHbits.LATH3 = 0;
  2693  000FE4  9680               	bcf	128,3,c	;volatile
  2694  000FE6                     l1551:
  2695                           
  2696                           ;lights.c: 49:     if (hour == 5 && minute == 0) {CM1CON0bits.EN = 1;}
  2697  000FE6  0E05               	movlw	5
  2698  000FE8  1801               	xorwf	SmallHours@hour^0,w,c
  2699  000FEA  1002               	iorwf	(SmallHours@hour+1)^0,w,c
  2700  000FEC  A4D8               	btfss	status,2,c
  2701  000FEE  EFFB  F007         	goto	u1461
  2702  000FF2  EFFD  F007         	goto	u1460
  2703  000FF6                     u1461:
  2704  000FF6  EF08  F008         	goto	l126
  2705  000FFA                     u1460:
  2706  000FFA  5003               	movf	SmallHours@minute^0,w,c
  2707  000FFC  1004               	iorwf	(SmallHours@minute+1)^0,w,c
  2708  000FFE  A4D8               	btfss	status,2,c
  2709  001000  EF04  F008         	goto	u1471
  2710  001004  EF06  F008         	goto	u1470
  2711  001008                     u1471:
  2712  001008  EF08  F008         	goto	l126
  2713  00100C                     u1470:
  2714  00100C  010E               	movlb	14	; () banked
  2715  00100E  8FD0               	bsf	208,7,b	;volatile
  2716  001010                     l126:
  2717  001010  0012               	return		;funcret
  2718  001012                     __end_of_SmallHours:
  2719                           	callstack 0
  2720                           
  2721 ;; *************** function _Lights_init *****************
  2722 ;; Defined at:
  2723 ;;		line 7 in file "lights.c"
  2724 ;; Parameters:    Size  Location     Type
  2725 ;;		None
  2726 ;; Auto vars:     Size  Location     Type
  2727 ;;		None
  2728 ;; Return value:  Size  Location     Type
  2729 ;;                  1    wreg      void 
  2730 ;; Registers used:
  2731 ;;		None
  2732 ;; Tracked objects:
  2733 ;;		On entry : 0/0
  2734 ;;		On exit  : 0/0
  2735 ;;		Unchanged: 0/0
  2736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2737 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2738 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2739 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2740 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2741 ;;Total ram usage:        0 bytes
  2742 ;; Hardware stack levels used: 1
  2743 ;; Hardware stack levels required when called: 1
  2744 ;; This function calls:
  2745 ;;		Nothing
  2746 ;; This function is called by:
  2747 ;;		_main
  2748 ;; This function uses a non-reentrant model
  2749 ;;
  2750                           
  2751                           	psect	text12
  2752  0010BC                     __ptext12:
  2753                           	callstack 0
  2754  0010BC                     _Lights_init:
  2755                           	callstack 29
  2756  0010BC                     
  2757                           ;lights.c: 10:     LATGbits.LATG0 = 0;
  2758  0010BC  907F               	bcf	127,0,c	;volatile
  2759                           
  2760                           ;lights.c: 11:     LATGbits.LATG1 = 0;
  2761  0010BE  927F               	bcf	127,1,c	;volatile
  2762                           
  2763                           ;lights.c: 12:     LATAbits.LATA2 = 0;
  2764  0010C0  9479               	bcf	121,2,c	;volatile
  2765                           
  2766                           ;lights.c: 13:     LATFbits.LATF6 = 0;
  2767  0010C2  9C7E               	bcf	126,6,c	;volatile
  2768                           
  2769                           ;lights.c: 14:     LATAbits.LATA4 = 0;
  2770  0010C4  9879               	bcf	121,4,c	;volatile
  2771                           
  2772                           ;lights.c: 15:     LATHbits.LATH3 = 0;
  2773  0010C6  9680               	bcf	128,3,c	;volatile
  2774                           
  2775                           ;lights.c: 18:     TRISGbits.TRISG0 = 0;
  2776  0010C8  9087               	bcf	135,0,c	;volatile
  2777                           
  2778                           ;lights.c: 19:     TRISGbits.TRISG1 = 0;
  2779  0010CA  9287               	bcf	135,1,c	;volatile
  2780                           
  2781                           ;lights.c: 20:     TRISAbits.TRISA2 = 0;
  2782  0010CC  9481               	bcf	129,2,c	;volatile
  2783                           
  2784                           ;lights.c: 21:     TRISFbits.TRISF6 = 0;
  2785  0010CE  9C86               	bcf	134,6,c	;volatile
  2786                           
  2787                           ;lights.c: 22:     TRISAbits.TRISA4 = 0;
  2788  0010D0  9881               	bcf	129,4,c	;volatile
  2789                           
  2790                           ;lights.c: 23:     TRISHbits.TRISH3 = 0;
  2791  0010D2  9688               	bcf	136,3,c	;volatile
  2792  0010D4  0012               	return		;funcret
  2793  0010D6                     __end_of_Lights_init:
  2794                           	callstack 0
  2795                           
  2796 ;; *************** function _LEDarray_disp_bin *****************
  2797 ;; Defined at:
  2798 ;;		line 29 in file "lights.c"
  2799 ;; Parameters:    Size  Location     Type
  2800 ;;  number          2    0[COMRAM] int 
  2801 ;; Auto vars:     Size  Location     Type
  2802 ;;		None
  2803 ;; Return value:  Size  Location     Type
  2804 ;;                  1    wreg      void 
  2805 ;; Registers used:
  2806 ;;		None
  2807 ;; Tracked objects:
  2808 ;;		On entry : 0/0
  2809 ;;		On exit  : 0/0
  2810 ;;		Unchanged: 0/0
  2811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2812 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2813 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2814 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2815 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2816 ;;Total ram usage:        2 bytes
  2817 ;; Hardware stack levels used: 1
  2818 ;; Hardware stack levels required when called: 1
  2819 ;; This function calls:
  2820 ;;		Nothing
  2821 ;; This function is called by:
  2822 ;;		_main
  2823 ;; This function uses a non-reentrant model
  2824 ;;
  2825                           
  2826                           	psect	text13
  2827  000F3A                     __ptext13:
  2828                           	callstack 0
  2829  000F3A                     _LEDarray_disp_bin:
  2830                           	callstack 29
  2831  000F3A                     
  2832                           ;lights.c: 29: void LEDarray_disp_bin(int number);lights.c: 30: {;lights.c: 32:     if (
      +                          number & 0b00001) {LATGbits.LATG0 = 1;} else {LATGbits.LATG0 = 0;}
  2833  000F3A  A001               	btfss	LEDarray_disp_bin@number^0,0,c
  2834  000F3C  EFA2  F007         	goto	u1391
  2835  000F40  EFA4  F007         	goto	u1390
  2836  000F44                     u1391:
  2837  000F44  EFA7  F007         	goto	l111
  2838  000F48                     u1390:
  2839  000F48  807F               	bsf	127,0,c	;volatile
  2840  000F4A  EFA8  F007         	goto	l112
  2841  000F4E                     l111:
  2842  000F4E  907F               	bcf	127,0,c	;volatile
  2843  000F50                     l112:
  2844                           
  2845                           ;lights.c: 33:     if (number & 0b00010) {LATGbits.LATG1 = 1;} else {LATGbits.LATG1 = 0;
      +                          }
  2846  000F50  A201               	btfss	LEDarray_disp_bin@number^0,1,c
  2847  000F52  EFAD  F007         	goto	u1401
  2848  000F56  EFAF  F007         	goto	u1400
  2849  000F5A                     u1401:
  2850  000F5A  EFB2  F007         	goto	l113
  2851  000F5E                     u1400:
  2852  000F5E  827F               	bsf	127,1,c	;volatile
  2853  000F60  EFB3  F007         	goto	l114
  2854  000F64                     l113:
  2855  000F64  927F               	bcf	127,1,c	;volatile
  2856  000F66                     l114:
  2857                           
  2858                           ;lights.c: 34:     if (number & 0b00100) {LATAbits.LATA2 = 1;} else {LATAbits.LATA2 = 0;
      +                          }
  2859  000F66  A401               	btfss	LEDarray_disp_bin@number^0,2,c
  2860  000F68  EFB8  F007         	goto	u1411
  2861  000F6C  EFBA  F007         	goto	u1410
  2862  000F70                     u1411:
  2863  000F70  EFBD  F007         	goto	l115
  2864  000F74                     u1410:
  2865  000F74  8479               	bsf	121,2,c	;volatile
  2866  000F76  EFBE  F007         	goto	l116
  2867  000F7A                     l115:
  2868  000F7A  9479               	bcf	121,2,c	;volatile
  2869  000F7C                     l116:
  2870                           
  2871                           ;lights.c: 35:     if (number & 0b01000) {LATFbits.LATF6 = 1;} else {LATFbits.LATF6 = 0;
      +                          }
  2872  000F7C  A601               	btfss	LEDarray_disp_bin@number^0,3,c
  2873  000F7E  EFC3  F007         	goto	u1421
  2874  000F82  EFC5  F007         	goto	u1420
  2875  000F86                     u1421:
  2876  000F86  EFC8  F007         	goto	l117
  2877  000F8A                     u1420:
  2878  000F8A  8C7E               	bsf	126,6,c	;volatile
  2879  000F8C  EFC9  F007         	goto	l118
  2880  000F90                     l117:
  2881  000F90  9C7E               	bcf	126,6,c	;volatile
  2882  000F92                     l118:
  2883                           
  2884                           ;lights.c: 36:     if (number & 0b10000) {LATAbits.LATA4 = 1;} else {LATAbits.LATA4 = 0;
      +                          }
  2885  000F92  A801               	btfss	LEDarray_disp_bin@number^0,4,c
  2886  000F94  EFCE  F007         	goto	u1431
  2887  000F98  EFD0  F007         	goto	u1430
  2888  000F9C                     u1431:
  2889  000F9C  EFD3  F007         	goto	l119
  2890  000FA0                     u1430:
  2891  000FA0  8879               	bsf	121,4,c	;volatile
  2892  000FA2  EFD4  F007         	goto	l121
  2893  000FA6                     l119:
  2894  000FA6  9879               	bcf	121,4,c	;volatile
  2895  000FA8                     l121:
  2896  000FA8  0012               	return		;funcret
  2897  000FAA                     __end_of_LEDarray_disp_bin:
  2898                           	callstack 0
  2899                           
  2900 ;; *************** function _Interrupts_init *****************
  2901 ;; Defined at:
  2902 ;;		line 8 in file "interrupts.c"
  2903 ;; Parameters:    Size  Location     Type
  2904 ;;		None
  2905 ;; Auto vars:     Size  Location     Type
  2906 ;;		None
  2907 ;; Return value:  Size  Location     Type
  2908 ;;                  1    wreg      void 
  2909 ;; Registers used:
  2910 ;;		None
  2911 ;; Tracked objects:
  2912 ;;		On entry : 0/0
  2913 ;;		On exit  : 0/0
  2914 ;;		Unchanged: 0/0
  2915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2916 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2917 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2918 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2919 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2920 ;;Total ram usage:        0 bytes
  2921 ;; Hardware stack levels used: 1
  2922 ;; Hardware stack levels required when called: 1
  2923 ;; This function calls:
  2924 ;;		Nothing
  2925 ;; This function is called by:
  2926 ;;		_main
  2927 ;; This function uses a non-reentrant model
  2928 ;;
  2929                           
  2930                           	psect	text14
  2931  0010F8                     __ptext14:
  2932                           	callstack 0
  2933  0010F8                     _Interrupts_init:
  2934                           	callstack 29
  2935  0010F8                     
  2936                           ;interrupts.c: 11:     PIE0bits.TMR0IE = 1;
  2937  0010F8  010E               	movlb	14	; () banked
  2938  0010FA  8B29               	bsf	41,5,b	;volatile
  2939                           
  2940                           ;interrupts.c: 12:     PIE2bits.C1IE = 1;
  2941  0010FC  812B               	bsf	43,0,b	;volatile
  2942                           
  2943                           ;interrupts.c: 13:     INTCONbits.PEIE = 1;
  2944  0010FE  8CF2               	bsf	242,6,c	;volatile
  2945                           
  2946                           ;interrupts.c: 14:     INTCONbits.GIE = 1;
  2947  001100  8EF2               	bsf	242,7,c	;volatile
  2948  001102                     
  2949                           ; BSR set to: 14
  2950  001102  0012               	return		;funcret
  2951  001104                     __end_of_Interrupts_init:
  2952                           	callstack 0
  2953                           
  2954 ;; *************** function _Comp1_init *****************
  2955 ;; Defined at:
  2956 ;;		line 21 in file "comparator.c"
  2957 ;; Parameters:    Size  Location     Type
  2958 ;;		None
  2959 ;; Auto vars:     Size  Location     Type
  2960 ;;		None
  2961 ;; Return value:  Size  Location     Type
  2962 ;;                  1    wreg      void 
  2963 ;; Registers used:
  2964 ;;		wreg, status,2, cstack
  2965 ;; Tracked objects:
  2966 ;;		On entry : 0/0
  2967 ;;		On exit  : 0/0
  2968 ;;		Unchanged: 0/0
  2969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2970 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2971 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2972 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2973 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2974 ;;Total ram usage:        0 bytes
  2975 ;; Hardware stack levels used: 1
  2976 ;; Hardware stack levels required when called: 2
  2977 ;; This function calls:
  2978 ;;		_DAC_init
  2979 ;; This function is called by:
  2980 ;;		_main
  2981 ;; This function uses a non-reentrant model
  2982 ;;
  2983                           
  2984                           	psect	text15
  2985  001076                     __ptext15:
  2986                           	callstack 0
  2987  001076                     _Comp1_init:
  2988                           	callstack 28
  2989  001076                     
  2990                           ;comparator.c: 23:     TRISFbits.TRISF7 = 1;
  2991  001076  8E86               	bsf	134,7,c	;volatile
  2992  001078                     
  2993                           ;comparator.c: 24:     CM1NCHbits.NCH = 0b011;
  2994  001078  010E               	movlb	14	; () banked
  2995  00107A  51D2               	movf	210,w,b	;volatile
  2996  00107C  0BF8               	andlw	-8
  2997  00107E  0903               	iorlw	3
  2998  001080  6FD2               	movwf	210,b	;volatile
  2999                           
  3000                           ;comparator.c: 25:     CM1PCHbits.PCH = 0b101;
  3001  001082  51D3               	movf	211,w,b	;volatile
  3002  001084  0BF8               	andlw	-8
  3003  001086  0905               	iorlw	5
  3004  001088  6FD3               	movwf	211,b	;volatile
  3005  00108A                     
  3006                           ; BSR set to: 14
  3007                           ;comparator.c: 26:     CM1CON0bits.HYS = 1;
  3008  00108A  83D0               	bsf	208,1,b	;volatile
  3009  00108C                     
  3010                           ; BSR set to: 14
  3011                           ;comparator.c: 27:     CM1CON0bits.POL = 1;
  3012  00108C  89D0               	bsf	208,4,b	;volatile
  3013  00108E                     
  3014                           ; BSR set to: 14
  3015                           ;comparator.c: 28:     CM1CON1bits.INTP = 1;
  3016  00108E  83D1               	bsf	209,1,b	;volatile
  3017  001090                     
  3018                           ; BSR set to: 14
  3019                           ;comparator.c: 29:     CM1CON1bits.INTN = 1;
  3020  001090  81D1               	bsf	209,0,b	;volatile
  3021  001092                     
  3022                           ; BSR set to: 14
  3023                           ;comparator.c: 30:     DAC_init();
  3024  001092  EC6B  F008         	call	_DAC_init	;wreg free
  3025  001096                     
  3026                           ;comparator.c: 31:     CM1CON0bits.EN = 1;
  3027  001096  010E               	movlb	14	; () banked
  3028  001098  8FD0               	bsf	208,7,b	;volatile
  3029  00109A                     
  3030                           ; BSR set to: 14
  3031  00109A  0012               	return		;funcret
  3032  00109C                     __end_of_Comp1_init:
  3033                           	callstack 0
  3034                           
  3035 ;; *************** function _DAC_init *****************
  3036 ;; Defined at:
  3037 ;;		line 7 in file "comparator.c"
  3038 ;; Parameters:    Size  Location     Type
  3039 ;;		None
  3040 ;; Auto vars:     Size  Location     Type
  3041 ;;		None
  3042 ;; Return value:  Size  Location     Type
  3043 ;;                  1    wreg      void 
  3044 ;; Registers used:
  3045 ;;		wreg, status,2
  3046 ;; Tracked objects:
  3047 ;;		On entry : 0/0
  3048 ;;		On exit  : 0/0
  3049 ;;		Unchanged: 0/0
  3050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3051 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3052 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3053 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3054 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3055 ;;Total ram usage:        0 bytes
  3056 ;; Hardware stack levels used: 1
  3057 ;; Hardware stack levels required when called: 1
  3058 ;; This function calls:
  3059 ;;		Nothing
  3060 ;; This function is called by:
  3061 ;;		_Comp1_init
  3062 ;; This function uses a non-reentrant model
  3063 ;;
  3064                           
  3065                           	psect	text16
  3066  0010D6                     __ptext16:
  3067                           	callstack 0
  3068  0010D6                     _DAC_init:
  3069                           	callstack 28
  3070  0010D6                     
  3071                           ;comparator.c: 9:     DAC1CON0bits.PSS = 0b00;
  3072  0010D6  0EF3               	movlw	-13
  3073  0010D8  010E               	movlb	14	; () banked
  3074  0010DA  17C6               	andwf	198,f,b	;volatile
  3075  0010DC                     
  3076                           ; BSR set to: 14
  3077                           ;comparator.c: 10:     DAC1CON0bits.NSS = 0b0;
  3078  0010DC  91C6               	bcf	198,0,b	;volatile
  3079                           
  3080                           ;comparator.c: 14:     DAC1CON1bits.DAC1R = 0b11011;
  3081  0010DE  51C7               	movf	199,w,b	;volatile
  3082  0010E0  0BE0               	andlw	-32
  3083  0010E2  091B               	iorlw	27
  3084  0010E4  6FC7               	movwf	199,b	;volatile
  3085  0010E6                     
  3086                           ; BSR set to: 14
  3087                           ;comparator.c: 15:     DAC1CON0bits.DAC1EN = 1;
  3088  0010E6  8FC6               	bsf	198,7,b	;volatile
  3089  0010E8                     
  3090                           ; BSR set to: 14
  3091  0010E8  0012               	return		;funcret
  3092  0010EA                     __end_of_DAC_init:
  3093                           	callstack 0
  3094                           
  3095 ;; *************** function _ISR *****************
  3096 ;; Defined at:
  3097 ;;		line 20 in file "interrupts.c"
  3098 ;; Parameters:    Size  Location     Type
  3099 ;;		None
  3100 ;; Auto vars:     Size  Location     Type
  3101 ;;		None
  3102 ;; Return value:  Size  Location     Type
  3103 ;;                  1    wreg      void 
  3104 ;; Registers used:
  3105 ;;		wreg, status,2
  3106 ;; Tracked objects:
  3107 ;;		On entry : 0/0
  3108 ;;		On exit  : 0/0
  3109 ;;		Unchanged: 0/0
  3110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3111 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3112 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3113 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3114 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3115 ;;Total ram usage:        0 bytes
  3116 ;; Hardware stack levels used: 1
  3117 ;; This function calls:
  3118 ;;		Nothing
  3119 ;; This function is called by:
  3120 ;;		Interrupt level 2
  3121 ;; This function uses a non-reentrant model
  3122 ;;
  3123                           
  3124                           	psect	intcode
  3125  000008                     __pintcode:
  3126                           	callstack 0
  3127  000008                     _ISR:
  3128                           	callstack 27
  3129                           
  3130                           ; BSR set to: 14
  3131                           ;incstack = 0
  3132  000008  824F               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  3133  00000A                     
  3134                           ;interrupts.c: 22:     if (PIR0bits.TMR0IF == 1) {
  3135  00000A  010E               	movlb	14	; () banked
  3136  00000C  AB33               	btfss	51,5,b	;volatile
  3137  00000E  EF0B  F000         	goto	i2u76_41
  3138  000012  EF0D  F000         	goto	i2u76_40
  3139  000016                     i2u76_41:
  3140  000016  EF14  F000         	goto	i2l1243
  3141  00001A                     i2u76_40:
  3142  00001A                     
  3143                           ; BSR set to: 14
  3144                           ;interrupts.c: 23:         minutehand = 1;
  3145  00001A  0E01               	movlw	1
  3146  00001C  6E4E               	movwf	_minutehand^0,c
  3147                           
  3148                           ;interrupts.c: 24:         TMR0H=0b00011011;
  3149  00001E  0E1B               	movlw	27
  3150  000020  6ED4               	movwf	212,c	;volatile
  3151                           
  3152                           ;interrupts.c: 25:         TMR0L=0b00011110;
  3153  000022  0E1E               	movlw	30
  3154  000024  6ED3               	movwf	211,c	;volatile
  3155  000026                     
  3156                           ; BSR set to: 14
  3157                           ;interrupts.c: 26:         PIR0bits.TMR0IF = 0;
  3158  000026  9B33               	bcf	51,5,b	;volatile
  3159  000028                     i2l1243:
  3160                           
  3161                           ; BSR set to: 14
  3162                           ;interrupts.c: 29:     if (PIR2bits.C1IF == 1) {
  3163  000028  A135               	btfss	53,0,b	;volatile
  3164  00002A  EF19  F000         	goto	i2u77_41
  3165  00002E  EF1B  F000         	goto	i2u77_40
  3166  000032                     i2u77_41:
  3167  000032  EF2B  F000         	goto	i2l54
  3168  000036                     i2u77_40:
  3169  000036                     
  3170                           ; BSR set to: 14
  3171                           ;interrupts.c: 30:         if (CM1CON0bits.OUT) {LATHbits.LATH3 = 1; dawndusk = 1;}
  3172  000036  ADD0               	btfss	208,6,b	;volatile
  3173  000038  EF20  F000         	goto	i2u78_41
  3174  00003C  EF22  F000         	goto	i2u78_40
  3175  000040                     i2u78_41:
  3176  000040  EF27  F000         	goto	i2l52
  3177  000044                     i2u78_40:
  3178  000044                     
  3179                           ; BSR set to: 14
  3180  000044  8680               	bsf	128,3,c	;volatile
  3181  000046                     i2l1249:
  3182                           
  3183                           ; BSR set to: 14
  3184  000046  0E01               	movlw	1
  3185  000048  6E4D               	movwf	_dawndusk^0,c
  3186  00004A  EF2A  F000         	goto	i2l1253
  3187  00004E                     i2l52:
  3188                           
  3189                           ; BSR set to: 14
  3190  00004E  9680               	bcf	128,3,c	;volatile
  3191  000050  EF23  F000         	goto	i2l1249
  3192  000054                     i2l1253:
  3193                           
  3194                           ; BSR set to: 14
  3195                           ;interrupts.c: 32:         PIR2bits.C1IF = 0;
  3196  000054  9135               	bcf	53,0,b	;volatile
  3197  000056                     i2l54:
  3198                           
  3199                           ; BSR set to: 14
  3200  000056  924F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  3201  000058  0011               	retfie		f
  3202  00005A                     __end_of_ISR:
  3203                           	callstack 0
  3204  0000                     
  3205                           	psect	rparam
  3206  0000                     
  3207                           	psect	temp
  3208  00004F                     btemp:
  3209                           	callstack 0
  3210  00004F                     	ds	1
  3211  0000                     int$flags	set	btemp
  3212  0000                     wtemp8	set	btemp+1
  3213  0000                     ttemp5	set	btemp+1
  3214  0000                     ttemp6	set	btemp+4
  3215  0000                     ttemp7	set	btemp+8
  3216                           
  3217                           	psect	idloc
  3218                           
  3219                           ;Config register IDLOC0 @ 0x200000
  3220                           ;	unspecified, using default values
  3221  200000                     	org	2097152
  3222  200000  0FFF               	dw	4095
  3223                           
  3224                           ;Config register IDLOC1 @ 0x200002
  3225                           ;	unspecified, using default values
  3226  200002                     	org	2097154
  3227  200002  0FFF               	dw	4095
  3228                           
  3229                           ;Config register IDLOC2 @ 0x200004
  3230                           ;	unspecified, using default values
  3231  200004                     	org	2097156
  3232  200004  0FFF               	dw	4095
  3233                           
  3234                           ;Config register IDLOC3 @ 0x200006
  3235                           ;	unspecified, using default values
  3236  200006                     	org	2097158
  3237  200006  0FFF               	dw	4095
  3238                           
  3239                           ;Config register IDLOC4 @ 0x200008
  3240                           ;	unspecified, using default values
  3241  200008                     	org	2097160
  3242  200008  0FFF               	dw	4095
  3243                           
  3244                           ;Config register IDLOC5 @ 0x20000A
  3245                           ;	unspecified, using default values
  3246  20000A                     	org	2097162
  3247  20000A  0FFF               	dw	4095
  3248                           
  3249                           ;Config register IDLOC6 @ 0x20000C
  3250                           ;	unspecified, using default values
  3251  20000C                     	org	2097164
  3252  20000C  0FFF               	dw	4095
  3253                           
  3254                           ;Config register IDLOC7 @ 0x20000E
  3255                           ;	unspecified, using default values
  3256  20000E                     	org	2097166
  3257  20000E  0FFF               	dw	4095
  3258                           
  3259                           	psect	config
  3260                           
  3261                           ;Config register CONFIG1L @ 0x300000
  3262                           ;	External Oscillator mode Selection bits
  3263                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  3264                           ;	Power-up default value for COSC bits
  3265                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  3266  300000                     	org	3145728
  3267  300000  AA                 	db	170
  3268                           
  3269                           ;Config register CONFIG1H @ 0x300001
  3270                           ;	unspecified, using default values
  3271                           ;	Clock Out Enable bit
  3272                           ;	CLKOUTEN = 0x1, unprogrammed default
  3273                           ;	Clock Switch Enable bit
  3274                           ;	CSWEN = 0x1, unprogrammed default
  3275                           ;	Fail-Safe Clock Monitor Enable bit
  3276                           ;	FCMEN = 0x1, unprogrammed default
  3277  300001                     	org	3145729
  3278  300001  FF                 	db	255
  3279                           
  3280                           ;Config register CONFIG2L @ 0x300002
  3281                           ;	unspecified, using default values
  3282                           ;	Master Clear Enable bit
  3283                           ;	MCLRE = 0x1, unprogrammed default
  3284                           ;	Power-up Timer Enable bit
  3285                           ;	PWRTE = 0x1, unprogrammed default
  3286                           ;	Low-power BOR enable bit
  3287                           ;	LPBOREN = 0x1, unprogrammed default
  3288                           ;	Brown-out Reset Enable bits
  3289                           ;	BOREN = 0x3, unprogrammed default
  3290  300002                     	org	3145730
  3291  300002  FF                 	db	255
  3292                           
  3293                           ;Config register CONFIG2H @ 0x300003
  3294                           ;	unspecified, using default values
  3295                           ;	Brown Out Reset Voltage selection bits
  3296                           ;	BORV = 0x3, unprogrammed default
  3297                           ;	ZCD Disable bit
  3298                           ;	ZCD = 0x1, unprogrammed default
  3299                           ;	PPSLOCK bit One-Way Set Enable bit
  3300                           ;	PPS1WAY = 0x1, unprogrammed default
  3301                           ;	Stack Full/Underflow Reset Enable bit
  3302                           ;	STVREN = 0x1, unprogrammed default
  3303                           ;	Debugger Enable bit
  3304                           ;	DEBUG = 0x1, unprogrammed default
  3305                           ;	Extended Instruction Set Enable bit
  3306                           ;	XINST = 0x1, unprogrammed default
  3307  300003                     	org	3145731
  3308  300003  FF                 	db	255
  3309                           
  3310                           ;Config register CONFIG3L @ 0x300004
  3311                           ;	WDT Period Select bits
  3312                           ;	WDTCPS = 0x1F, unprogrammed default
  3313                           ;	WDT operating mode
  3314                           ;	WDTE = OFF, WDT Disabled
  3315  300004                     	org	3145732
  3316  300004  9F                 	db	159
  3317                           
  3318                           ;Config register CONFIG3H @ 0x300005
  3319                           ;	unspecified, using default values
  3320                           ;	WDT Window Select bits
  3321                           ;	WDTCWS = 0x7, unprogrammed default
  3322                           ;	WDT input clock selector
  3323                           ;	WDTCCS = 0x7, unprogrammed default
  3324  300005                     	org	3145733
  3325  300005  FF                 	db	255
  3326                           
  3327                           ;Config register CONFIG4L @ 0x300006
  3328                           ;	unspecified, using default values
  3329                           ;	Write Protection Block 0
  3330                           ;	WRT0 = 0x1, unprogrammed default
  3331                           ;	Write Protection Block 1
  3332                           ;	WRT1 = 0x1, unprogrammed default
  3333                           ;	Write Protection Block 2
  3334                           ;	WRT2 = 0x1, unprogrammed default
  3335                           ;	Write Protection Block 3
  3336                           ;	WRT3 = 0x1, unprogrammed default
  3337                           ;	Write Protection Block 3
  3338                           ;	WRT4 = 0x1, unprogrammed default
  3339                           ;	Write Protection Block 3
  3340                           ;	WRT5 = 0x1, unprogrammed default
  3341                           ;	Write Protection Block 3
  3342                           ;	WRT6 = 0x1, unprogrammed default
  3343                           ;	Write Protection Block 3
  3344                           ;	WRT7 = 0x1, unprogrammed default
  3345  300006                     	org	3145734
  3346  300006  FF                 	db	255
  3347                           
  3348                           ;Config register CONFIG4H @ 0x300007
  3349                           ;	unspecified, using default values
  3350                           ;	Configuration Register Write Protection bit
  3351                           ;	WRTC = 0x1, unprogrammed default
  3352                           ;	Boot Block Write Protection bit
  3353                           ;	WRTB = 0x1, unprogrammed default
  3354                           ;	Data EEPROM Write Protection bit
  3355                           ;	WRTD = 0x1, unprogrammed default
  3356                           ;	Scanner Enable bit
  3357                           ;	SCANE = 0x1, unprogrammed default
  3358                           ;	Low Voltage Programming Enable bit
  3359                           ;	LVP = 0x1, unprogrammed default
  3360  300007                     	org	3145735
  3361  300007  FF                 	db	255
  3362                           
  3363                           ;Config register CONFIG5L @ 0x300008
  3364                           ;	unspecified, using default values
  3365                           ;	UserNVM Program Memory Code Protection bit
  3366                           ;	CP = 0x1, unprogrammed default
  3367                           ;	DataNVM Memory Code Protection bit
  3368                           ;	CPD = 0x1, unprogrammed default
  3369  300008                     	org	3145736
  3370  300008  FF                 	db	255
  3371                           
  3372                           ;Config register CONFIG5H @ 0x300009
  3373                           ;	unspecified, using default values
  3374  300009                     	org	3145737
  3375  300009  FF                 	db	255
  3376                           
  3377                           ;Config register CONFIG6L @ 0x30000A
  3378                           ;	unspecified, using default values
  3379                           ;	Table Read Protection Block 0
  3380                           ;	EBTR0 = 0x1, unprogrammed default
  3381                           ;	Table Read Protection Block 1
  3382                           ;	EBTR1 = 0x1, unprogrammed default
  3383                           ;	Table Read Protection Block 2
  3384                           ;	EBTR2 = 0x1, unprogrammed default
  3385                           ;	Table Read Protection Block 3
  3386                           ;	EBTR3 = 0x1, unprogrammed default
  3387                           ;	Table Read Protection Block 4
  3388                           ;	EBTR4 = 0x1, unprogrammed default
  3389                           ;	Table Read Protection Block 5
  3390                           ;	EBTR5 = 0x1, unprogrammed default
  3391                           ;	Table Read Protection Block 6
  3392                           ;	EBTR6 = 0x1, unprogrammed default
  3393                           ;	Table Read Protection Block 7
  3394                           ;	EBTR7 = 0x1, unprogrammed default
  3395  30000A                     	org	3145738
  3396  30000A  FF                 	db	255
  3397                           
  3398                           ;Config register CONFIG6H @ 0x30000B
  3399                           ;	unspecified, using default values
  3400                           ;	Boot Block Table Read Protection bit
  3401                           ;	EBTRB = 0x1, unprogrammed default
  3402  30000B                     	org	3145739
  3403  30000B  FF                 	db	255
  3404                           tosu	equ	0xFFF
  3405                           tosh	equ	0xFFE
  3406                           tosl	equ	0xFFD
  3407                           stkptr	equ	0xFFC
  3408                           pclatu	equ	0xFFB
  3409                           pclath	equ	0xFFA
  3410                           pcl	equ	0xFF9
  3411                           tblptru	equ	0xFF8
  3412                           tblptrh	equ	0xFF7
  3413                           tblptrl	equ	0xFF6
  3414                           tablat	equ	0xFF5
  3415                           prodh	equ	0xFF4
  3416                           prodl	equ	0xFF3
  3417                           indf0	equ	0xFEF
  3418                           postinc0	equ	0xFEE
  3419                           postdec0	equ	0xFED
  3420                           preinc0	equ	0xFEC
  3421                           plusw0	equ	0xFEB
  3422                           fsr0h	equ	0xFEA
  3423                           fsr0l	equ	0xFE9
  3424                           wreg	equ	0xFE8
  3425                           indf1	equ	0xFE7
  3426                           postinc1	equ	0xFE6
  3427                           postdec1	equ	0xFE5
  3428                           preinc1	equ	0xFE4
  3429                           plusw1	equ	0xFE3
  3430                           fsr1h	equ	0xFE2
  3431                           fsr1l	equ	0xFE1
  3432                           bsr	equ	0xFE0
  3433                           indf2	equ	0xFDF
  3434                           postinc2	equ	0xFDE
  3435                           postdec2	equ	0xFDD
  3436                           preinc2	equ	0xFDC
  3437                           plusw2	equ	0xFDB
  3438                           fsr2h	equ	0xFDA
  3439                           fsr2l	equ	0xFD9
  3440                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     76      78
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    UpdateDawnDusk@pduskminute	PTR int  size(2) Largest target is 2
		 -> main@duskminute(COMRAM[2]), 

    UpdateDawnDusk@pduskhour	PTR int  size(2) Largest target is 2
		 -> main@duskhour(COMRAM[2]), 

    UpdateDawnDusk@pminute	PTR int  size(2) Largest target is 2
		 -> main@minute(COMRAM[2]), 

    UpdateDawnDusk@pdawnminute	PTR int  size(2) Largest target is 2
		 -> main@dawnminute(COMRAM[2]), 

    UpdateDawnDusk@pdawnhour	PTR int  size(2) Largest target is 2
		 -> main@dawnhour(COMRAM[2]), 

    UpdateDawnDusk@phour	PTR int  size(2) Largest target is 2
		 -> main@hour(COMRAM[2]), 

    TimeAvg@pavgminute	PTR int  size(2) Largest target is 2
		 -> SunPleaseFixTheDamnClock@avgminute(COMRAM[2]), 

    TimeAvg@pavghour	PTR int  size(2) Largest target is 2
		 -> SunPleaseFixTheDamnClock@avghour(COMRAM[2]), 

    SunPleaseFixTheDamnClock@phour	PTR int  size(2) Largest target is 2
		 -> main@hour(COMRAM[2]), 

    SunPleaseFixTheDamnClock@pminute	PTR int  size(2) Largest target is 2
		 -> main@minute(COMRAM[2]), 

    SunPleaseFixTheDamnClock@pduskminute	PTR int  size(2) Largest target is 2
		 -> main@duskminute(COMRAM[2]), 

    SunPleaseFixTheDamnClock@pdawnminute	PTR int  size(2) Largest target is 2
		 -> main@dawnminute(COMRAM[2]), 

    SunPleaseFixTheDamnClock@pduskhour	PTR int  size(2) Largest target is 2
		 -> main@duskhour(COMRAM[2]), 

    SunPleaseFixTheDamnClock@pdawnhour	PTR int  size(2) Largest target is 2
		 -> main@dawnhour(COMRAM[2]), 

    Timekeeper@pDST	PTR unsigned char  size(2) Largest target is 1
		 -> main@DST(COMRAM[1]), 

    Timekeeper@pyear	PTR unsigned int  size(2) Largest target is 2
		 -> main@year(COMRAM[2]), 

    Timekeeper@pmonth	PTR unsigned char  size(2) Largest target is 1
		 -> main@month(COMRAM[1]), 

    Timekeeper@pdayofweek	PTR unsigned char  size(2) Largest target is 1
		 -> main@dayofweek(COMRAM[1]), 

    Timekeeper@pday	PTR unsigned char  size(2) Largest target is 1
		 -> main@day(COMRAM[1]), 

    Timekeeper@phour	PTR int  size(2) Largest target is 2
		 -> main@hour(COMRAM[2]), 

    Timekeeper@pminute	PTR int  size(2) Largest target is 2
		 -> main@minute(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_SunPleaseFixTheDamnClock
    _Timekeeper->_LeapYear
    _LeapYear->___lwmod
    _SunPleaseFixTheDamnClock->_TimeAvg
    _TimeAvg->___awdiv
    ___awdiv->_TimeDiff

Critical Paths under _ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                18    18      0   12508
                                             58 COMRAM    18    18      0
                         _Comp1_init
                    _Interrupts_init
                  _LEDarray_disp_bin
                        _Lights_init
                         _SmallHours
           _SunPleaseFixTheDamnClock
                         _Timekeeper
                        _Timer0_init
                     _UpdateDawnDusk
 ---------------------------------------------------------------------------------
 (1) _UpdateDawnDusk                                      14     2     12     654
                                              0 COMRAM    14     2     12
 ---------------------------------------------------------------------------------
 (1) _Timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Timekeeper                                          16     2     14    2404
                                             10 COMRAM    16     2     14
                           _LeapYear
 ---------------------------------------------------------------------------------
 (2) _LeapYear                                             5     3      2     706
                                              5 COMRAM     5     3      2
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     463
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (1) _SunPleaseFixTheDamnClock                            23    10     13    8314
                                             35 COMRAM    23    10     13
                            _TimeAvg
                           _TimeDiff
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) _TimeAvg                                             18     6     12    3693
                                             17 COMRAM    18     6     12
                           _TimeDiff
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     904
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4    1060
                                              9 COMRAM     8     4      4
                           _TimeDiff (ARG)
 ---------------------------------------------------------------------------------
 (2) _TimeDiff                                             9     1      8     876
                                              0 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (1) _SmallHours                                           4     0      4     240
                                              0 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (1) _Lights_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LEDarray_disp_bin                                    2     0      2     186
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _Interrupts_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Comp1_init                                           0     0      0       0
                           _DAC_init
 ---------------------------------------------------------------------------------
 (2) _DAC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _ISR                                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Comp1_init
     _DAC_init
   _Interrupts_init
   _LEDarray_disp_bin
   _Lights_init
   _SmallHours
   _SunPleaseFixTheDamnClock
     _TimeAvg
       _TimeDiff
       ___awdiv
         _TimeDiff (ARG)
       ___awmod
     _TimeDiff
     ___awdiv
     ___awmod
   _Timekeeper
     _LeapYear
       ___lwmod
   _Timer0_init
   _UpdateDawnDusk

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      33        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK13           EA      0       0      31        0.0%
BANK13              EA      0       0      32        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     4C      4E       1       83.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      4E       8        0.0%
DATA                 0      0      4E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Tue Nov 02 12:21:08 2021

                  Timekeeper@pdayofweek 0015                                      l20 109A  
                                    l17 10E8                                      l45 1102  
                                    l81 0994                            ___awdiv@sign 000F  
                     ??_Interrupts_init 0001                                     l111 0F4E  
                                   l112 0F50                                     l200 0C02  
                                   l121 0FA8                                     l113 0F64  
                                   l114 0F66                                     l115 0F7A  
                                   l116 0F7C                                     l108 10D4  
                                   l117 0F90                                     l205 0EBA  
                                   l118 0F92                                     l126 1010  
                                   l119 0FA6                                     l143 10BA  
                                   l160 093A                                     l164 0F36  
                                   l182 04E4                                     l175 02D0  
                                   l167 0F38                                     l177 0388  
                                   l194 0D7C                                     l452 0E2C  
                                   l439 0CC6                                     l716 1074  
                                   l709 106C                                     _ISR 0008  
                                   u900 0C74                                     u901 0C70  
                                   u830 0CE6                                     u910 0C90  
                                   u831 0CE2                                     u911 0C8C  
                                   u840 0D1A                                     u920 0CB6  
                                   u841 0D16                                     u921 0CB2  
                                   u850 0D3C                                     u930 0D90  
                                   u851 0D38                                     u931 0D8C  
                                   u860 0D70                                     u940 0DAA  
                                   u861 0D6C                                     u941 0DA6  
                                   u870 0C16                                     u950 0DC4  
                                   u871 0C12                                     u951 0DC0  
                                   u880 0C30                                     u960 0DE2  
                                   u881 0C2C                                     u961 0DDE  
                                   u890 0C56                                     u970 0DF8  
                                   u891 0C52                                     u971 0DF4  
                                   u980 0E1C                                     u981 0E18  
                                   u990 1024                                     u991 1020  
                          ___awmod@sign 0006                                    ?_ISR 0001  
                                  l1001 10D6                                    l1003 10DC  
                                  l1005 10E6                                    l1041 108C  
                                  l1043 108E                                    l1035 1076  
                                  l1051 10F8                                    l1045 1090  
                                  l1037 1078                                    l1053 10BC  
                                  l1301 0D70                                    l1061 10B8  
                                  l1047 1092                                    l1039 108A  
                                  l1311 0C1E                                    l1055 109C  
                                  l1049 1096                                    l1321 0C44  
                                  l1313 0C22                                    l1305 0C04  
                                  l1401 0EBC                                    l1057 10A4  
                                  l1331 0C7A                                    l1323 0C56  
                                  l1315 0C30                                    l1307 0C08  
                                  l1411 0F32                                    l1403 0EDA  
                                  l1059 10AE                                    l1333 0C90  
                                  l1325 0C5E                                    l1341 0CA6  
                                  l1317 0C38                                    l1309 0C16  
                                  l1421 0B4A                                    l1405 0F00  
                                  l1501 07EC                                    l1343 0CB6  
                                  l1335 0C98                                    l1327 0C66  
                                  l1319 0C3C                                    l1351 0D82  
                                  l1423 0B72                                    l1415 0AB2  
                                  l1407 0F08                                    l1511 0852  
                                  l1503 0806                                    l1431 0510  
                                  l1281 0CC8                                    l1345 0CBE  
                                  l1337 0C9A                                    l1329 0C74  
                                  l1361 0DB2                                    l1353 0D90  
                                  l1425 0BB4                                    l1417 0AF2  
                                  l1601 04A8                                    l1521 08BA  
                                  l1513 086C                                    l1505 0812  
                                  l1441 0564                                    l1433 0520  
                                  l1291 0D1E                                    l1339 0CA0  
                                  l1371 0DF8                                    l1363 0DC4  
                                  l1355 0D98                                    l1427 0BCC  
                                  l1419 0B1E                                    l1531 092E  
                                  l1523 08D2                                    l1515 0886  
                                  l1507 0820                                    l1451 05C8  
                                  l1443 056E                                    l1435 052E  
                                  l1611 09E0                                    l1603 093C  
                                  l1541 0F8A                                    l1533 0F3A  
                                  l1285 0CEA                                    l1381 0E24  
                                  l1373 0E00                                    l1365 0DCC  
                                  l1357 0D9C                                    l1349 0D7E  
                                  l1525 08EE                                    l1517 0894  
                                  l1509 083A                                    l1461 0636  
                                  l1453 05EC                                    l1445 0588  
                                  l1437 054A                                    l1429 04E6  
                                  l1621 0A48                                    l1613 09E4  
                                  l1605 0984                                    l1543 0FA0  
                                  l1535 0F48                                    l1551 0FE6  
                                  l1295 0D40                                    l1287 0CF0  
                                  l1375 0E06                                    l1367 0DD4  
                                  l1359 0DAA                                    l1391 1034  
                                  l1527 0908                                    l1519 08A0  
                                  l1471 06A4                                    l1463 065A  
                                  l1455 05F8                                    l1447 0594  
                                  l1439 055A                                    l1623 0A4C  
                                  l1615 09F0                                    l1607 0990  
                                  l1537 0F5E                                    l1553 0FFA  
                                  l1545 0FAA                                    l1297 0D46  
                                  l1289 0CFC                                    l1369 0DE2  
                                  l1377 0E0C                                    l1393 1042  
                                  l1385 1012                                    l1529 0920  
                                  l1473 06BE                                    l1481 0708  
                                  l1465 0666                                    l1449 05AE  
                                  l1457 0602                                    l1561 0E8A  
                                  l1625 0A60                                    l1617 0A04  
                                  l1609 09A4                                    l1539 0F74  
                                  l1555 100C                                    l1547 0FC4  
                                  l1299 0D52                                    l1379 0E1C  
                                  l1571 0132                                    l1563 005E  
                                  l1395 1058                                    l1387 1024  
                                  l1491 0788                                    l1483 0722  
                                  l1475 06D8                                    l1459 061C  
                                  l1467 0670                                    l1627 0A72  
                                  l1619 0A14                                    l1549 0FE0  
                                  l1581 0282                                    l1573 0182  
                                  l1565 006E                                    l1397 1060  
                                  l1389 102C                                    l1493 07A2  
                                  l1485 073A                                    l1477 06F2  
                                  l1469 068A                                    l1557 0E2E  
                                  l1591 03B0                                    l1583 029A  
                                  l1575 01AE                                    l1567 00CE  
                                  l1399 1066                                    l1495 07BC  
                                  l1487 0754                                    l1479 06FE  
                                  l1559 0E56                                    l1593 03F2  
                                  l1585 02F8                                    l1577 01CA  
                                  l1569 0122                                    l1489 076E  
                                  l1497 07D6                                    l1595 040A  
                                  l1587 033A                                    l1579 01E6  
                                  l1499 07E2                                    l1597 0440  
                                  l1589 0352                                    l1599 046C  
                                  u1000 1042                                    u1001 103E  
                                  u1010 1058                                    u1011 1054  
                                  u1020 0EDA                                    u1100 05AE  
                                  u1021 0ED6                                    u1101 05AA  
                                  u1030 0F00                                    u1110 05C8  
                                  u1031 0EFC                                    u1111 05C4  
                                  u1040 0F2E                                    u1200 06F2  
                                  u1120 05EC                                    u1041 0F2A  
                                  u1201 06EE                                    u1121 05E8  
                                  u1050 0B72                                    u1210 0722  
                                  u1130 061C                                    u1051 0B6E  
                                  u1211 071E                                    u1131 0618  
                                  u1060 0BCC                                    u1300 083A  
                                  u1220 073A                                    u1140 0636  
                                  u1061 0BC8                                    u1301 0836  
                                  u1221 0736                                    u1141 0632  
                                  u1310 0852                                    u1230 0754  
                                  u1150 065A                                    u1070 0510  
                                  u1311 084E                                    u1231 0750  
                                  u1151 0656                                    u1071 050C  
                                  u1400 0F5E                                    u1320 086C  
                                  u1240 076E                                    u1160 068A  
                                  u1080 054A                                    u1401 0F5A  
                                  u1321 0868                                    u1241 076A  
                                  u1161 0686                                    u1081 0546  
                                  u1410 0F74                                    u1330 0886  
                                  u1250 0788                                    u1170 06A4  
                                  u1090 0588                                    u1411 0F70  
                                  u1331 0882                                    u1251 0784  
                                  u1171 06A0                                    u1091 0584  
                                  u1420 0F8A                                    u1500 0132  
                                  u1340 08BA                                    u1260 07A2  
                                  u1180 06BE                                    u1421 0F86  
                                  u1501 012E                                    u1341 08B6  
                                  u1261 079E                                    u1181 06BA  
                                  u1430 0FA0                                    u1510 01CA  
                                  u1350 08D2                                    u1270 07BC  
                                  u1190 06D8                                    u1431 0F9C  
                                  u1511 01C6                                    u1351 08CE  
                                  u1271 07B8                                    u1191 06D4  
                                  u1440 0FC4                                    u1520 01E6  
                                  u1360 08EE                                    u1280 07D6  
                                  u1600 0A60                                    u1441 0FC0  
                                  u1521 01E2                                    u1361 08EA  
                                  u1281 07D2                                    u1601 0A5C  
                                  u1450 0FE0                                    u1530 029A  
                                  u1370 0908                                    u1290 0806  
                                  u1610 0A72                                    u1451 0FDC  
                                  u1531 0296                                    u1371 0904  
                                  u1291 0802                                    u1611 0A6E  
                                  u1460 0FFA                                    u1540 02F8  
                                  u1380 0920                                    u1461 0FF6  
                                  u1541 02F4                                    u1381 091C  
                                  u1390 0F48                                    u1470 100C  
                                  u1550 0352                                    u1391 0F44  
                                  u1471 1008                                    u1551 034E  
                                  u1560 03B0                                    u1480 0E56  
                                  u1561 03AC                                    u1481 0E52  
                                  u1570 040A                                    u1490 006E  
                                  u1571 0406                                    u1491 006A  
                                  u1580 09A4                                    u1581 09A0  
                                  u1590 0A14                                    u1591 0A10  
                                  i2l52 004E                                    i2l54 0056  
                                  _main 093C                                    fsr1h 000FE2  
                                  fsr2h 000FDA                                    indf2 000FDF  
                                  fsr1l 000FE1                                    fsr2l 000FD9  
                                  btemp 004F                                    start 005A  
                      __end_of_DAC_init 10EA                            ___param_bank 000000  
                                 ??_ISR 0001                              _Comp1_init 1076  
                          main@dawnhour 0044                         __end_of_TimeAvg 0C04  
                         ??_Lights_init 0001                                   ?_main 0001  
                       __end_of___awdiv 0CC8                         __end_of___awmod 0E2E  
                       ___awdiv@divisor 000C                         __end_of___lwmod 1076  
                       ___awdiv@counter 000E                                   _TMR0H 000FD4  
                                 _TMR0L 000FD3                            main@duskhour 0046  
                                 plusw2 000FDB                                   ttemp5 0050  
                                 ttemp6 0053                                   ttemp7 0057  
                                 status 000FD8                                   wtemp8 0050  
                       __initialization 10EA                        __end_of_LeapYear 0F3A  
                          __end_of_main 0AB2                _SunPleaseFixTheDamnClock 005E  
                                ??_main 003B                           __activetblptr 000000  
                      __end_of_TimeDiff 0D7E                           main@dayofweek 003D  
                   __end_of_Lights_init 10D6                     UpdateDawnDusk@phour 0009  
                      ___awdiv@dividend 000A                                  i2l1241 0026  
                                i2l1243 0028                                  i2l1253 0054  
                                i2l1245 0036                                  i2l1237 000A  
                                i2l1247 0044                                  i2l1239 001A  
                                i2l1249 0046                       _LEDarray_disp_bin 0F3A  
                            _SmallHours 0FAA                      ?_LEDarray_disp_bin 0001  
                         ??_Timer0_init 0001                               ??_TimeAvg 001E  
                           ?_Comp1_init 0001                               ??___awdiv 000E  
                             ??___awmod 0005                               ??___lwmod 0005  
                            _Timekeeper 04E6                     ??_LEDarray_disp_bin 0003  
                      ___awdiv@quotient 0010                         ___awmod@divisor 0003  
   SunPleaseFixTheDamnClock@pdawnminute 0026                                  isa$std 000001  
                       ___awmod@counter 0005                               ?_DAC_init 0001  
             __end_of_LEDarray_disp_bin 0FAA                              __accesstop 0060  
               __end_of__initialization 10EE                        LeapYear@leapyear 000A  
                      Timekeeper@pmonth 000D                           ___rparam_used 000001  
                       _Interrupts_init 10F8                          __pcstackCOMRAM 0001  
                       TimeDiff@minute1 0003                         TimeDiff@minute2 0007  
     SunPleaseFixTheDamnClock@avgminute 0037                     __end_of_Timer0_init 10BC  
                           _Lights_init 10BC     SunPleaseFixTheDamnClock@pduskminute 002A  
                            ??_DAC_init 0001       SunPleaseFixTheDamnClock@pdawnhour 0024  
                             ?_LeapYear 0006                          Timekeeper@pDST 0017  
                   __size_of_Comp1_init 0026                          Timekeeper@pday 000F  
                        main@dawnminute 0040                           TimeDiff@hour1 0001  
                         TimeDiff@hour2 0005       SunPleaseFixTheDamnClock@pduskhour 0028  
                           ?_SmallHours 0001                               ?_TimeDiff 0001  
                       TimeAvg@pavghour 001A                             ?_Timekeeper 000B  
                     TimeAvg@pavgminute 001C  SunPleaseFixTheDamnClock@timedifference 0039  
                               i2u76_40 001A                                 i2u76_41 0016  
                               i2u77_40 0036                                 i2u77_41 0032  
                               i2u78_40 0044                                 i2u78_41 0040  
                            ??_LeapYear 0008              __size_of_LEDarray_disp_bin 0070  
               __end_of_Interrupts_init 1104                          main@duskminute 0042  
                      SmallHours@minute 0003              ??_SunPleaseFixTheDamnClock 0031  
                               __Hparam 0000                              ??_TimeDiff 0009  
                               __Lparam 0000                                 _TimeAvg 0AB2  
                           _Timer0_init 109C                                 ___awdiv 0C04  
                               ___awmod 0D7E                                 ___lwmod 1012  
                               __pcinit 10EA                                 __ramtop 0E00  
                               __ptext0 093C                                 __ptext1 0E2E  
                               __ptext2 109C                                 __ptext3 04E6  
                               __ptext4 0EBC                                 __ptext5 1012  
                               __ptext6 005E                                 __ptext7 0AB2  
                               __ptext8 0D7E                                 __ptext9 0C04  
                          __size_of_ISR 0052                 __size_of_UpdateDawnDusk 008E  
                      ___awmod@dividend 0001                     __size_of_SmallHours 0068  
                               main@DST 003E                                 main@day 003F  
                  end_of_initialization 10EE                              _minutehand 004E  
                   __size_of_Timekeeper 0456                                 postdec1 000FE5  
                               postdec2 000FDD                            ??_Comp1_init 0001  
                               postinc1 000FE6                                 postinc2 000FDE  
                             _TRISAbits 000F81               UpdateDawnDusk@pdawnminute 0003  
                             _TRISFbits 000F86                               _TRISGbits 000F87  
                             _TRISHbits 000F88                       Timekeeper@pminute 0013  
                     __size_of_DAC_init 0014                      __end_of_Comp1_init 109C  
                           _CM1CON0bits 000ED0                             _CM1CON1bits 000ED1  
                      ?_Interrupts_init 0001                              main@minute 0049  
                          ?_Lights_init 0001                     start_initialization 10EA  
                           __end_of_ISR 005A         SunPleaseFixTheDamnClock@avghour 0035  
             UpdateDawnDusk@pduskminute 0007         SunPleaseFixTheDamnClock@pminute 002E  
                     __size_of_LeapYear 007E                            ??_SmallHours 0005  
                     __size_of_TimeDiff 00B6                            ??_Timekeeper 0019  
                        _UpdateDawnDusk 0E2E                         Timekeeper@phour 0011  
                       Timekeeper@pyear 000B                             __pbssCOMRAM 004D  
                    __end_of_SmallHours 1012           SunPleaseFixTheDamnClock@phour 002C  
                    __end_of_Timekeeper 093C                                ?_TimeAvg 0012  
                          TimeAvg@hour1 0012                            TimeAvg@hour2 0016  
                          ?_Timer0_init 0001                          TimeAvg@minute1 0014  
                        TimeAvg@minute2 0018                               __pintcode 0008  
                              ?___awdiv 000A                                ?___awmod 0001  
                              ?___lwmod 0001                  __end_of_UpdateDawnDusk 0EBC  
                 UpdateDawnDusk@pminute 000B                                _DAC_init 10D6  
                              _LATAbits 000F79                                _LATFbits 000F7E  
                              _LATGbits 000F7F                                _LATHbits 000F80  
                              _PIE0bits 000E29                                _PIE2bits 000E2B  
               UpdateDawnDusk@pdawnhour 0001                                _PIR0bits 000E33  
                              _PIR2bits 000E35                 UpdateDawnDusk@pduskhour 0005  
                       ?_UpdateDawnDusk 0001       __size_of_SunPleaseFixTheDamnClock 0488  
                  __size_of_Lights_init 001A               ?_SunPleaseFixTheDamnClock 0024  
                             main@month 0048                              _CM1NCHbits 000ED2  
                            _CM1PCHbits 000ED3                                _LeapYear 0EBC  
                              __Hrparam 0000                                _TimeDiff 0CC8  
                              __Lrparam 0000                        __size_of_TimeAvg 0152  
                      __size_of___awdiv 00C4                        __size_of___awmod 00B0  
                      __size_of___lwmod 0064                              _T0CON0bits 000FD5  
                            _T0CON1bits 000FD6                                _dawndusk 004D  
                              __ptext10 0CC8                                __ptext11 0FAA  
                              __ptext12 10BC                                __ptext13 0F3A  
                              __ptext14 10F8                                __ptext15 1076  
                              __ptext16 10D6                 LEDarray_disp_bin@number 0001  
                        SmallHours@hour 0001                           __size_of_main 0176  
                              isa$xinst 000000                __size_of_Interrupts_init 000C  
                              int$flags 004F                    __size_of_Timer0_init 0020  
                              main@hour 004B                                main@year 003B  
                            _INTCONbits 000FF2                     TimeAvg@HalfTimeDiff 0022  
           SunPleaseFixTheDamnClock@DST 0030                                intlevel2 0000  
                          _DAC1CON0bits 000EC6                            _DAC1CON1bits 000EC7  
                      ___lwmod@dividend 0001                            LeapYear@year 0006  
                       ___lwmod@divisor 0003                         ___lwmod@counter 0005  
      __end_of_SunPleaseFixTheDamnClock 04E6                        ??_UpdateDawnDusk 000D  
