

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Thu Nov 04 10:32:41 2021

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text10,global,reloc=2,class=CODE,delta=1
    19                           	psect	text11,global,reloc=2,class=CODE,delta=1
    20                           	psect	text12,global,reloc=2,class=CODE,delta=1
    21                           	psect	text13,global,reloc=2,class=CODE,delta=1
    22                           	psect	text14,global,reloc=2,class=CODE,delta=1
    23                           	psect	text15,global,reloc=2,class=CODE,delta=1
    24                           	psect	text16,global,reloc=2,class=CODE,delta=1
    25                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    26                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    27                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    28                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    29                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    30                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    31  0000                     
    32                           ; Version 2.35
    33                           ; Generated 05/05/2021 GMT
    34                           ; 
    35                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    36                           ; All rights reserved.
    37                           ; 
    38                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    39                           ; 
    40                           ; Redistribution and use in source and binary forms, with or without modification, are
    41                           ; permitted provided that the following conditions are met:
    42                           ; 
    43                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    44                           ;        conditions and the following disclaimer.
    45                           ; 
    46                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    47                           ;        of conditions and the following disclaimer in the documentation and/or other
    48                           ;        materials provided with the distribution. Publication is not required when
    49                           ;        this file is used in an embedded application.
    50                           ; 
    51                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    52                           ;        software without specific prior written permission.
    53                           ; 
    54                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    55                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    56                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    57                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    58                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    59                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    60                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    61                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    62                           ; 
    63                           ; 
    64                           ; Code-generator required, PIC18F67K40 Definitions
    65                           ; 
    66                           ; SFR Addresses
    67  0000                     _PIR2bits	set	3637
    68  0000                     _PIR0bits	set	3635
    69  0000                     _PIE2bits	set	3627
    70  0000                     _PIE0bits	set	3625
    71  0000                     _CM1CON1bits	set	3793
    72  0000                     _CM1CON0bits	set	3792
    73  0000                     _CM1PCHbits	set	3795
    74  0000                     _CM1NCHbits	set	3794
    75  0000                     _DAC1CON1bits	set	3783
    76  0000                     _DAC1CON0bits	set	3782
    77  0000                     _T0CON0bits	set	4053
    78  0000                     _T0CON1bits	set	4054
    79  0000                     _TRISHbits	set	3976
    80  0000                     _TRISAbits	set	3969
    81  0000                     _TRISGbits	set	3975
    82  0000                     _LATFbits	set	3966
    83  0000                     _LATAbits	set	3961
    84  0000                     _LATGbits	set	3967
    85  0000                     _LATHbits	set	3968
    86  0000                     _TMR0L	set	4051
    87  0000                     _TMR0H	set	4052
    88  0000                     _INTCONbits	set	4082
    89  0000                     _TRISFbits	set	3974
    90                           
    91                           ; #config settings
    92                           
    93                           	psect	cinit
    94  0010F2                     __pcinit:
    95                           	callstack 0
    96  0010F2                     start_initialization:
    97                           	callstack 0
    98  0010F2                     __initialization:
    99                           	callstack 0
   100                           
   101                           ; Clear objects allocated to COMRAM (2 bytes)
   102  0010F2  6A4E               	clrf	(__pbssCOMRAM+1)& (0+255),c
   103  0010F4  6A4D               	clrf	__pbssCOMRAM& (0+255),c
   104  0010F6                     end_of_initialization:
   105                           	callstack 0
   106  0010F6                     __end_of__initialization:
   107                           	callstack 0
   108  0010F6  904F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   109  0010F8  924F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   110  0010FA  0100               	movlb	0
   111  0010FC  EF36  F004         	goto	_main	;jump to C main() function
   112                           
   113                           	psect	bssCOMRAM
   114  00004D                     __pbssCOMRAM:
   115                           	callstack 0
   116  00004D                     _dawndusk:
   117                           	callstack 0
   118  00004D                     	ds	1
   119  00004E                     _minutehand:
   120                           	callstack 0
   121  00004E                     	ds	1
   122                           
   123                           	psect	cstackCOMRAM
   124  000001                     __pcstackCOMRAM:
   125                           	callstack 0
   126  000001                     ?_TimeDiff:
   127                           	callstack 0
   128  000001                     ?___awmod:
   129                           	callstack 0
   130  000001                     ?___lwmod:
   131                           	callstack 0
   132  000001                     LEDarray_disp_bin@number:
   133                           	callstack 0
   134  000001                     SmallHours@hour:
   135                           	callstack 0
   136  000001                     TimeDiff@hour1:
   137                           	callstack 0
   138  000001                     UpdateDawnDusk@pdawnhour:
   139                           	callstack 0
   140  000001                     ___awmod@dividend:
   141                           	callstack 0
   142  000001                     ___lwmod@dividend:
   143                           	callstack 0
   144                           
   145                           ; 2 bytes @ 0x0
   146  000001                     	ds	2
   147  000003                     SmallHours@minute:
   148                           	callstack 0
   149  000003                     TimeDiff@minute1:
   150                           	callstack 0
   151  000003                     UpdateDawnDusk@pdawnminute:
   152                           	callstack 0
   153  000003                     ___awmod@divisor:
   154                           	callstack 0
   155  000003                     ___lwmod@divisor:
   156                           	callstack 0
   157                           
   158                           ; 2 bytes @ 0x2
   159  000003                     	ds	2
   160  000005                     ___awmod@counter:
   161                           	callstack 0
   162  000005                     ___lwmod@counter:
   163                           	callstack 0
   164  000005                     TimeDiff@hour2:
   165                           	callstack 0
   166  000005                     UpdateDawnDusk@pduskhour:
   167                           	callstack 0
   168                           
   169                           ; 2 bytes @ 0x4
   170  000005                     	ds	1
   171  000006                     ___awmod@sign:
   172                           	callstack 0
   173  000006                     LeapYear@year:
   174                           	callstack 0
   175                           
   176                           ; 2 bytes @ 0x5
   177  000006                     	ds	1
   178  000007                     TimeDiff@minute2:
   179                           	callstack 0
   180  000007                     UpdateDawnDusk@pduskminute:
   181                           	callstack 0
   182                           
   183                           ; 2 bytes @ 0x6
   184  000007                     	ds	1
   185  000008                     ??_LeapYear:
   186                           
   187                           ; 1 bytes @ 0x7
   188  000008                     	ds	1
   189  000009                     ??_TimeDiff:
   190  000009                     UpdateDawnDusk@phour:
   191                           	callstack 0
   192                           
   193                           ; 2 bytes @ 0x8
   194  000009                     	ds	1
   195  00000A                     ?___awdiv:
   196                           	callstack 0
   197  00000A                     LeapYear@leapyear:
   198                           	callstack 0
   199  00000A                     ___awdiv@dividend:
   200                           	callstack 0
   201                           
   202                           ; 2 bytes @ 0x9
   203  00000A                     	ds	1
   204  00000B                     Timekeeper@pyear:
   205                           	callstack 0
   206  00000B                     UpdateDawnDusk@pminute:
   207                           	callstack 0
   208                           
   209                           ; 2 bytes @ 0xA
   210  00000B                     	ds	1
   211  00000C                     ___awdiv@divisor:
   212                           	callstack 0
   213                           
   214                           ; 2 bytes @ 0xB
   215  00000C                     	ds	1
   216  00000D                     UpdateDawnDusk@DST:
   217                           	callstack 0
   218  00000D                     Timekeeper@pmonth:
   219                           	callstack 0
   220                           
   221                           ; 2 bytes @ 0xC
   222  00000D                     	ds	1
   223  00000E                     ??_UpdateDawnDusk:
   224  00000E                     ___awdiv@counter:
   225                           	callstack 0
   226                           
   227                           ; 1 bytes @ 0xD
   228  00000E                     	ds	1
   229  00000F                     ___awdiv@sign:
   230                           	callstack 0
   231  00000F                     Timekeeper@pday:
   232                           	callstack 0
   233                           
   234                           ; 2 bytes @ 0xE
   235  00000F                     	ds	1
   236  000010                     ___awdiv@quotient:
   237                           	callstack 0
   238                           
   239                           ; 2 bytes @ 0xF
   240  000010                     	ds	1
   241  000011                     Timekeeper@phour:
   242                           	callstack 0
   243                           
   244                           ; 2 bytes @ 0x10
   245  000011                     	ds	1
   246  000012                     TimeAvg@hour1:
   247                           	callstack 0
   248                           
   249                           ; 2 bytes @ 0x11
   250  000012                     	ds	1
   251  000013                     Timekeeper@pminute:
   252                           	callstack 0
   253                           
   254                           ; 2 bytes @ 0x12
   255  000013                     	ds	1
   256  000014                     TimeAvg@minute1:
   257                           	callstack 0
   258                           
   259                           ; 2 bytes @ 0x13
   260  000014                     	ds	1
   261  000015                     Timekeeper@pdayofweek:
   262                           	callstack 0
   263                           
   264                           ; 2 bytes @ 0x14
   265  000015                     	ds	1
   266  000016                     TimeAvg@hour2:
   267                           	callstack 0
   268                           
   269                           ; 2 bytes @ 0x15
   270  000016                     	ds	1
   271  000017                     Timekeeper@pDST:
   272                           	callstack 0
   273                           
   274                           ; 2 bytes @ 0x16
   275  000017                     	ds	1
   276  000018                     TimeAvg@minute2:
   277                           	callstack 0
   278                           
   279                           ; 2 bytes @ 0x17
   280  000018                     	ds	1
   281  000019                     
   282                           ; 1 bytes @ 0x18
   283  000019                     	ds	1
   284  00001A                     TimeAvg@pavghour:
   285                           	callstack 0
   286                           
   287                           ; 2 bytes @ 0x19
   288  00001A                     	ds	2
   289  00001C                     TimeAvg@pavgminute:
   290                           	callstack 0
   291                           
   292                           ; 2 bytes @ 0x1B
   293  00001C                     	ds	2
   294  00001E                     ??_TimeAvg:
   295                           
   296                           ; 1 bytes @ 0x1D
   297  00001E                     	ds	4
   298  000022                     TimeAvg@HalfTimeDiff:
   299                           	callstack 0
   300                           
   301                           ; 2 bytes @ 0x21
   302  000022                     	ds	2
   303  000024                     SunPleaseFixTheDamnClock@pdawnhour:
   304                           	callstack 0
   305                           
   306                           ; 2 bytes @ 0x23
   307  000024                     	ds	2
   308  000026                     SunPleaseFixTheDamnClock@pdawnminute:
   309                           	callstack 0
   310                           
   311                           ; 2 bytes @ 0x25
   312  000026                     	ds	2
   313  000028                     SunPleaseFixTheDamnClock@pduskhour:
   314                           	callstack 0
   315                           
   316                           ; 2 bytes @ 0x27
   317  000028                     	ds	2
   318  00002A                     SunPleaseFixTheDamnClock@pduskminute:
   319                           	callstack 0
   320                           
   321                           ; 2 bytes @ 0x29
   322  00002A                     	ds	2
   323  00002C                     SunPleaseFixTheDamnClock@phour:
   324                           	callstack 0
   325                           
   326                           ; 2 bytes @ 0x2B
   327  00002C                     	ds	2
   328  00002E                     SunPleaseFixTheDamnClock@pminute:
   329                           	callstack 0
   330                           
   331                           ; 2 bytes @ 0x2D
   332  00002E                     	ds	2
   333  000030                     SunPleaseFixTheDamnClock@DST:
   334                           	callstack 0
   335                           
   336                           ; 1 bytes @ 0x2F
   337  000030                     	ds	1
   338  000031                     ??_SunPleaseFixTheDamnClock:
   339                           
   340                           ; 1 bytes @ 0x30
   341  000031                     	ds	4
   342  000035                     SunPleaseFixTheDamnClock@avghour:
   343                           	callstack 0
   344                           
   345                           ; 2 bytes @ 0x34
   346  000035                     	ds	2
   347  000037                     SunPleaseFixTheDamnClock@avgminute:
   348                           	callstack 0
   349                           
   350                           ; 2 bytes @ 0x36
   351  000037                     	ds	2
   352  000039                     SunPleaseFixTheDamnClock@timedifference:
   353                           	callstack 0
   354                           
   355                           ; 2 bytes @ 0x38
   356  000039                     	ds	2
   357  00003B                     main@year:
   358                           	callstack 0
   359                           
   360                           ; 2 bytes @ 0x3A
   361  00003B                     	ds	2
   362  00003D                     main@dayofweek:
   363                           	callstack 0
   364                           
   365                           ; 1 bytes @ 0x3C
   366  00003D                     	ds	1
   367  00003E                     main@DST:
   368                           	callstack 0
   369                           
   370                           ; 1 bytes @ 0x3D
   371  00003E                     	ds	1
   372  00003F                     main@dawnhour:
   373                           	callstack 0
   374                           
   375                           ; 2 bytes @ 0x3E
   376  00003F                     	ds	2
   377  000041                     main@duskhour:
   378                           	callstack 0
   379                           
   380                           ; 2 bytes @ 0x40
   381  000041                     	ds	2
   382  000043                     main@day:
   383                           	callstack 0
   384                           
   385                           ; 1 bytes @ 0x42
   386  000043                     	ds	1
   387  000044                     main@dawnminute:
   388                           	callstack 0
   389                           
   390                           ; 2 bytes @ 0x43
   391  000044                     	ds	2
   392  000046                     main@duskminute:
   393                           	callstack 0
   394                           
   395                           ; 2 bytes @ 0x45
   396  000046                     	ds	2
   397  000048                     main@month:
   398                           	callstack 0
   399                           
   400                           ; 1 bytes @ 0x47
   401  000048                     	ds	1
   402  000049                     main@minute:
   403                           	callstack 0
   404                           
   405                           ; 2 bytes @ 0x48
   406  000049                     	ds	2
   407  00004B                     main@hour:
   408                           	callstack 0
   409                           
   410                           ; 2 bytes @ 0x4A
   411  00004B                     	ds	2
   412                           
   413 ;;
   414 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   415 ;;
   416 ;; *************** function _main *****************
   417 ;; Defined at:
   418 ;;		line 17 in file "main.c"
   419 ;; Parameters:    Size  Location     Type
   420 ;;		None
   421 ;; Auto vars:     Size  Location     Type
   422 ;;  hour            2   74[COMRAM] int 
   423 ;;  minute          2   72[COMRAM] int 
   424 ;;  duskminute      2   69[COMRAM] int 
   425 ;;  dawnminute      2   67[COMRAM] int 
   426 ;;  duskhour        2   64[COMRAM] int 
   427 ;;  dawnhour        2   62[COMRAM] int 
   428 ;;  year            2   58[COMRAM] unsigned int 
   429 ;;  month           1   71[COMRAM] unsigned char 
   430 ;;  day             1   66[COMRAM] unsigned char 
   431 ;;  DST             1   61[COMRAM] unsigned char 
   432 ;;  dayofweek       1   60[COMRAM] unsigned char 
   433 ;; Return value:  Size  Location     Type
   434 ;;                  1    wreg      void 
   435 ;; Registers used:
   436 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
   437 ;; Tracked objects:
   438 ;;		On entry : 0/0
   439 ;;		On exit  : 0/0
   440 ;;		Unchanged: 0/0
   441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   442 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   443 ;;      Locals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   444 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   445 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   446 ;;Total ram usage:       18 bytes
   447 ;; Hardware stack levels required when called: 4
   448 ;; This function calls:
   449 ;;		_Comp1_init
   450 ;;		_Interrupts_init
   451 ;;		_LEDarray_disp_bin
   452 ;;		_Lights_init
   453 ;;		_SmallHours
   454 ;;		_SunPleaseFixTheDamnClock
   455 ;;		_Timekeeper
   456 ;;		_Timer0_init
   457 ;;		_UpdateDawnDusk
   458 ;; This function is called by:
   459 ;;		Startup code after reset
   460 ;; This function uses a non-reentrant model
   461 ;;
   462                           
   463                           	psect	text0
   464  00086C                     __ptext0:
   465                           	callstack 0
   466  00086C                     _main:
   467                           	callstack 27
   468  00086C                     
   469                           ;main.c: 19:     unsigned int year = 2021;
   470  00086C  0E07               	movlw	7
   471  00086E  6E3C               	movwf	(main@year+1)^0,c
   472  000870  0EE5               	movlw	229
   473  000872  6E3B               	movwf	main@year^0,c
   474                           
   475                           ;main.c: 20:     char month = 11;
   476  000874  0E0B               	movlw	11
   477  000876  6E48               	movwf	main@month^0,c
   478                           
   479                           ;main.c: 21:     char day = 2;
   480  000878  0E02               	movlw	2
   481  00087A  6E43               	movwf	main@day^0,c
   482                           
   483                           ;main.c: 22:     int hour = 12;
   484  00087C  0E00               	movlw	0
   485  00087E  6E4C               	movwf	(main@hour+1)^0,c
   486  000880  0E0C               	movlw	12
   487  000882  6E4B               	movwf	main@hour^0,c
   488                           
   489                           ;main.c: 23:     int minute = 0;
   490  000884  0E00               	movlw	0
   491  000886  6E4A               	movwf	(main@minute+1)^0,c
   492  000888  0E00               	movlw	0
   493  00088A  6E49               	movwf	main@minute^0,c
   494                           
   495                           ;main.c: 24:     char dayofweek = 2;
   496  00088C  0E02               	movlw	2
   497  00088E  6E3D               	movwf	main@dayofweek^0,c
   498                           
   499                           ;main.c: 25:     char DST = 0;
   500  000890  0E00               	movlw	0
   501  000892  6E3E               	movwf	main@DST^0,c
   502                           
   503                           ;main.c: 26:     int dawnhour = 7;
   504  000894  0E00               	movlw	0
   505  000896  6E40               	movwf	(main@dawnhour+1)^0,c
   506  000898  0E07               	movlw	7
   507  00089A  6E3F               	movwf	main@dawnhour^0,c
   508                           
   509                           ;main.c: 27:     int dawnminute = 0;
   510  00089C  0E00               	movlw	0
   511  00089E  6E45               	movwf	(main@dawnminute+1)^0,c
   512  0008A0  0E00               	movlw	0
   513  0008A2  6E44               	movwf	main@dawnminute^0,c
   514                           
   515                           ;main.c: 28:     int duskhour = 17;
   516  0008A4  0E00               	movlw	0
   517  0008A6  6E42               	movwf	(main@duskhour+1)^0,c
   518  0008A8  0E11               	movlw	17
   519  0008AA  6E41               	movwf	main@duskhour^0,c
   520                           
   521                           ;main.c: 29:     int duskminute = 0;
   522  0008AC  0E00               	movlw	0
   523  0008AE  6E47               	movwf	(main@duskminute+1)^0,c
   524  0008B0  0E00               	movlw	0
   525  0008B2  6E46               	movwf	main@duskminute^0,c
   526  0008B4                     
   527                           ;main.c: 32:     Lights_init();
   528  0008B4  EC62  F008         	call	_Lights_init	;wreg free
   529                           
   530                           ;main.c: 33:     Timer0_init();
   531  0008B8  EC52  F008         	call	_Timer0_init	;wreg free
   532                           
   533                           ;main.c: 34:     Comp1_init();
   534  0008BC  EC3F  F008         	call	_Comp1_init	;wreg free
   535  0008C0                     
   536                           ;main.c: 35:     Interrupts_init();
   537  0008C0  EC80  F008         	call	_Interrupts_init	;wreg free
   538  0008C4                     l81:
   539                           
   540                           ;main.c: 38:         if (minutehand) {
   541  0008C4  504E               	movf	_minutehand^0,w,c
   542  0008C6  B4D8               	btfsc	status,2,c
   543  0008C8  EF68  F004         	goto	u1621
   544  0008CC  EF6A  F004         	goto	u1620
   545  0008D0                     u1621:
   546  0008D0  EF8A  F004         	goto	l1630
   547  0008D4                     u1620:
   548  0008D4                     
   549                           ;main.c: 39:             Timekeeper(&year, &month, &day, &hour, &minute, &dayofweek, &DS
      +                          T);
   550  0008D4  0E3B               	movlw	low main@year
   551  0008D6  6E0B               	movwf	Timekeeper@pyear^0,c
   552  0008D8  0E00               	movlw	high main@year
   553  0008DA  6E0C               	movwf	(Timekeeper@pyear+1)^0,c
   554  0008DC  0E48               	movlw	low main@month
   555  0008DE  6E0D               	movwf	Timekeeper@pmonth^0,c
   556  0008E0  0E00               	movlw	high main@month
   557  0008E2  6E0E               	movwf	(Timekeeper@pmonth+1)^0,c
   558  0008E4  0E43               	movlw	low main@day
   559  0008E6  6E0F               	movwf	Timekeeper@pday^0,c
   560  0008E8  0E00               	movlw	high main@day
   561  0008EA  6E10               	movwf	(Timekeeper@pday+1)^0,c
   562  0008EC  0E4B               	movlw	low main@hour
   563  0008EE  6E11               	movwf	Timekeeper@phour^0,c
   564  0008F0  0E00               	movlw	high main@hour
   565  0008F2  6E12               	movwf	(Timekeeper@phour+1)^0,c
   566  0008F4  0E49               	movlw	low main@minute
   567  0008F6  6E13               	movwf	Timekeeper@pminute^0,c
   568  0008F8  0E00               	movlw	high main@minute
   569  0008FA  6E14               	movwf	(Timekeeper@pminute+1)^0,c
   570  0008FC  0E3D               	movlw	low main@dayofweek
   571  0008FE  6E15               	movwf	Timekeeper@pdayofweek^0,c
   572  000900  0E00               	movlw	high main@dayofweek
   573  000902  6E16               	movwf	(Timekeeper@pdayofweek+1)^0,c
   574  000904  0E3E               	movlw	low main@DST
   575  000906  6E17               	movwf	Timekeeper@pDST^0,c
   576  000908  0E00               	movlw	high main@DST
   577  00090A  6E18               	movwf	(Timekeeper@pDST+1)^0,c
   578  00090C  EC2F  F000         	call	_Timekeeper	;wreg free
   579  000910                     
   580                           ;main.c: 40:             minutehand = 0;
   581  000910  0E00               	movlw	0
   582  000912  6E4E               	movwf	_minutehand^0,c
   583  000914                     l1630:
   584                           
   585                           ;main.c: 43:         LEDarray_disp_bin(hour);
   586  000914  C04B  F001         	movff	main@hour,LEDarray_disp_bin@number
   587  000918  C04C  F002         	movff	main@hour+1,LEDarray_disp_bin@number+1
   588  00091C  ECA1  F007         	call	_LEDarray_disp_bin	;wreg free
   589  000920                     
   590                           ;main.c: 45:         SmallHours(hour, minute);
   591  000920  C04B  F001         	movff	main@hour,SmallHours@hour
   592  000924  C04C  F002         	movff	main@hour+1,SmallHours@hour+1
   593  000928  C049  F003         	movff	main@minute,SmallHours@minute
   594  00092C  C04A  F004         	movff	main@minute+1,SmallHours@minute+1
   595  000930  ECD9  F007         	call	_SmallHours	;wreg free
   596  000934                     
   597                           ;main.c: 47:         if (dawndusk) {
   598  000934  504D               	movf	_dawndusk^0,w,c
   599  000936  B4D8               	btfsc	status,2,c
   600  000938  EFA0  F004         	goto	u1631
   601  00093C  EFA2  F004         	goto	u1630
   602  000940                     u1631:
   603  000940  EFC0  F004         	goto	l1640
   604  000944                     u1630:
   605  000944                     
   606                           ;main.c: 48:             UpdateDawnDusk(&dawnhour, &dawnminute, &duskhour, &duskminute, 
      +                          &hour, &minute, DST);
   607  000944  0E3F               	movlw	low main@dawnhour
   608  000946  6E01               	movwf	UpdateDawnDusk@pdawnhour^0,c
   609  000948  0E00               	movlw	high main@dawnhour
   610  00094A  6E02               	movwf	(UpdateDawnDusk@pdawnhour+1)^0,c
   611  00094C  0E44               	movlw	low main@dawnminute
   612  00094E  6E03               	movwf	UpdateDawnDusk@pdawnminute^0,c
   613  000950  0E00               	movlw	high main@dawnminute
   614  000952  6E04               	movwf	(UpdateDawnDusk@pdawnminute+1)^0,c
   615  000954  0E41               	movlw	low main@duskhour
   616  000956  6E05               	movwf	UpdateDawnDusk@pduskhour^0,c
   617  000958  0E00               	movlw	high main@duskhour
   618  00095A  6E06               	movwf	(UpdateDawnDusk@pduskhour+1)^0,c
   619  00095C  0E46               	movlw	low main@duskminute
   620  00095E  6E07               	movwf	UpdateDawnDusk@pduskminute^0,c
   621  000960  0E00               	movlw	high main@duskminute
   622  000962  6E08               	movwf	(UpdateDawnDusk@pduskminute+1)^0,c
   623  000964  0E4B               	movlw	low main@hour
   624  000966  6E09               	movwf	UpdateDawnDusk@phour^0,c
   625  000968  0E00               	movlw	high main@hour
   626  00096A  6E0A               	movwf	(UpdateDawnDusk@phour+1)^0,c
   627  00096C  0E49               	movlw	low main@minute
   628  00096E  6E0B               	movwf	UpdateDawnDusk@pminute^0,c
   629  000970  0E00               	movlw	high main@minute
   630  000972  6E0C               	movwf	(UpdateDawnDusk@pminute+1)^0,c
   631  000974  C03E  F00D         	movff	main@DST,UpdateDawnDusk@DST
   632  000978  ECF3  F004         	call	_UpdateDawnDusk	;wreg free
   633  00097C                     
   634                           ;main.c: 49:             dawndusk = 0;
   635  00097C  0E00               	movlw	0
   636  00097E  6E4D               	movwf	_dawndusk^0,c
   637  000980                     l1640:
   638                           
   639                           ;main.c: 52:         if (hour == 12 && minute == 0) {
   640  000980  0E0C               	movlw	12
   641  000982  184B               	xorwf	main@hour^0,w,c
   642  000984  104C               	iorwf	(main@hour+1)^0,w,c
   643  000986  A4D8               	btfss	status,2,c
   644  000988  EFC8  F004         	goto	u1641
   645  00098C  EFCA  F004         	goto	u1640
   646  000990                     u1641:
   647  000990  EF62  F004         	goto	l81
   648  000994                     u1640:
   649  000994  5049               	movf	main@minute^0,w,c
   650  000996  104A               	iorwf	(main@minute+1)^0,w,c
   651  000998  A4D8               	btfss	status,2,c
   652  00099A  EFD1  F004         	goto	u1651
   653  00099E  EFD3  F004         	goto	u1650
   654  0009A2                     u1651:
   655  0009A2  EF62  F004         	goto	l81
   656  0009A6                     u1650:
   657  0009A6                     
   658                           ;main.c: 53:             SunPleaseFixTheDamnClock(&dawnhour, &dawnminute, &duskhour, &du
      +                          skminute, &hour, &minute, DST);
   659  0009A6  0E3F               	movlw	low main@dawnhour
   660  0009A8  6E24               	movwf	SunPleaseFixTheDamnClock@pdawnhour^0,c
   661  0009AA  0E00               	movlw	high main@dawnhour
   662  0009AC  6E25               	movwf	(SunPleaseFixTheDamnClock@pdawnhour+1)^0,c
   663  0009AE  0E44               	movlw	low main@dawnminute
   664  0009B0  6E26               	movwf	SunPleaseFixTheDamnClock@pdawnminute^0,c
   665  0009B2  0E00               	movlw	high main@dawnminute
   666  0009B4  6E27               	movwf	(SunPleaseFixTheDamnClock@pdawnminute+1)^0,c
   667  0009B6  0E41               	movlw	low main@duskhour
   668  0009B8  6E28               	movwf	SunPleaseFixTheDamnClock@pduskhour^0,c
   669  0009BA  0E00               	movlw	high main@duskhour
   670  0009BC  6E29               	movwf	(SunPleaseFixTheDamnClock@pduskhour+1)^0,c
   671  0009BE  0E46               	movlw	low main@duskminute
   672  0009C0  6E2A               	movwf	SunPleaseFixTheDamnClock@pduskminute^0,c
   673  0009C2  0E00               	movlw	high main@duskminute
   674  0009C4  6E2B               	movwf	(SunPleaseFixTheDamnClock@pduskminute+1)^0,c
   675  0009C6  0E4B               	movlw	low main@hour
   676  0009C8  6E2C               	movwf	SunPleaseFixTheDamnClock@phour^0,c
   677  0009CA  0E00               	movlw	high main@hour
   678  0009CC  6E2D               	movwf	(SunPleaseFixTheDamnClock@phour+1)^0,c
   679  0009CE  0E49               	movlw	low main@minute
   680  0009D0  6E2E               	movwf	SunPleaseFixTheDamnClock@pminute^0,c
   681  0009D2  0E00               	movlw	high main@minute
   682  0009D4  6E2F               	movwf	(SunPleaseFixTheDamnClock@pminute+1)^0,c
   683  0009D6  C03E  F030         	movff	main@DST,SunPleaseFixTheDamnClock@DST
   684  0009DA  EC5A  F002         	call	_SunPleaseFixTheDamnClock	;wreg free
   685  0009DE  EF62  F004         	goto	l81
   686  0009E2  EF2D  F000         	goto	start
   687  0009E6                     __end_of_main:
   688                           	callstack 0
   689                           
   690 ;; *************** function _UpdateDawnDusk *****************
   691 ;; Defined at:
   692 ;;		line 153 in file "timers.c"
   693 ;; Parameters:    Size  Location     Type
   694 ;;  pdawnhour       2    0[COMRAM] PTR int 
   695 ;;		 -> main@dawnhour(2), 
   696 ;;  pdawnminute     2    2[COMRAM] PTR int 
   697 ;;		 -> main@dawnminute(2), 
   698 ;;  pduskhour       2    4[COMRAM] PTR int 
   699 ;;		 -> main@duskhour(2), 
   700 ;;  pduskminute     2    6[COMRAM] PTR int 
   701 ;;		 -> main@duskminute(2), 
   702 ;;  phour           2    8[COMRAM] PTR int 
   703 ;;		 -> main@hour(2), 
   704 ;;  pminute         2   10[COMRAM] PTR int 
   705 ;;		 -> main@minute(2), 
   706 ;;  DST             1   12[COMRAM] unsigned char 
   707 ;; Auto vars:     Size  Location     Type
   708 ;;		None
   709 ;; Return value:  Size  Location     Type
   710 ;;                  1    wreg      void 
   711 ;; Registers used:
   712 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
   713 ;; Tracked objects:
   714 ;;		On entry : 0/0
   715 ;;		On exit  : 0/0
   716 ;;		Unchanged: 0/0
   717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   718 ;;      Params:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   719 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   720 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   721 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   722 ;;Total ram usage:       17 bytes
   723 ;; Hardware stack levels used: 1
   724 ;; Hardware stack levels required when called: 1
   725 ;; This function calls:
   726 ;;		Nothing
   727 ;; This function is called by:
   728 ;;		_main
   729 ;; This function uses a non-reentrant model
   730 ;;
   731                           
   732                           	psect	text1
   733  0009E6                     __ptext1:
   734                           	callstack 0
   735  0009E6                     _UpdateDawnDusk:
   736                           	callstack 29
   737  0009E6                     
   738                           ;timers.c: 153: void UpdateDawnDusk(int *pdawnhour, int *pdawnminute, int *pduskhour, in
      +                          t *pduskminute, int *phour, int *pminute, char DST);timers.c: 154: {;timers.c: 155:     
      +                          if (*phour < 12 && !LATHbits.LATH3) {
   739  0009E6  C009  FFD9         	movff	UpdateDawnDusk@phour,fsr2l
   740  0009EA  C00A  FFDA         	movff	UpdateDawnDusk@phour+1,fsr2h
   741  0009EE  0E01               	movlw	1
   742  0009F0  BEDB               	btfsc	plusw2,7,c
   743  0009F2  EF07  F005         	goto	u1500
   744  0009F6  0E01               	movlw	1
   745  0009F8  50DB               	movf	plusw2,w,c
   746  0009FA  E107               	bnz	u1501
   747  0009FC  0E0C               	movlw	12
   748  0009FE  5CDE               	subwf	postinc2,w,c
   749  000A00  B0D8               	btfsc	status,0,c
   750  000A02  EF05  F005         	goto	u1501
   751  000A06  EF07  F005         	goto	u1500
   752  000A0A                     u1501:
   753  000A0A  EF56  F005         	goto	l203
   754  000A0E                     u1500:
   755  000A0E  B680               	btfsc	128,3,c	;volatile
   756  000A10  EF0C  F005         	goto	u1511
   757  000A14  EF0E  F005         	goto	u1510
   758  000A18                     u1511:
   759  000A18  EF56  F005         	goto	l203
   760  000A1C                     u1510:
   761  000A1C                     
   762                           ;timers.c: 156:         if (DST) {
   763  000A1C  500D               	movf	UpdateDawnDusk@DST^0,w,c
   764  000A1E  B4D8               	btfsc	status,2,c
   765  000A20  EF14  F005         	goto	u1521
   766  000A24  EF16  F005         	goto	u1520
   767  000A28                     u1521:
   768  000A28  EF3C  F005         	goto	l1578
   769  000A2C                     u1520:
   770  000A2C                     
   771                           ;timers.c: 157:             *pdawnhour = *phour - 1;
   772  000A2C  0EFF               	movlw	255
   773  000A2E  6E0E               	movwf	??_UpdateDawnDusk^0,c
   774  000A30  0EFF               	movlw	255
   775  000A32  6E0F               	movwf	(??_UpdateDawnDusk+1)^0,c
   776  000A34  C009  FFD9         	movff	UpdateDawnDusk@phour,fsr2l
   777  000A38  C00A  FFDA         	movff	UpdateDawnDusk@phour+1,fsr2h
   778  000A3C  CFDE F010          	movff	postinc2,??_UpdateDawnDusk+2
   779  000A40  CFDD F011          	movff	postdec2,??_UpdateDawnDusk+3
   780  000A44  500E               	movf	??_UpdateDawnDusk^0,w,c
   781  000A46  2610               	addwf	(??_UpdateDawnDusk+2)^0,f,c
   782  000A48  500F               	movf	(??_UpdateDawnDusk+1)^0,w,c
   783  000A4A  2211               	addwfc	(??_UpdateDawnDusk+3)^0,f,c
   784  000A4C  C001  FFD9         	movff	UpdateDawnDusk@pdawnhour,fsr2l
   785  000A50  C002  FFDA         	movff	UpdateDawnDusk@pdawnhour+1,fsr2h
   786  000A54  C010  FFDE         	movff	??_UpdateDawnDusk+2,postinc2
   787  000A58  C011  FFDD         	movff	??_UpdateDawnDusk+3,postdec2
   788  000A5C                     
   789                           ;timers.c: 158:             *pdawnminute = *pminute;
   790  000A5C  C00B  FFD9         	movff	UpdateDawnDusk@pminute,fsr2l
   791  000A60  C00C  FFDA         	movff	UpdateDawnDusk@pminute+1,fsr2h
   792  000A64  C003  FFE1         	movff	UpdateDawnDusk@pdawnminute,fsr1l
   793  000A68  C004  FFE2         	movff	UpdateDawnDusk@pdawnminute+1,fsr1h
   794  000A6C  CFDE FFE6          	movff	postinc2,postinc1
   795  000A70  CFDD FFE5          	movff	postdec2,postdec1
   796                           
   797                           ;timers.c: 159:         } else {
   798  000A74  EFA3  F005         	goto	l210
   799  000A78                     l1578:
   800                           
   801                           ;timers.c: 160:             *pdawnhour = *phour;
   802  000A78  C009  FFD9         	movff	UpdateDawnDusk@phour,fsr2l
   803  000A7C  C00A  FFDA         	movff	UpdateDawnDusk@phour+1,fsr2h
   804  000A80  C001  FFE1         	movff	UpdateDawnDusk@pdawnhour,fsr1l
   805  000A84  C002  FFE2         	movff	UpdateDawnDusk@pdawnhour+1,fsr1h
   806  000A88  CFDE FFE6          	movff	postinc2,postinc1
   807  000A8C  CFDD FFE5          	movff	postdec2,postdec1
   808                           
   809                           ;timers.c: 161:             *pdawnminute = *pminute;
   810  000A90  C00B  FFD9         	movff	UpdateDawnDusk@pminute,fsr2l
   811  000A94  C00C  FFDA         	movff	UpdateDawnDusk@pminute+1,fsr2h
   812  000A98  C003  FFE1         	movff	UpdateDawnDusk@pdawnminute,fsr1l
   813  000A9C  C004  FFE2         	movff	UpdateDawnDusk@pdawnminute+1,fsr1h
   814  000AA0  CFDE FFE6          	movff	postinc2,postinc1
   815  000AA4  CFDD FFE5          	movff	postdec2,postdec1
   816  000AA8  EFA3  F005         	goto	l210
   817  000AAC                     l203:
   818  000AAC  A680               	btfss	128,3,c	;volatile
   819  000AAE  EF5B  F005         	goto	u1531
   820  000AB2  EF5D  F005         	goto	u1530
   821  000AB6                     u1531:
   822  000AB6  EFA3  F005         	goto	l210
   823  000ABA                     u1530:
   824  000ABA                     
   825                           ;timers.c: 164:         if (DST) {
   826  000ABA  500D               	movf	UpdateDawnDusk@DST^0,w,c
   827  000ABC  B4D8               	btfsc	status,2,c
   828  000ABE  EF63  F005         	goto	u1541
   829  000AC2  EF65  F005         	goto	u1540
   830  000AC6                     u1541:
   831  000AC6  EF8B  F005         	goto	l1586
   832  000ACA                     u1540:
   833  000ACA                     
   834                           ;timers.c: 165:             *pduskhour = *phour - 1;
   835  000ACA  0EFF               	movlw	255
   836  000ACC  6E0E               	movwf	??_UpdateDawnDusk^0,c
   837  000ACE  0EFF               	movlw	255
   838  000AD0  6E0F               	movwf	(??_UpdateDawnDusk+1)^0,c
   839  000AD2  C009  FFD9         	movff	UpdateDawnDusk@phour,fsr2l
   840  000AD6  C00A  FFDA         	movff	UpdateDawnDusk@phour+1,fsr2h
   841  000ADA  CFDE F010          	movff	postinc2,??_UpdateDawnDusk+2
   842  000ADE  CFDD F011          	movff	postdec2,??_UpdateDawnDusk+3
   843  000AE2  500E               	movf	??_UpdateDawnDusk^0,w,c
   844  000AE4  2610               	addwf	(??_UpdateDawnDusk+2)^0,f,c
   845  000AE6  500F               	movf	(??_UpdateDawnDusk+1)^0,w,c
   846  000AE8  2211               	addwfc	(??_UpdateDawnDusk+3)^0,f,c
   847  000AEA  C005  FFD9         	movff	UpdateDawnDusk@pduskhour,fsr2l
   848  000AEE  C006  FFDA         	movff	UpdateDawnDusk@pduskhour+1,fsr2h
   849  000AF2  C010  FFDE         	movff	??_UpdateDawnDusk+2,postinc2
   850  000AF6  C011  FFDD         	movff	??_UpdateDawnDusk+3,postdec2
   851  000AFA                     
   852                           ;timers.c: 166:             *pduskminute = *pminute;
   853  000AFA  C00B  FFD9         	movff	UpdateDawnDusk@pminute,fsr2l
   854  000AFE  C00C  FFDA         	movff	UpdateDawnDusk@pminute+1,fsr2h
   855  000B02  C007  FFE1         	movff	UpdateDawnDusk@pduskminute,fsr1l
   856  000B06  C008  FFE2         	movff	UpdateDawnDusk@pduskminute+1,fsr1h
   857  000B0A  CFDE FFE6          	movff	postinc2,postinc1
   858  000B0E  CFDD FFE5          	movff	postdec2,postdec1
   859                           
   860                           ;timers.c: 167:         } else {
   861  000B12  EFA3  F005         	goto	l210
   862  000B16                     l1586:
   863                           
   864                           ;timers.c: 168:             *pduskhour = *phour;
   865  000B16  C009  FFD9         	movff	UpdateDawnDusk@phour,fsr2l
   866  000B1A  C00A  FFDA         	movff	UpdateDawnDusk@phour+1,fsr2h
   867  000B1E  C005  FFE1         	movff	UpdateDawnDusk@pduskhour,fsr1l
   868  000B22  C006  FFE2         	movff	UpdateDawnDusk@pduskhour+1,fsr1h
   869  000B26  CFDE FFE6          	movff	postinc2,postinc1
   870  000B2A  CFDD FFE5          	movff	postdec2,postdec1
   871                           
   872                           ;timers.c: 169:             *pduskminute = *pminute;
   873  000B2E  C00B  FFD9         	movff	UpdateDawnDusk@pminute,fsr2l
   874  000B32  C00C  FFDA         	movff	UpdateDawnDusk@pminute+1,fsr2h
   875  000B36  C007  FFE1         	movff	UpdateDawnDusk@pduskminute,fsr1l
   876  000B3A  C008  FFE2         	movff	UpdateDawnDusk@pduskminute+1,fsr1h
   877  000B3E  CFDE FFE6          	movff	postinc2,postinc1
   878  000B42  CFDD FFE5          	movff	postdec2,postdec1
   879  000B46                     l210:
   880  000B46  0012               	return		;funcret
   881  000B48                     __end_of_UpdateDawnDusk:
   882                           	callstack 0
   883                           
   884 ;; *************** function _Timer0_init *****************
   885 ;; Defined at:
   886 ;;		line 8 in file "timers.c"
   887 ;; Parameters:    Size  Location     Type
   888 ;;		None
   889 ;; Auto vars:     Size  Location     Type
   890 ;;		None
   891 ;; Return value:  Size  Location     Type
   892 ;;                  1    wreg      void 
   893 ;; Registers used:
   894 ;;		wreg, status,2
   895 ;; Tracked objects:
   896 ;;		On entry : 0/0
   897 ;;		On exit  : 0/0
   898 ;;		Unchanged: 0/0
   899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   900 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   901 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   902 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   903 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   904 ;;Total ram usage:        0 bytes
   905 ;; Hardware stack levels used: 1
   906 ;; Hardware stack levels required when called: 1
   907 ;; This function calls:
   908 ;;		Nothing
   909 ;; This function is called by:
   910 ;;		_main
   911 ;; This function uses a non-reentrant model
   912 ;;
   913                           
   914                           	psect	text2
   915  0010A4                     __ptext2:
   916                           	callstack 0
   917  0010A4                     _Timer0_init:
   918                           	callstack 29
   919  0010A4                     
   920                           ;timers.c: 10:     T0CON1bits.T0CS=0b010;
   921  0010A4  50D6               	movf	214,w,c	;volatile
   922  0010A6  0B1F               	andlw	-225
   923  0010A8  0940               	iorlw	64
   924  0010AA  6ED6               	movwf	214,c	;volatile
   925  0010AC                     
   926                           ;timers.c: 11:     T0CON1bits.T0ASYNC=1;
   927  0010AC  88D6               	bsf	214,4,c	;volatile
   928                           
   929                           ;timers.c: 12:     T0CON1bits.T0CKPS=0b0010;
   930  0010AE  50D6               	movf	214,w,c	;volatile
   931  0010B0  0BF0               	andlw	-16
   932  0010B2  0902               	iorlw	2
   933  0010B4  6ED6               	movwf	214,c	;volatile
   934  0010B6                     
   935                           ;timers.c: 13:     T0CON0bits.T016BIT=1;
   936  0010B6  88D5               	bsf	213,4,c	;volatile
   937                           
   938                           ;timers.c: 17:     TMR0H=0b00011011;
   939  0010B8  0E1B               	movlw	27
   940  0010BA  6ED4               	movwf	212,c	;volatile
   941                           
   942                           ;timers.c: 18:     TMR0L=0b00011110;
   943  0010BC  0E1E               	movlw	30
   944  0010BE  6ED3               	movwf	211,c	;volatile
   945  0010C0                     
   946                           ;timers.c: 19:     T0CON0bits.T0EN=1;
   947  0010C0  8ED5               	bsf	213,7,c	;volatile
   948  0010C2  0012               	return		;funcret
   949  0010C4                     __end_of_Timer0_init:
   950                           	callstack 0
   951                           
   952 ;; *************** function _Timekeeper *****************
   953 ;; Defined at:
   954 ;;		line 25 in file "timers.c"
   955 ;; Parameters:    Size  Location     Type
   956 ;;  pyear           2   10[COMRAM] PTR unsigned int 
   957 ;;		 -> main@year(2), 
   958 ;;  pmonth          2   12[COMRAM] PTR unsigned char 
   959 ;;		 -> main@month(1), 
   960 ;;  pday            2   14[COMRAM] PTR unsigned char 
   961 ;;		 -> main@day(1), 
   962 ;;  phour           2   16[COMRAM] PTR int 
   963 ;;		 -> main@hour(2), 
   964 ;;  pminute         2   18[COMRAM] PTR int 
   965 ;;		 -> main@minute(2), 
   966 ;;  pdayofweek      2   20[COMRAM] PTR unsigned char 
   967 ;;		 -> main@dayofweek(1), 
   968 ;;  pDST            2   22[COMRAM] PTR unsigned char 
   969 ;;		 -> main@DST(1), 
   970 ;; Auto vars:     Size  Location     Type
   971 ;;		None
   972 ;; Return value:  Size  Location     Type
   973 ;;                  1    wreg      void 
   974 ;; Registers used:
   975 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   976 ;; Tracked objects:
   977 ;;		On entry : 0/0
   978 ;;		On exit  : 0/0
   979 ;;		Unchanged: 0/0
   980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   981 ;;      Params:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   982 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   983 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   984 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   985 ;;Total ram usage:       16 bytes
   986 ;; Hardware stack levels used: 1
   987 ;; Hardware stack levels required when called: 3
   988 ;; This function calls:
   989 ;;		_LeapYear
   990 ;; This function is called by:
   991 ;;		_main
   992 ;; This function uses a non-reentrant model
   993 ;;
   994                           
   995                           	psect	text3
   996  00005E                     __ptext3:
   997                           	callstack 0
   998  00005E                     _Timekeeper:
   999                           	callstack 27
  1000  00005E                     
  1001                           ;timers.c: 27:     ++*pminute;
  1002  00005E  C013  FFD9         	movff	Timekeeper@pminute,fsr2l
  1003  000062  C014  FFDA         	movff	Timekeeper@pminute+1,fsr2h
  1004  000066  2ADE               	incf	postinc2,f,c
  1005  000068  0E00               	movlw	0
  1006  00006A  22DD               	addwfc	postdec2,f,c
  1007                           
  1008                           ;timers.c: 29:     if (*pminute == 60) {*pminute = 0; ++*phour;}
  1009  00006C  C013  FFD9         	movff	Timekeeper@pminute,fsr2l
  1010  000070  C014  FFDA         	movff	Timekeeper@pminute+1,fsr2h
  1011  000074  0E3C               	movlw	60
  1012  000076  18DE               	xorwf	postinc2,w,c
  1013  000078  10DE               	iorwf	postinc2,w,c
  1014  00007A  A4D8               	btfss	status,2,c
  1015  00007C  EF42  F000         	goto	u1091
  1016  000080  EF44  F000         	goto	u1090
  1017  000084                     u1091:
  1018  000084  EF53  F000         	goto	l1446
  1019  000088                     u1090:
  1020  000088  C013  FFD9         	movff	Timekeeper@pminute,fsr2l
  1021  00008C  C014  FFDA         	movff	Timekeeper@pminute+1,fsr2h
  1022  000090  0E00               	movlw	0
  1023  000092  6EDE               	movwf	postinc2,c
  1024  000094  0E00               	movlw	0
  1025  000096  6EDD               	movwf	postdec2,c
  1026  000098  C011  FFD9         	movff	Timekeeper@phour,fsr2l
  1027  00009C  C012  FFDA         	movff	Timekeeper@phour+1,fsr2h
  1028  0000A0  2ADE               	incf	postinc2,f,c
  1029  0000A2  0E00               	movlw	0
  1030  0000A4  22DD               	addwfc	postdec2,f,c
  1031  0000A6                     l1446:
  1032                           
  1033                           ;timers.c: 31:     if (*phour == 24) {*phour = 0; ++*pday; ++*pdayofweek;}
  1034  0000A6  C011  FFD9         	movff	Timekeeper@phour,fsr2l
  1035  0000AA  C012  FFDA         	movff	Timekeeper@phour+1,fsr2h
  1036  0000AE  0E18               	movlw	24
  1037  0000B0  18DE               	xorwf	postinc2,w,c
  1038  0000B2  10DE               	iorwf	postinc2,w,c
  1039  0000B4  A4D8               	btfss	status,2,c
  1040  0000B6  EF5F  F000         	goto	u1101
  1041  0000BA  EF61  F000         	goto	u1100
  1042  0000BE                     u1101:
  1043  0000BE  EF73  F000         	goto	l1454
  1044  0000C2                     u1100:
  1045  0000C2  C011  FFD9         	movff	Timekeeper@phour,fsr2l
  1046  0000C6  C012  FFDA         	movff	Timekeeper@phour+1,fsr2h
  1047  0000CA  0E00               	movlw	0
  1048  0000CC  6EDE               	movwf	postinc2,c
  1049  0000CE  0E00               	movlw	0
  1050  0000D0  6EDD               	movwf	postdec2,c
  1051  0000D2  C00F  FFD9         	movff	Timekeeper@pday,fsr2l
  1052  0000D6  C010  FFDA         	movff	Timekeeper@pday+1,fsr2h
  1053  0000DA  2ADF               	incf	indf2,f,c
  1054  0000DC  C015  FFD9         	movff	Timekeeper@pdayofweek,fsr2l
  1055  0000E0  C016  FFDA         	movff	Timekeeper@pdayofweek+1,fsr2h
  1056  0000E4  2ADF               	incf	indf2,f,c
  1057  0000E6                     l1454:
  1058                           
  1059                           ;timers.c: 33:     if (*pdayofweek == 8) {*pdayofweek = 1;}
  1060  0000E6  C015  FFD9         	movff	Timekeeper@pdayofweek,fsr2l
  1061  0000EA  C016  FFDA         	movff	Timekeeper@pdayofweek+1,fsr2h
  1062  0000EE  0E08               	movlw	8
  1063  0000F0  18DE               	xorwf	postinc2,w,c
  1064  0000F2  A4D8               	btfss	status,2,c
  1065  0000F4  EF7E  F000         	goto	u1111
  1066  0000F8  EF80  F000         	goto	u1110
  1067  0000FC                     u1111:
  1068  0000FC  EF86  F000         	goto	l1458
  1069  000100                     u1110:
  1070  000100  C015  FFD9         	movff	Timekeeper@pdayofweek,fsr2l
  1071  000104  C016  FFDA         	movff	Timekeeper@pdayofweek+1,fsr2h
  1072  000108  0E01               	movlw	1
  1073  00010A  6EDF               	movwf	indf2,c
  1074  00010C                     l1458:
  1075                           
  1076                           ;timers.c: 35:     if (*pday == 29 && *pmonth == 2 && !LeapYear(*pyear)) {
  1077  00010C  C00F  FFD9         	movff	Timekeeper@pday,fsr2l
  1078  000110  C010  FFDA         	movff	Timekeeper@pday+1,fsr2h
  1079  000114  0E1D               	movlw	29
  1080  000116  18DE               	xorwf	postinc2,w,c
  1081  000118  A4D8               	btfss	status,2,c
  1082  00011A  EF91  F000         	goto	u1121
  1083  00011E  EF93  F000         	goto	u1120
  1084  000122                     u1121:
  1085  000122  EFBD  F000         	goto	l1468
  1086  000126                     u1120:
  1087  000126  C00D  FFD9         	movff	Timekeeper@pmonth,fsr2l
  1088  00012A  C00E  FFDA         	movff	Timekeeper@pmonth+1,fsr2h
  1089  00012E  0E02               	movlw	2
  1090  000130  18DE               	xorwf	postinc2,w,c
  1091  000132  A4D8               	btfss	status,2,c
  1092  000134  EF9E  F000         	goto	u1131
  1093  000138  EFA0  F000         	goto	u1130
  1094  00013C                     u1131:
  1095  00013C  EFBD  F000         	goto	l1468
  1096  000140                     u1130:
  1097  000140  C00B  FFD9         	movff	Timekeeper@pyear,fsr2l
  1098  000144  C00C  FFDA         	movff	Timekeeper@pyear+1,fsr2h
  1099  000148  CFDE F006          	movff	postinc2,LeapYear@year
  1100  00014C  CFDD F007          	movff	postdec2,LeapYear@year+1
  1101  000150  EC62  F007         	call	_LeapYear	;wreg free
  1102  000154  0900               	iorlw	0
  1103  000156  A4D8               	btfss	status,2,c
  1104  000158  EFB0  F000         	goto	u1141
  1105  00015C  EFB2  F000         	goto	u1140
  1106  000160                     u1141:
  1107  000160  EFBD  F000         	goto	l1468
  1108  000164                     u1140:
  1109  000164                     
  1110                           ;timers.c: 36:         *pday = 1;
  1111  000164  C00F  FFD9         	movff	Timekeeper@pday,fsr2l
  1112  000168  C010  FFDA         	movff	Timekeeper@pday+1,fsr2h
  1113  00016C  0E01               	movlw	1
  1114  00016E  6EDF               	movwf	indf2,c
  1115  000170                     
  1116                           ;timers.c: 37:         ++*pmonth;
  1117  000170  C00D  FFD9         	movff	Timekeeper@pmonth,fsr2l
  1118  000174  C00E  FFDA         	movff	Timekeeper@pmonth+1,fsr2h
  1119  000178  2ADF               	incf	indf2,f,c
  1120  00017A                     l1468:
  1121                           
  1122                           ;timers.c: 40:     if (*pday == 30 && *pmonth == 2 && LeapYear(*pyear)) {
  1123  00017A  C00F  FFD9         	movff	Timekeeper@pday,fsr2l
  1124  00017E  C010  FFDA         	movff	Timekeeper@pday+1,fsr2h
  1125  000182  0E1E               	movlw	30
  1126  000184  18DE               	xorwf	postinc2,w,c
  1127  000186  A4D8               	btfss	status,2,c
  1128  000188  EFC8  F000         	goto	u1151
  1129  00018C  EFCA  F000         	goto	u1150
  1130  000190                     u1151:
  1131  000190  EFF4  F000         	goto	l1478
  1132  000194                     u1150:
  1133  000194  C00D  FFD9         	movff	Timekeeper@pmonth,fsr2l
  1134  000198  C00E  FFDA         	movff	Timekeeper@pmonth+1,fsr2h
  1135  00019C  0E02               	movlw	2
  1136  00019E  18DE               	xorwf	postinc2,w,c
  1137  0001A0  A4D8               	btfss	status,2,c
  1138  0001A2  EFD5  F000         	goto	u1161
  1139  0001A6  EFD7  F000         	goto	u1160
  1140  0001AA                     u1161:
  1141  0001AA  EFF4  F000         	goto	l1478
  1142  0001AE                     u1160:
  1143  0001AE  C00B  FFD9         	movff	Timekeeper@pyear,fsr2l
  1144  0001B2  C00C  FFDA         	movff	Timekeeper@pyear+1,fsr2h
  1145  0001B6  CFDE F006          	movff	postinc2,LeapYear@year
  1146  0001BA  CFDD F007          	movff	postdec2,LeapYear@year+1
  1147  0001BE  EC62  F007         	call	_LeapYear	;wreg free
  1148  0001C2  0900               	iorlw	0
  1149  0001C4  B4D8               	btfsc	status,2,c
  1150  0001C6  EFE7  F000         	goto	u1171
  1151  0001CA  EFE9  F000         	goto	u1170
  1152  0001CE                     u1171:
  1153  0001CE  EFF4  F000         	goto	l1478
  1154  0001D2                     u1170:
  1155  0001D2                     
  1156                           ;timers.c: 41:         *pday = 1;
  1157  0001D2  C00F  FFD9         	movff	Timekeeper@pday,fsr2l
  1158  0001D6  C010  FFDA         	movff	Timekeeper@pday+1,fsr2h
  1159  0001DA  0E01               	movlw	1
  1160  0001DC  6EDF               	movwf	indf2,c
  1161  0001DE                     
  1162                           ;timers.c: 42:         ++*pmonth;
  1163  0001DE  C00D  FFD9         	movff	Timekeeper@pmonth,fsr2l
  1164  0001E2  C00E  FFDA         	movff	Timekeeper@pmonth+1,fsr2h
  1165  0001E6  2ADF               	incf	indf2,f,c
  1166  0001E8                     l1478:
  1167                           
  1168                           ;timers.c: 45:     if (*pday == 31 && (*pmonth == 4 || *pmonth == 6 || *pmonth == 9 || *
      +                          pmonth == 11)) {
  1169  0001E8  C00F  FFD9         	movff	Timekeeper@pday,fsr2l
  1170  0001EC  C010  FFDA         	movff	Timekeeper@pday+1,fsr2h
  1171  0001F0  0E1F               	movlw	31
  1172  0001F2  18DE               	xorwf	postinc2,w,c
  1173  0001F4  A4D8               	btfss	status,2,c
  1174  0001F6  EFFF  F000         	goto	u1181
  1175  0001FA  EF01  F001         	goto	u1180
  1176  0001FE                     u1181:
  1177  0001FE  EF40  F001         	goto	l1492
  1178  000202                     u1180:
  1179  000202  C00D  FFD9         	movff	Timekeeper@pmonth,fsr2l
  1180  000206  C00E  FFDA         	movff	Timekeeper@pmonth+1,fsr2h
  1181  00020A  0E04               	movlw	4
  1182  00020C  18DE               	xorwf	postinc2,w,c
  1183  00020E  B4D8               	btfsc	status,2,c
  1184  000210  EF0C  F001         	goto	u1191
  1185  000214  EF0E  F001         	goto	u1190
  1186  000218                     u1191:
  1187  000218  EF35  F001         	goto	l1488
  1188  00021C                     u1190:
  1189  00021C  C00D  FFD9         	movff	Timekeeper@pmonth,fsr2l
  1190  000220  C00E  FFDA         	movff	Timekeeper@pmonth+1,fsr2h
  1191  000224  0E06               	movlw	6
  1192  000226  18DE               	xorwf	postinc2,w,c
  1193  000228  B4D8               	btfsc	status,2,c
  1194  00022A  EF19  F001         	goto	u1201
  1195  00022E  EF1B  F001         	goto	u1200
  1196  000232                     u1201:
  1197  000232  EF35  F001         	goto	l1488
  1198  000236                     u1200:
  1199  000236  C00D  FFD9         	movff	Timekeeper@pmonth,fsr2l
  1200  00023A  C00E  FFDA         	movff	Timekeeper@pmonth+1,fsr2h
  1201  00023E  0E09               	movlw	9
  1202  000240  18DE               	xorwf	postinc2,w,c
  1203  000242  B4D8               	btfsc	status,2,c
  1204  000244  EF26  F001         	goto	u1211
  1205  000248  EF28  F001         	goto	u1210
  1206  00024C                     u1211:
  1207  00024C  EF35  F001         	goto	l1488
  1208  000250                     u1210:
  1209  000250  C00D  FFD9         	movff	Timekeeper@pmonth,fsr2l
  1210  000254  C00E  FFDA         	movff	Timekeeper@pmonth+1,fsr2h
  1211  000258  0E0B               	movlw	11
  1212  00025A  18DE               	xorwf	postinc2,w,c
  1213  00025C  A4D8               	btfss	status,2,c
  1214  00025E  EF33  F001         	goto	u1221
  1215  000262  EF35  F001         	goto	u1220
  1216  000266                     u1221:
  1217  000266  EF40  F001         	goto	l1492
  1218  00026A                     u1220:
  1219  00026A                     l1488:
  1220                           
  1221                           ;timers.c: 46:         *pday = 1;
  1222  00026A  C00F  FFD9         	movff	Timekeeper@pday,fsr2l
  1223  00026E  C010  FFDA         	movff	Timekeeper@pday+1,fsr2h
  1224  000272  0E01               	movlw	1
  1225  000274  6EDF               	movwf	indf2,c
  1226  000276                     
  1227                           ;timers.c: 47:         ++*pmonth;
  1228  000276  C00D  FFD9         	movff	Timekeeper@pmonth,fsr2l
  1229  00027A  C00E  FFDA         	movff	Timekeeper@pmonth+1,fsr2h
  1230  00027E  2ADF               	incf	indf2,f,c
  1231  000280                     l1492:
  1232                           
  1233                           ;timers.c: 50:     if (*pday == 32 && (*pmonth == 1 || *pmonth == 3 || *pmonth == 5 || *
      +                          pmonth == 7 || *pmonth == 8 || *pmonth == 10 || *pmonth == 12)) {
  1234  000280  C00F  FFD9         	movff	Timekeeper@pday,fsr2l
  1235  000284  C010  FFDA         	movff	Timekeeper@pday+1,fsr2h
  1236  000288  0E20               	movlw	32
  1237  00028A  18DE               	xorwf	postinc2,w,c
  1238  00028C  A4D8               	btfss	status,2,c
  1239  00028E  EF4B  F001         	goto	u1231
  1240  000292  EF4D  F001         	goto	u1230
  1241  000296                     u1231:
  1242  000296  EFB2  F001         	goto	l1512
  1243  00029A                     u1230:
  1244  00029A  C00D  FFD9         	movff	Timekeeper@pmonth,fsr2l
  1245  00029E  C00E  FFDA         	movff	Timekeeper@pmonth+1,fsr2h
  1246  0002A2  04DE               	decf	postinc2,w,c
  1247  0002A4  B4D8               	btfsc	status,2,c
  1248  0002A6  EF57  F001         	goto	u1241
  1249  0002AA  EF59  F001         	goto	u1240
  1250  0002AE                     u1241:
  1251  0002AE  EFA7  F001         	goto	l1508
  1252  0002B2                     u1240:
  1253  0002B2  C00D  FFD9         	movff	Timekeeper@pmonth,fsr2l
  1254  0002B6  C00E  FFDA         	movff	Timekeeper@pmonth+1,fsr2h
  1255  0002BA  0E03               	movlw	3
  1256  0002BC  18DE               	xorwf	postinc2,w,c
  1257  0002BE  B4D8               	btfsc	status,2,c
  1258  0002C0  EF64  F001         	goto	u1251
  1259  0002C4  EF66  F001         	goto	u1250
  1260  0002C8                     u1251:
  1261  0002C8  EFA7  F001         	goto	l1508
  1262  0002CC                     u1250:
  1263  0002CC  C00D  FFD9         	movff	Timekeeper@pmonth,fsr2l
  1264  0002D0  C00E  FFDA         	movff	Timekeeper@pmonth+1,fsr2h
  1265  0002D4  0E05               	movlw	5
  1266  0002D6  18DE               	xorwf	postinc2,w,c
  1267  0002D8  B4D8               	btfsc	status,2,c
  1268  0002DA  EF71  F001         	goto	u1261
  1269  0002DE  EF73  F001         	goto	u1260
  1270  0002E2                     u1261:
  1271  0002E2  EFA7  F001         	goto	l1508
  1272  0002E6                     u1260:
  1273  0002E6  C00D  FFD9         	movff	Timekeeper@pmonth,fsr2l
  1274  0002EA  C00E  FFDA         	movff	Timekeeper@pmonth+1,fsr2h
  1275  0002EE  0E07               	movlw	7
  1276  0002F0  18DE               	xorwf	postinc2,w,c
  1277  0002F2  B4D8               	btfsc	status,2,c
  1278  0002F4  EF7E  F001         	goto	u1271
  1279  0002F8  EF80  F001         	goto	u1270
  1280  0002FC                     u1271:
  1281  0002FC  EFA7  F001         	goto	l1508
  1282  000300                     u1270:
  1283  000300  C00D  FFD9         	movff	Timekeeper@pmonth,fsr2l
  1284  000304  C00E  FFDA         	movff	Timekeeper@pmonth+1,fsr2h
  1285  000308  0E08               	movlw	8
  1286  00030A  18DE               	xorwf	postinc2,w,c
  1287  00030C  B4D8               	btfsc	status,2,c
  1288  00030E  EF8B  F001         	goto	u1281
  1289  000312  EF8D  F001         	goto	u1280
  1290  000316                     u1281:
  1291  000316  EFA7  F001         	goto	l1508
  1292  00031A                     u1280:
  1293  00031A  C00D  FFD9         	movff	Timekeeper@pmonth,fsr2l
  1294  00031E  C00E  FFDA         	movff	Timekeeper@pmonth+1,fsr2h
  1295  000322  0E0A               	movlw	10
  1296  000324  18DE               	xorwf	postinc2,w,c
  1297  000326  B4D8               	btfsc	status,2,c
  1298  000328  EF98  F001         	goto	u1291
  1299  00032C  EF9A  F001         	goto	u1290
  1300  000330                     u1291:
  1301  000330  EFA7  F001         	goto	l1508
  1302  000334                     u1290:
  1303  000334  C00D  FFD9         	movff	Timekeeper@pmonth,fsr2l
  1304  000338  C00E  FFDA         	movff	Timekeeper@pmonth+1,fsr2h
  1305  00033C  0E0C               	movlw	12
  1306  00033E  18DE               	xorwf	postinc2,w,c
  1307  000340  A4D8               	btfss	status,2,c
  1308  000342  EFA5  F001         	goto	u1301
  1309  000346  EFA7  F001         	goto	u1300
  1310  00034A                     u1301:
  1311  00034A  EFB2  F001         	goto	l1512
  1312  00034E                     u1300:
  1313  00034E                     l1508:
  1314                           
  1315                           ;timers.c: 51:         *pday = 1;
  1316  00034E  C00F  FFD9         	movff	Timekeeper@pday,fsr2l
  1317  000352  C010  FFDA         	movff	Timekeeper@pday+1,fsr2h
  1318  000356  0E01               	movlw	1
  1319  000358  6EDF               	movwf	indf2,c
  1320  00035A                     
  1321                           ;timers.c: 52:         ++*pmonth;
  1322  00035A  C00D  FFD9         	movff	Timekeeper@pmonth,fsr2l
  1323  00035E  C00E  FFDA         	movff	Timekeeper@pmonth+1,fsr2h
  1324  000362  2ADF               	incf	indf2,f,c
  1325  000364                     l1512:
  1326                           
  1327                           ;timers.c: 55:     if (*pmonth == 13) {*pmonth = 1; ++*pyear;}
  1328  000364  C00D  FFD9         	movff	Timekeeper@pmonth,fsr2l
  1329  000368  C00E  FFDA         	movff	Timekeeper@pmonth+1,fsr2h
  1330  00036C  0E0D               	movlw	13
  1331  00036E  18DE               	xorwf	postinc2,w,c
  1332  000370  A4D8               	btfss	status,2,c
  1333  000372  EFBD  F001         	goto	u1311
  1334  000376  EFBF  F001         	goto	u1310
  1335  00037A                     u1311:
  1336  00037A  EFCC  F001         	goto	l1518
  1337  00037E                     u1310:
  1338  00037E  C00D  FFD9         	movff	Timekeeper@pmonth,fsr2l
  1339  000382  C00E  FFDA         	movff	Timekeeper@pmonth+1,fsr2h
  1340  000386  0E01               	movlw	1
  1341  000388  6EDF               	movwf	indf2,c
  1342  00038A  C00B  FFD9         	movff	Timekeeper@pyear,fsr2l
  1343  00038E  C00C  FFDA         	movff	Timekeeper@pyear+1,fsr2h
  1344  000392  2ADE               	incf	postinc2,f,c
  1345  000394  0E00               	movlw	0
  1346  000396  22DD               	addwfc	postdec2,f,c
  1347  000398                     l1518:
  1348                           
  1349                           ;timers.c: 58:     if (*pmonth == 3 && *pday >= 25 && *phour == 1 && *pdayofweek == 7) {
  1350  000398  C00D  FFD9         	movff	Timekeeper@pmonth,fsr2l
  1351  00039C  C00E  FFDA         	movff	Timekeeper@pmonth+1,fsr2h
  1352  0003A0  0E03               	movlw	3
  1353  0003A2  18DE               	xorwf	postinc2,w,c
  1354  0003A4  A4D8               	btfss	status,2,c
  1355  0003A6  EFD7  F001         	goto	u1321
  1356  0003AA  EFD9  F001         	goto	u1320
  1357  0003AE                     u1321:
  1358  0003AE  EF0C  F002         	goto	l1530
  1359  0003B2                     u1320:
  1360  0003B2  C00F  FFD9         	movff	Timekeeper@pday,fsr2l
  1361  0003B6  C010  FFDA         	movff	Timekeeper@pday+1,fsr2h
  1362  0003BA  0E18               	movlw	24
  1363  0003BC  64DF               	cpfsgt	indf2,c
  1364  0003BE  EFE3  F001         	goto	u1331
  1365  0003C2  EFE5  F001         	goto	u1330
  1366  0003C6                     u1331:
  1367  0003C6  EF0C  F002         	goto	l1530
  1368  0003CA                     u1330:
  1369  0003CA  C011  FFD9         	movff	Timekeeper@phour,fsr2l
  1370  0003CE  C012  FFDA         	movff	Timekeeper@phour+1,fsr2h
  1371  0003D2  04DE               	decf	postinc2,w,c
  1372  0003D4  10DE               	iorwf	postinc2,w,c
  1373  0003D6  A4D8               	btfss	status,2,c
  1374  0003D8  EFF0  F001         	goto	u1341
  1375  0003DC  EFF2  F001         	goto	u1340
  1376  0003E0                     u1341:
  1377  0003E0  EF0C  F002         	goto	l1530
  1378  0003E4                     u1340:
  1379  0003E4  C015  FFD9         	movff	Timekeeper@pdayofweek,fsr2l
  1380  0003E8  C016  FFDA         	movff	Timekeeper@pdayofweek+1,fsr2h
  1381  0003EC  0E07               	movlw	7
  1382  0003EE  18DE               	xorwf	postinc2,w,c
  1383  0003F0  A4D8               	btfss	status,2,c
  1384  0003F2  EFFD  F001         	goto	u1351
  1385  0003F6  EFFF  F001         	goto	u1350
  1386  0003FA                     u1351:
  1387  0003FA  EF0C  F002         	goto	l1530
  1388  0003FE                     u1350:
  1389  0003FE                     
  1390                           ;timers.c: 59:         ++*phour;
  1391  0003FE  C011  FFD9         	movff	Timekeeper@phour,fsr2l
  1392  000402  C012  FFDA         	movff	Timekeeper@phour+1,fsr2h
  1393  000406  2ADE               	incf	postinc2,f,c
  1394  000408  0E00               	movlw	0
  1395  00040A  22DD               	addwfc	postdec2,f,c
  1396  00040C                     
  1397                           ;timers.c: 60:         *pDST = 1;
  1398  00040C  C017  FFD9         	movff	Timekeeper@pDST,fsr2l
  1399  000410  C018  FFDA         	movff	Timekeeper@pDST+1,fsr2h
  1400  000414  0E01               	movlw	1
  1401  000416  6EDF               	movwf	indf2,c
  1402  000418                     l1530:
  1403                           
  1404                           ;timers.c: 63:     if (*pmonth == 10 && *pday >=25 && *phour == 2 && *pdayofweek == 7 &&
      +                           *pDST) {
  1405  000418  C00D  FFD9         	movff	Timekeeper@pmonth,fsr2l
  1406  00041C  C00E  FFDA         	movff	Timekeeper@pmonth+1,fsr2h
  1407  000420  0E0A               	movlw	10
  1408  000422  18DE               	xorwf	postinc2,w,c
  1409  000424  A4D8               	btfss	status,2,c
  1410  000426  EF17  F002         	goto	u1361
  1411  00042A  EF19  F002         	goto	u1360
  1412  00042E                     u1361:
  1413  00042E  EF59  F002         	goto	l162
  1414  000432                     u1360:
  1415  000432  C00F  FFD9         	movff	Timekeeper@pday,fsr2l
  1416  000436  C010  FFDA         	movff	Timekeeper@pday+1,fsr2h
  1417  00043A  0E18               	movlw	24
  1418  00043C  64DF               	cpfsgt	indf2,c
  1419  00043E  EF23  F002         	goto	u1371
  1420  000442  EF25  F002         	goto	u1370
  1421  000446                     u1371:
  1422  000446  EF59  F002         	goto	l162
  1423  00044A                     u1370:
  1424  00044A  C011  FFD9         	movff	Timekeeper@phour,fsr2l
  1425  00044E  C012  FFDA         	movff	Timekeeper@phour+1,fsr2h
  1426  000452  0E02               	movlw	2
  1427  000454  18DE               	xorwf	postinc2,w,c
  1428  000456  10DE               	iorwf	postinc2,w,c
  1429  000458  A4D8               	btfss	status,2,c
  1430  00045A  EF31  F002         	goto	u1381
  1431  00045E  EF33  F002         	goto	u1380
  1432  000462                     u1381:
  1433  000462  EF59  F002         	goto	l162
  1434  000466                     u1380:
  1435  000466  C015  FFD9         	movff	Timekeeper@pdayofweek,fsr2l
  1436  00046A  C016  FFDA         	movff	Timekeeper@pdayofweek+1,fsr2h
  1437  00046E  0E07               	movlw	7
  1438  000470  18DE               	xorwf	postinc2,w,c
  1439  000472  A4D8               	btfss	status,2,c
  1440  000474  EF3E  F002         	goto	u1391
  1441  000478  EF40  F002         	goto	u1390
  1442  00047C                     u1391:
  1443  00047C  EF59  F002         	goto	l162
  1444  000480                     u1390:
  1445  000480  C017  FFD9         	movff	Timekeeper@pDST,fsr2l
  1446  000484  C018  FFDA         	movff	Timekeeper@pDST+1,fsr2h
  1447  000488  50DF               	movf	indf2,w,c
  1448  00048A  B4D8               	btfsc	status,2,c
  1449  00048C  EF4A  F002         	goto	u1401
  1450  000490  EF4C  F002         	goto	u1400
  1451  000494                     u1401:
  1452  000494  EF59  F002         	goto	l162
  1453  000498                     u1400:
  1454  000498                     
  1455                           ;timers.c: 64:         --*phour;
  1456  000498  C011  FFD9         	movff	Timekeeper@phour,fsr2l
  1457  00049C  C012  FFDA         	movff	Timekeeper@phour+1,fsr2h
  1458  0004A0  06DE               	decf	postinc2,f,c
  1459  0004A2  0E00               	movlw	0
  1460  0004A4  5ADD               	subwfb	postdec2,f,c
  1461  0004A6                     
  1462                           ;timers.c: 65:         *pDST = 0;
  1463  0004A6  C017  FFD9         	movff	Timekeeper@pDST,fsr2l
  1464  0004AA  C018  FFDA         	movff	Timekeeper@pDST+1,fsr2h
  1465  0004AE  0E00               	movlw	0
  1466  0004B0  6EDF               	movwf	indf2,c
  1467  0004B2                     l162:
  1468  0004B2  0012               	return		;funcret
  1469  0004B4                     __end_of_Timekeeper:
  1470                           	callstack 0
  1471                           
  1472 ;; *************** function _LeapYear *****************
  1473 ;; Defined at:
  1474 ;;		line 72 in file "timers.c"
  1475 ;; Parameters:    Size  Location     Type
  1476 ;;  year            2    5[COMRAM] unsigned int 
  1477 ;; Auto vars:     Size  Location     Type
  1478 ;;  leapyear        1    9[COMRAM] unsigned char 
  1479 ;; Return value:  Size  Location     Type
  1480 ;;                  1    wreg      unsigned char 
  1481 ;; Registers used:
  1482 ;;		wreg, status,2, status,0, cstack
  1483 ;; Tracked objects:
  1484 ;;		On entry : 0/0
  1485 ;;		On exit  : 0/0
  1486 ;;		Unchanged: 0/0
  1487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1488 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1489 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1490 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1491 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1492 ;;Total ram usage:        5 bytes
  1493 ;; Hardware stack levels used: 1
  1494 ;; Hardware stack levels required when called: 2
  1495 ;; This function calls:
  1496 ;;		___lwmod
  1497 ;; This function is called by:
  1498 ;;		_Timekeeper
  1499 ;; This function uses a non-reentrant model
  1500 ;;
  1501                           
  1502                           	psect	text4
  1503  000EC4                     __ptext4:
  1504                           	callstack 0
  1505  000EC4                     _LeapYear:
  1506                           	callstack 27
  1507  000EC4                     
  1508                           ;timers.c: 72: char LeapYear(unsigned int year);timers.c: 73: {;timers.c: 74:     char l
      +                          eapyear;;timers.c: 75:     if (year % 4 == 0 && year % 100 != 0) {
  1509  000EC4  0E03               	movlw	3
  1510  000EC6  1406               	andwf	LeapYear@year^0,w,c
  1511  000EC8  6E08               	movwf	??_LeapYear^0,c
  1512  000ECA  0E00               	movlw	0
  1513  000ECC  1407               	andwf	(LeapYear@year+1)^0,w,c
  1514  000ECE  6E09               	movwf	(??_LeapYear+1)^0,c
  1515  000ED0  5008               	movf	??_LeapYear^0,w,c
  1516  000ED2  1009               	iorwf	(??_LeapYear+1)^0,w,c
  1517  000ED4  A4D8               	btfss	status,2,c
  1518  000ED6  EF6F  F007         	goto	u1041
  1519  000EDA  EF71  F007         	goto	u1040
  1520  000EDE                     u1041:
  1521  000EDE  EF88  F007         	goto	l1418
  1522  000EE2                     u1040:
  1523  000EE2  C006  F001         	movff	LeapYear@year,___lwmod@dividend
  1524  000EE6  C007  F002         	movff	LeapYear@year+1,___lwmod@dividend+1
  1525  000EEA  0E00               	movlw	0
  1526  000EEC  6E04               	movwf	(___lwmod@divisor+1)^0,c
  1527  000EEE  0E64               	movlw	100
  1528  000EF0  6E03               	movwf	___lwmod@divisor^0,c
  1529  000EF2  EC0D  F008         	call	___lwmod	;wreg free
  1530  000EF6  5001               	movf	?___lwmod^0,w,c
  1531  000EF8  1002               	iorwf	(?___lwmod+1)^0,w,c
  1532  000EFA  B4D8               	btfsc	status,2,c
  1533  000EFC  EF82  F007         	goto	u1051
  1534  000F00  EF84  F007         	goto	u1050
  1535  000F04                     u1051:
  1536  000F04  EF88  F007         	goto	l1418
  1537  000F08                     u1050:
  1538  000F08                     l1416:
  1539                           
  1540                           ;timers.c: 76:         leapyear = 1;
  1541  000F08  0E01               	movlw	1
  1542  000F0A  6E0A               	movwf	LeapYear@leapyear^0,c
  1543                           
  1544                           ;timers.c: 77:     } else if (year % 400 == 0) {
  1545  000F0C  EF9F  F007         	goto	l166
  1546  000F10                     l1418:
  1547  000F10  C006  F001         	movff	LeapYear@year,___lwmod@dividend
  1548  000F14  C007  F002         	movff	LeapYear@year+1,___lwmod@dividend+1
  1549  000F18  0E01               	movlw	1
  1550  000F1A  6E04               	movwf	(___lwmod@divisor+1)^0,c
  1551  000F1C  0E90               	movlw	144
  1552  000F1E  6E03               	movwf	___lwmod@divisor^0,c
  1553  000F20  EC0D  F008         	call	___lwmod	;wreg free
  1554  000F24  5001               	movf	?___lwmod^0,w,c
  1555  000F26  1002               	iorwf	(?___lwmod+1)^0,w,c
  1556  000F28  A4D8               	btfss	status,2,c
  1557  000F2A  EF99  F007         	goto	u1061
  1558  000F2E  EF9B  F007         	goto	u1060
  1559  000F32                     u1061:
  1560  000F32  EF9D  F007         	goto	l1422
  1561  000F36                     u1060:
  1562  000F36  EF84  F007         	goto	l1416
  1563  000F3A                     l1422:
  1564                           
  1565                           ;timers.c: 80:         leapyear = 0;
  1566  000F3A  0E00               	movlw	0
  1567  000F3C  6E0A               	movwf	LeapYear@leapyear^0,c
  1568  000F3E                     l166:
  1569                           
  1570                           ;timers.c: 82:     return leapyear;
  1571  000F3E  500A               	movf	LeapYear@leapyear^0,w,c
  1572  000F40  0012               	return		;funcret
  1573  000F42                     __end_of_LeapYear:
  1574                           	callstack 0
  1575                           
  1576 ;; *************** function ___lwmod *****************
  1577 ;; Defined at:
  1578 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\lwmod.c"
  1579 ;; Parameters:    Size  Location     Type
  1580 ;;  dividend        2    0[COMRAM] unsigned int 
  1581 ;;  divisor         2    2[COMRAM] unsigned int 
  1582 ;; Auto vars:     Size  Location     Type
  1583 ;;  counter         1    4[COMRAM] unsigned char 
  1584 ;; Return value:  Size  Location     Type
  1585 ;;                  2    0[COMRAM] unsigned int 
  1586 ;; Registers used:
  1587 ;;		wreg, status,2, status,0
  1588 ;; Tracked objects:
  1589 ;;		On entry : 0/0
  1590 ;;		On exit  : 0/0
  1591 ;;		Unchanged: 0/0
  1592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1593 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1594 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1595 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1596 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1597 ;;Total ram usage:        5 bytes
  1598 ;; Hardware stack levels used: 1
  1599 ;; Hardware stack levels required when called: 1
  1600 ;; This function calls:
  1601 ;;		Nothing
  1602 ;; This function is called by:
  1603 ;;		_LeapYear
  1604 ;; This function uses a non-reentrant model
  1605 ;;
  1606                           
  1607                           	psect	text5
  1608  00101A                     __ptext5:
  1609                           	callstack 0
  1610  00101A                     ___lwmod:
  1611                           	callstack 27
  1612  00101A  5003               	movf	___lwmod@divisor^0,w,c
  1613  00101C  1004               	iorwf	(___lwmod@divisor+1)^0,w,c
  1614  00101E  B4D8               	btfsc	status,2,c
  1615  001020  EF14  F008         	goto	u1011
  1616  001024  EF16  F008         	goto	u1010
  1617  001028                     u1011:
  1618  001028  EF3A  F008         	goto	l714
  1619  00102C                     u1010:
  1620  00102C  0E01               	movlw	1
  1621  00102E  6E05               	movwf	___lwmod@counter^0,c
  1622  001030  EF1E  F008         	goto	l1402
  1623  001034                     l1400:
  1624  001034  90D8               	bcf	status,0,c
  1625  001036  3603               	rlcf	___lwmod@divisor^0,f,c
  1626  001038  3604               	rlcf	(___lwmod@divisor+1)^0,f,c
  1627  00103A  2A05               	incf	___lwmod@counter^0,f,c
  1628  00103C                     l1402:
  1629  00103C  AE04               	btfss	(___lwmod@divisor+1)^0,7,c
  1630  00103E  EF23  F008         	goto	u1021
  1631  001042  EF25  F008         	goto	u1020
  1632  001046                     u1021:
  1633  001046  EF1A  F008         	goto	l1400
  1634  00104A                     u1020:
  1635  00104A                     l1404:
  1636  00104A  5003               	movf	___lwmod@divisor^0,w,c
  1637  00104C  5C01               	subwf	___lwmod@dividend^0,w,c
  1638  00104E  5004               	movf	(___lwmod@divisor+1)^0,w,c
  1639  001050  5802               	subwfb	(___lwmod@dividend+1)^0,w,c
  1640  001052  A0D8               	btfss	status,0,c
  1641  001054  EF2E  F008         	goto	u1031
  1642  001058  EF30  F008         	goto	u1030
  1643  00105C                     u1031:
  1644  00105C  EF34  F008         	goto	l1408
  1645  001060                     u1030:
  1646  001060  5003               	movf	___lwmod@divisor^0,w,c
  1647  001062  5E01               	subwf	___lwmod@dividend^0,f,c
  1648  001064  5004               	movf	(___lwmod@divisor+1)^0,w,c
  1649  001066  5A02               	subwfb	(___lwmod@dividend+1)^0,f,c
  1650  001068                     l1408:
  1651  001068  90D8               	bcf	status,0,c
  1652  00106A  3204               	rrcf	(___lwmod@divisor+1)^0,f,c
  1653  00106C  3203               	rrcf	___lwmod@divisor^0,f,c
  1654  00106E  2E05               	decfsz	___lwmod@counter^0,f,c
  1655  001070  EF25  F008         	goto	l1404
  1656  001074                     l714:
  1657  001074  C001  F001         	movff	___lwmod@dividend,?___lwmod
  1658  001078  C002  F002         	movff	___lwmod@dividend+1,?___lwmod+1
  1659  00107C  0012               	return		;funcret
  1660  00107E                     __end_of___lwmod:
  1661                           	callstack 0
  1662                           
  1663 ;; *************** function _SunPleaseFixTheDamnClock *****************
  1664 ;; Defined at:
  1665 ;;		line 88 in file "timers.c"
  1666 ;; Parameters:    Size  Location     Type
  1667 ;;  pdawnhour       2   35[COMRAM] PTR int 
  1668 ;;		 -> main@dawnhour(2), 
  1669 ;;  pdawnminute     2   37[COMRAM] PTR int 
  1670 ;;		 -> main@dawnminute(2), 
  1671 ;;  pduskhour       2   39[COMRAM] PTR int 
  1672 ;;		 -> main@duskhour(2), 
  1673 ;;  pduskminute     2   41[COMRAM] PTR int 
  1674 ;;		 -> main@duskminute(2), 
  1675 ;;  phour           2   43[COMRAM] PTR int 
  1676 ;;		 -> main@hour(2), 
  1677 ;;  pminute         2   45[COMRAM] PTR int 
  1678 ;;		 -> main@minute(2), 
  1679 ;;  DST             1   47[COMRAM] unsigned char 
  1680 ;; Auto vars:     Size  Location     Type
  1681 ;;  timedifferen    2   56[COMRAM] int 
  1682 ;;  avgminute       2   54[COMRAM] int 
  1683 ;;  avghour         2   52[COMRAM] int 
  1684 ;; Return value:  Size  Location     Type
  1685 ;;                  1    wreg      void 
  1686 ;; Registers used:
  1687 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1688 ;; Tracked objects:
  1689 ;;		On entry : 0/0
  1690 ;;		On exit  : 0/0
  1691 ;;		Unchanged: 0/0
  1692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1693 ;;      Params:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1694 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1695 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1696 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1697 ;;Total ram usage:       23 bytes
  1698 ;; Hardware stack levels used: 1
  1699 ;; Hardware stack levels required when called: 3
  1700 ;; This function calls:
  1701 ;;		_TimeAvg
  1702 ;;		_TimeDiff
  1703 ;;		___awdiv
  1704 ;;		___awmod
  1705 ;; This function is called by:
  1706 ;;		_main
  1707 ;; This function uses a non-reentrant model
  1708 ;;
  1709                           
  1710                           	psect	text6
  1711  0004B4                     __ptext6:
  1712                           	callstack 0
  1713  0004B4                     _SunPleaseFixTheDamnClock:
  1714                           	callstack 27
  1715  0004B4                     
  1716                           ;timers.c: 88: void SunPleaseFixTheDamnClock(int *pdawnhour, int *pdawnminute, int *pdus
      +                          khour, int *pduskminute, int *phour, int *pminute, char DST);timers.c: 89: {;timers.c: 9
      +                          0:     int avghour;;timers.c: 91:     int avgminute;;timers.c: 93:     TimeAvg(*pdawnhou
      +                          r, *pdawnminute, *pduskhour, *pduskminute, &avghour, &avgminute);
  1717  0004B4  C024  FFD9         	movff	SunPleaseFixTheDamnClock@pdawnhour,fsr2l
  1718  0004B8  C025  FFDA         	movff	SunPleaseFixTheDamnClock@pdawnhour+1,fsr2h
  1719  0004BC  CFDE F012          	movff	postinc2,TimeAvg@hour1
  1720  0004C0  CFDD F013          	movff	postdec2,TimeAvg@hour1+1
  1721  0004C4  C026  FFD9         	movff	SunPleaseFixTheDamnClock@pdawnminute,fsr2l
  1722  0004C8  C027  FFDA         	movff	SunPleaseFixTheDamnClock@pdawnminute+1,fsr2h
  1723  0004CC  CFDE F014          	movff	postinc2,TimeAvg@minute1
  1724  0004D0  CFDD F015          	movff	postdec2,TimeAvg@minute1+1
  1725  0004D4  C028  FFD9         	movff	SunPleaseFixTheDamnClock@pduskhour,fsr2l
  1726  0004D8  C029  FFDA         	movff	SunPleaseFixTheDamnClock@pduskhour+1,fsr2h
  1727  0004DC  CFDE F016          	movff	postinc2,TimeAvg@hour2
  1728  0004E0  CFDD F017          	movff	postdec2,TimeAvg@hour2+1
  1729  0004E4  C02A  FFD9         	movff	SunPleaseFixTheDamnClock@pduskminute,fsr2l
  1730  0004E8  C02B  FFDA         	movff	SunPleaseFixTheDamnClock@pduskminute+1,fsr2h
  1731  0004EC  CFDE F018          	movff	postinc2,TimeAvg@minute2
  1732  0004F0  CFDD F019          	movff	postdec2,TimeAvg@minute2+1
  1733  0004F4  0E35               	movlw	low SunPleaseFixTheDamnClock@avghour
  1734  0004F6  6E1A               	movwf	TimeAvg@pavghour^0,c
  1735  0004F8  0E00               	movlw	high SunPleaseFixTheDamnClock@avghour
  1736  0004FA  6E1B               	movwf	(TimeAvg@pavghour+1)^0,c
  1737  0004FC  0E37               	movlw	low SunPleaseFixTheDamnClock@avgminute
  1738  0004FE  6E1C               	movwf	TimeAvg@pavgminute^0,c
  1739  000500  0E00               	movlw	high SunPleaseFixTheDamnClock@avgminute
  1740  000502  6E1D               	movwf	(TimeAvg@pavgminute+1)^0,c
  1741  000504  ECA4  F005         	call	_TimeAvg	;wreg free
  1742  000508                     
  1743                           ;timers.c: 94:     int timedifference = TimeDiff(avghour, avgminute, 12, 0);
  1744  000508  C035  F001         	movff	SunPleaseFixTheDamnClock@avghour,TimeDiff@hour1
  1745  00050C  C036  F002         	movff	SunPleaseFixTheDamnClock@avghour+1,TimeDiff@hour1+1
  1746  000510  C037  F003         	movff	SunPleaseFixTheDamnClock@avgminute,TimeDiff@minute1
  1747  000514  C038  F004         	movff	SunPleaseFixTheDamnClock@avgminute+1,TimeDiff@minute1+1
  1748  000518  0E00               	movlw	0
  1749  00051A  6E06               	movwf	(TimeDiff@hour2+1)^0,c
  1750  00051C  0E0C               	movlw	12
  1751  00051E  6E05               	movwf	TimeDiff@hour2^0,c
  1752  000520  0E00               	movlw	0
  1753  000522  6E08               	movwf	(TimeDiff@minute2+1)^0,c
  1754  000524  0E00               	movlw	0
  1755  000526  6E07               	movwf	TimeDiff@minute2^0,c
  1756  000528  ECAF  F006         	call	_TimeDiff	;wreg free
  1757  00052C  C001  F039         	movff	?_TimeDiff,SunPleaseFixTheDamnClock@timedifference
  1758  000530  C002  F03A         	movff	?_TimeDiff+1,SunPleaseFixTheDamnClock@timedifference+1
  1759  000534                     
  1760                           ;timers.c: 96:     if (timedifference > 30 || timedifference < -30) {
  1761  000534  BE3A               	btfsc	(SunPleaseFixTheDamnClock@timedifference+1)^0,7,c
  1762  000536  EFA8  F002         	goto	u1550
  1763  00053A  503A               	movf	(SunPleaseFixTheDamnClock@timedifference+1)^0,w,c
  1764  00053C  E107               	bnz	u1551
  1765  00053E  0E1F               	movlw	31
  1766  000540  5C39               	subwf	SunPleaseFixTheDamnClock@timedifference^0,w,c
  1767  000542  B0D8               	btfsc	status,0,c
  1768  000544  EFA6  F002         	goto	u1551
  1769  000548  EFA8  F002         	goto	u1550
  1770  00054C                     u1551:
  1771  00054C  EFB6  F002         	goto	l1596
  1772  000550                     u1550:
  1773  000550  AE3A               	btfss	(SunPleaseFixTheDamnClock@timedifference+1)^0,7,c
  1774  000552  EFB4  F002         	goto	u1561
  1775  000556  0EE2               	movlw	226
  1776  000558  5C39               	subwf	SunPleaseFixTheDamnClock@timedifference^0,w,c
  1777  00055A  0EFF               	movlw	255
  1778  00055C  583A               	subwfb	(SunPleaseFixTheDamnClock@timedifference+1)^0,w,c
  1779  00055E  B0D8               	btfsc	status,0,c
  1780  000560  EFB4  F002         	goto	u1561
  1781  000564  EFB6  F002         	goto	u1560
  1782  000568                     u1561:
  1783  000568  EF35  F004         	goto	l182
  1784  00056C                     u1560:
  1785  00056C                     l1596:
  1786                           
  1787                           ;timers.c: 97:         *pminute = timedifference % 60;
  1788  00056C  C039  F001         	movff	SunPleaseFixTheDamnClock@timedifference,___awmod@dividend
  1789  000570  C03A  F002         	movff	SunPleaseFixTheDamnClock@timedifference+1,___awmod@dividend+1
  1790  000574  0E00               	movlw	0
  1791  000576  6E04               	movwf	(___awmod@divisor+1)^0,c
  1792  000578  0E3C               	movlw	60
  1793  00057A  6E03               	movwf	___awmod@divisor^0,c
  1794  00057C  EC0A  F007         	call	___awmod	;wreg free
  1795  000580  C02E  FFD9         	movff	SunPleaseFixTheDamnClock@pminute,fsr2l
  1796  000584  C02F  FFDA         	movff	SunPleaseFixTheDamnClock@pminute+1,fsr2h
  1797  000588  C001  FFDE         	movff	?___awmod,postinc2
  1798  00058C  C002  FFDD         	movff	?___awmod+1,postdec2
  1799                           
  1800                           ;timers.c: 98:         *pdawnminute = *pdawnminute + timedifference % 60;
  1801  000590  C026  FFD9         	movff	SunPleaseFixTheDamnClock@pdawnminute,fsr2l
  1802  000594  C027  FFDA         	movff	SunPleaseFixTheDamnClock@pdawnminute+1,fsr2h
  1803  000598  CFDE F031          	movff	postinc2,??_SunPleaseFixTheDamnClock
  1804  00059C  CFDD F032          	movff	postdec2,??_SunPleaseFixTheDamnClock+1
  1805  0005A0  C039  F001         	movff	SunPleaseFixTheDamnClock@timedifference,___awmod@dividend
  1806  0005A4  C03A  F002         	movff	SunPleaseFixTheDamnClock@timedifference+1,___awmod@dividend+1
  1807  0005A8  0E00               	movlw	0
  1808  0005AA  6E04               	movwf	(___awmod@divisor+1)^0,c
  1809  0005AC  0E3C               	movlw	60
  1810  0005AE  6E03               	movwf	___awmod@divisor^0,c
  1811  0005B0  EC0A  F007         	call	___awmod	;wreg free
  1812  0005B4  5031               	movf	??_SunPleaseFixTheDamnClock^0,w,c
  1813  0005B6  2601               	addwf	?___awmod^0,f,c
  1814  0005B8  5032               	movf	(??_SunPleaseFixTheDamnClock+1)^0,w,c
  1815  0005BA  2202               	addwfc	(?___awmod+1)^0,f,c
  1816  0005BC  C026  FFD9         	movff	SunPleaseFixTheDamnClock@pdawnminute,fsr2l
  1817  0005C0  C027  FFDA         	movff	SunPleaseFixTheDamnClock@pdawnminute+1,fsr2h
  1818  0005C4  C001  FFDE         	movff	?___awmod,postinc2
  1819  0005C8  C002  FFDD         	movff	?___awmod+1,postdec2
  1820                           
  1821                           ;timers.c: 99:         *pduskminute = *pduskminute + timedifference % 60;
  1822  0005CC  C02A  FFD9         	movff	SunPleaseFixTheDamnClock@pduskminute,fsr2l
  1823  0005D0  C02B  FFDA         	movff	SunPleaseFixTheDamnClock@pduskminute+1,fsr2h
  1824  0005D4  CFDE F031          	movff	postinc2,??_SunPleaseFixTheDamnClock
  1825  0005D8  CFDD F032          	movff	postdec2,??_SunPleaseFixTheDamnClock+1
  1826  0005DC  C039  F001         	movff	SunPleaseFixTheDamnClock@timedifference,___awmod@dividend
  1827  0005E0  C03A  F002         	movff	SunPleaseFixTheDamnClock@timedifference+1,___awmod@dividend+1
  1828  0005E4  0E00               	movlw	0
  1829  0005E6  6E04               	movwf	(___awmod@divisor+1)^0,c
  1830  0005E8  0E3C               	movlw	60
  1831  0005EA  6E03               	movwf	___awmod@divisor^0,c
  1832  0005EC  EC0A  F007         	call	___awmod	;wreg free
  1833  0005F0  5031               	movf	??_SunPleaseFixTheDamnClock^0,w,c
  1834  0005F2  2601               	addwf	?___awmod^0,f,c
  1835  0005F4  5032               	movf	(??_SunPleaseFixTheDamnClock+1)^0,w,c
  1836  0005F6  2202               	addwfc	(?___awmod+1)^0,f,c
  1837  0005F8  C02A  FFD9         	movff	SunPleaseFixTheDamnClock@pduskminute,fsr2l
  1838  0005FC  C02B  FFDA         	movff	SunPleaseFixTheDamnClock@pduskminute+1,fsr2h
  1839  000600  C001  FFDE         	movff	?___awmod,postinc2
  1840  000604  C002  FFDD         	movff	?___awmod+1,postdec2
  1841  000608                     
  1842                           ;timers.c: 101:         if (*pminute < 0) {--*phour; *pminute = *pminute + 60;}
  1843  000608  C02E  FFD9         	movff	SunPleaseFixTheDamnClock@pminute,fsr2l
  1844  00060C  C02F  FFDA         	movff	SunPleaseFixTheDamnClock@pminute+1,fsr2h
  1845  000610  0E01               	movlw	1
  1846  000612  BEDB               	btfsc	plusw2,7,c
  1847  000614  EF10  F003         	goto	u1570
  1848  000618  EF0E  F003         	goto	u1571
  1849  00061C                     u1571:
  1850  00061C  EF2B  F003         	goto	l175
  1851  000620                     u1570:
  1852  000620  C02C  FFD9         	movff	SunPleaseFixTheDamnClock@phour,fsr2l
  1853  000624  C02D  FFDA         	movff	SunPleaseFixTheDamnClock@phour+1,fsr2h
  1854  000628  06DE               	decf	postinc2,f,c
  1855  00062A  0E00               	movlw	0
  1856  00062C  5ADD               	subwfb	postdec2,f,c
  1857  00062E  C02E  FFD9         	movff	SunPleaseFixTheDamnClock@pminute,fsr2l
  1858  000632  C02F  FFDA         	movff	SunPleaseFixTheDamnClock@pminute+1,fsr2h
  1859  000636  CFDE F031          	movff	postinc2,??_SunPleaseFixTheDamnClock
  1860  00063A  CFDD F032          	movff	postdec2,??_SunPleaseFixTheDamnClock+1
  1861  00063E  0E3C               	movlw	60
  1862  000640  2631               	addwf	??_SunPleaseFixTheDamnClock^0,f,c
  1863  000642  0E00               	movlw	0
  1864  000644  2232               	addwfc	(??_SunPleaseFixTheDamnClock+1)^0,f,c
  1865  000646  C02E  FFD9         	movff	SunPleaseFixTheDamnClock@pminute,fsr2l
  1866  00064A  C02F  FFDA         	movff	SunPleaseFixTheDamnClock@pminute+1,fsr2h
  1867  00064E  C031  FFDE         	movff	??_SunPleaseFixTheDamnClock,postinc2
  1868  000652  C032  FFDD         	movff	??_SunPleaseFixTheDamnClock+1,postdec2
  1869  000656                     l175:
  1870                           
  1871                           ;timers.c: 103:         if (*pdawnminute >= 60) {++*pdawnhour; *pdawnminute = *pdawnminu
      +                          te - 60;}
  1872  000656  C026  FFD9         	movff	SunPleaseFixTheDamnClock@pdawnminute,fsr2l
  1873  00065A  C027  FFDA         	movff	SunPleaseFixTheDamnClock@pdawnminute+1,fsr2h
  1874  00065E  0E01               	movlw	1
  1875  000660  BEDB               	btfsc	plusw2,7,c
  1876  000662  EF3D  F003         	goto	u1581
  1877  000666  0E01               	movlw	1
  1878  000668  50DB               	movf	plusw2,w,c
  1879  00066A  E109               	bnz	u1580
  1880  00066C  0E3C               	movlw	60
  1881  00066E  5CDE               	subwf	postinc2,w,c
  1882  000670  A0D8               	btfss	status,0,c
  1883  000672  EF3D  F003         	goto	u1581
  1884  000676  EF3F  F003         	goto	u1580
  1885  00067A                     u1581:
  1886  00067A  EF60  F003         	goto	l1604
  1887  00067E                     u1580:
  1888  00067E  C024  FFD9         	movff	SunPleaseFixTheDamnClock@pdawnhour,fsr2l
  1889  000682  C025  FFDA         	movff	SunPleaseFixTheDamnClock@pdawnhour+1,fsr2h
  1890  000686  2ADE               	incf	postinc2,f,c
  1891  000688  0E00               	movlw	0
  1892  00068A  22DD               	addwfc	postdec2,f,c
  1893  00068C  0EC4               	movlw	196
  1894  00068E  6E31               	movwf	??_SunPleaseFixTheDamnClock^0,c
  1895  000690  0EFF               	movlw	255
  1896  000692  6E32               	movwf	(??_SunPleaseFixTheDamnClock+1)^0,c
  1897  000694  C026  FFD9         	movff	SunPleaseFixTheDamnClock@pdawnminute,fsr2l
  1898  000698  C027  FFDA         	movff	SunPleaseFixTheDamnClock@pdawnminute+1,fsr2h
  1899  00069C  CFDE F033          	movff	postinc2,??_SunPleaseFixTheDamnClock+2
  1900  0006A0  CFDD F034          	movff	postdec2,??_SunPleaseFixTheDamnClock+3
  1901  0006A4  5031               	movf	??_SunPleaseFixTheDamnClock^0,w,c
  1902  0006A6  2633               	addwf	(??_SunPleaseFixTheDamnClock+2)^0,f,c
  1903  0006A8  5032               	movf	(??_SunPleaseFixTheDamnClock+1)^0,w,c
  1904  0006AA  2234               	addwfc	(??_SunPleaseFixTheDamnClock+3)^0,f,c
  1905  0006AC  C026  FFD9         	movff	SunPleaseFixTheDamnClock@pdawnminute,fsr2l
  1906  0006B0  C027  FFDA         	movff	SunPleaseFixTheDamnClock@pdawnminute+1,fsr2h
  1907  0006B4  C033  FFDE         	movff	??_SunPleaseFixTheDamnClock+2,postinc2
  1908  0006B8  C034  FFDD         	movff	??_SunPleaseFixTheDamnClock+3,postdec2
  1909  0006BC  EF87  F003         	goto	l177
  1910  0006C0                     l1604:
  1911  0006C0  C026  FFD9         	movff	SunPleaseFixTheDamnClock@pdawnminute,fsr2l
  1912  0006C4  C027  FFDA         	movff	SunPleaseFixTheDamnClock@pdawnminute+1,fsr2h
  1913  0006C8  0E01               	movlw	1
  1914  0006CA  BEDB               	btfsc	plusw2,7,c
  1915  0006CC  EF6C  F003         	goto	u1590
  1916  0006D0  EF6A  F003         	goto	u1591
  1917  0006D4                     u1591:
  1918  0006D4  EF87  F003         	goto	l177
  1919  0006D8                     u1590:
  1920  0006D8  C024  FFD9         	movff	SunPleaseFixTheDamnClock@pdawnhour,fsr2l
  1921  0006DC  C025  FFDA         	movff	SunPleaseFixTheDamnClock@pdawnhour+1,fsr2h
  1922  0006E0  06DE               	decf	postinc2,f,c
  1923  0006E2  0E00               	movlw	0
  1924  0006E4  5ADD               	subwfb	postdec2,f,c
  1925  0006E6  C026  FFD9         	movff	SunPleaseFixTheDamnClock@pdawnminute,fsr2l
  1926  0006EA  C027  FFDA         	movff	SunPleaseFixTheDamnClock@pdawnminute+1,fsr2h
  1927  0006EE  CFDE F031          	movff	postinc2,??_SunPleaseFixTheDamnClock
  1928  0006F2  CFDD F032          	movff	postdec2,??_SunPleaseFixTheDamnClock+1
  1929  0006F6  0E3C               	movlw	60
  1930  0006F8  2631               	addwf	??_SunPleaseFixTheDamnClock^0,f,c
  1931  0006FA  0E00               	movlw	0
  1932  0006FC  2232               	addwfc	(??_SunPleaseFixTheDamnClock+1)^0,f,c
  1933  0006FE  C026  FFD9         	movff	SunPleaseFixTheDamnClock@pdawnminute,fsr2l
  1934  000702  C027  FFDA         	movff	SunPleaseFixTheDamnClock@pdawnminute+1,fsr2h
  1935  000706  C031  FFDE         	movff	??_SunPleaseFixTheDamnClock,postinc2
  1936  00070A  C032  FFDD         	movff	??_SunPleaseFixTheDamnClock+1,postdec2
  1937  00070E                     l177:
  1938                           
  1939                           ;timers.c: 106:         if (*pduskminute >= 60) {++*pduskhour; *pduskminute = *pduskminu
      +                          te - 60;}
  1940  00070E  C02A  FFD9         	movff	SunPleaseFixTheDamnClock@pduskminute,fsr2l
  1941  000712  C02B  FFDA         	movff	SunPleaseFixTheDamnClock@pduskminute+1,fsr2h
  1942  000716  0E01               	movlw	1
  1943  000718  BEDB               	btfsc	plusw2,7,c
  1944  00071A  EF99  F003         	goto	u1601
  1945  00071E  0E01               	movlw	1
  1946  000720  50DB               	movf	plusw2,w,c
  1947  000722  E109               	bnz	u1600
  1948  000724  0E3C               	movlw	60
  1949  000726  5CDE               	subwf	postinc2,w,c
  1950  000728  A0D8               	btfss	status,0,c
  1951  00072A  EF99  F003         	goto	u1601
  1952  00072E  EF9B  F003         	goto	u1600
  1953  000732                     u1601:
  1954  000732  EFBC  F003         	goto	l1610
  1955  000736                     u1600:
  1956  000736  C028  FFD9         	movff	SunPleaseFixTheDamnClock@pduskhour,fsr2l
  1957  00073A  C029  FFDA         	movff	SunPleaseFixTheDamnClock@pduskhour+1,fsr2h
  1958  00073E  2ADE               	incf	postinc2,f,c
  1959  000740  0E00               	movlw	0
  1960  000742  22DD               	addwfc	postdec2,f,c
  1961  000744  0EC4               	movlw	196
  1962  000746  6E31               	movwf	??_SunPleaseFixTheDamnClock^0,c
  1963  000748  0EFF               	movlw	255
  1964  00074A  6E32               	movwf	(??_SunPleaseFixTheDamnClock+1)^0,c
  1965  00074C  C02A  FFD9         	movff	SunPleaseFixTheDamnClock@pduskminute,fsr2l
  1966  000750  C02B  FFDA         	movff	SunPleaseFixTheDamnClock@pduskminute+1,fsr2h
  1967  000754  CFDE F033          	movff	postinc2,??_SunPleaseFixTheDamnClock+2
  1968  000758  CFDD F034          	movff	postdec2,??_SunPleaseFixTheDamnClock+3
  1969  00075C  5031               	movf	??_SunPleaseFixTheDamnClock^0,w,c
  1970  00075E  2633               	addwf	(??_SunPleaseFixTheDamnClock+2)^0,f,c
  1971  000760  5032               	movf	(??_SunPleaseFixTheDamnClock+1)^0,w,c
  1972  000762  2234               	addwfc	(??_SunPleaseFixTheDamnClock+3)^0,f,c
  1973  000764  C02A  FFD9         	movff	SunPleaseFixTheDamnClock@pduskminute,fsr2l
  1974  000768  C02B  FFDA         	movff	SunPleaseFixTheDamnClock@pduskminute+1,fsr2h
  1975  00076C  C033  FFDE         	movff	??_SunPleaseFixTheDamnClock+2,postinc2
  1976  000770  C034  FFDD         	movff	??_SunPleaseFixTheDamnClock+3,postdec2
  1977  000774  EFE3  F003         	goto	l1614
  1978  000778                     l1610:
  1979  000778  C02A  FFD9         	movff	SunPleaseFixTheDamnClock@pduskminute,fsr2l
  1980  00077C  C02B  FFDA         	movff	SunPleaseFixTheDamnClock@pduskminute+1,fsr2h
  1981  000780  0E01               	movlw	1
  1982  000782  BEDB               	btfsc	plusw2,7,c
  1983  000784  EFC8  F003         	goto	u1610
  1984  000788  EFC6  F003         	goto	u1611
  1985  00078C                     u1611:
  1986  00078C  EFE3  F003         	goto	l1614
  1987  000790                     u1610:
  1988  000790  C028  FFD9         	movff	SunPleaseFixTheDamnClock@pduskhour,fsr2l
  1989  000794  C029  FFDA         	movff	SunPleaseFixTheDamnClock@pduskhour+1,fsr2h
  1990  000798  06DE               	decf	postinc2,f,c
  1991  00079A  0E00               	movlw	0
  1992  00079C  5ADD               	subwfb	postdec2,f,c
  1993  00079E  C02A  FFD9         	movff	SunPleaseFixTheDamnClock@pduskminute,fsr2l
  1994  0007A2  C02B  FFDA         	movff	SunPleaseFixTheDamnClock@pduskminute+1,fsr2h
  1995  0007A6  CFDE F031          	movff	postinc2,??_SunPleaseFixTheDamnClock
  1996  0007AA  CFDD F032          	movff	postdec2,??_SunPleaseFixTheDamnClock+1
  1997  0007AE  0E3C               	movlw	60
  1998  0007B0  2631               	addwf	??_SunPleaseFixTheDamnClock^0,f,c
  1999  0007B2  0E00               	movlw	0
  2000  0007B4  2232               	addwfc	(??_SunPleaseFixTheDamnClock+1)^0,f,c
  2001  0007B6  C02A  FFD9         	movff	SunPleaseFixTheDamnClock@pduskminute,fsr2l
  2002  0007BA  C02B  FFDA         	movff	SunPleaseFixTheDamnClock@pduskminute+1,fsr2h
  2003  0007BE  C031  FFDE         	movff	??_SunPleaseFixTheDamnClock,postinc2
  2004  0007C2  C032  FFDD         	movff	??_SunPleaseFixTheDamnClock+1,postdec2
  2005  0007C6                     l1614:
  2006                           
  2007                           ;timers.c: 109:         *phour = 12 + timedifference / 60;
  2008  0007C6  C039  F00A         	movff	SunPleaseFixTheDamnClock@timedifference,___awdiv@dividend
  2009  0007CA  C03A  F00B         	movff	SunPleaseFixTheDamnClock@timedifference+1,___awdiv@dividend+1
  2010  0007CE  0E00               	movlw	0
  2011  0007D0  6E0D               	movwf	(___awdiv@divisor+1)^0,c
  2012  0007D2  0E3C               	movlw	60
  2013  0007D4  6E0C               	movwf	___awdiv@divisor^0,c
  2014  0007D6  EC4D  F006         	call	___awdiv	;wreg free
  2015  0007DA  0E0C               	movlw	12
  2016  0007DC  260A               	addwf	?___awdiv^0,f,c
  2017  0007DE  0E00               	movlw	0
  2018  0007E0  220B               	addwfc	(?___awdiv+1)^0,f,c
  2019  0007E2  C02C  FFD9         	movff	SunPleaseFixTheDamnClock@phour,fsr2l
  2020  0007E6  C02D  FFDA         	movff	SunPleaseFixTheDamnClock@phour+1,fsr2h
  2021  0007EA  C00A  FFDE         	movff	?___awdiv,postinc2
  2022  0007EE  C00B  FFDD         	movff	?___awdiv+1,postdec2
  2023  0007F2                     
  2024                           ;timers.c: 110:         *pdawnhour = *pdawnhour + timedifference / 60;
  2025  0007F2  C024  FFD9         	movff	SunPleaseFixTheDamnClock@pdawnhour,fsr2l
  2026  0007F6  C025  FFDA         	movff	SunPleaseFixTheDamnClock@pdawnhour+1,fsr2h
  2027  0007FA  CFDE F031          	movff	postinc2,??_SunPleaseFixTheDamnClock
  2028  0007FE  CFDD F032          	movff	postdec2,??_SunPleaseFixTheDamnClock+1
  2029  000802  C039  F00A         	movff	SunPleaseFixTheDamnClock@timedifference,___awdiv@dividend
  2030  000806  C03A  F00B         	movff	SunPleaseFixTheDamnClock@timedifference+1,___awdiv@dividend+1
  2031  00080A  0E00               	movlw	0
  2032  00080C  6E0D               	movwf	(___awdiv@divisor+1)^0,c
  2033  00080E  0E3C               	movlw	60
  2034  000810  6E0C               	movwf	___awdiv@divisor^0,c
  2035  000812  EC4D  F006         	call	___awdiv	;wreg free
  2036  000816  5031               	movf	??_SunPleaseFixTheDamnClock^0,w,c
  2037  000818  260A               	addwf	?___awdiv^0,f,c
  2038  00081A  5032               	movf	(??_SunPleaseFixTheDamnClock+1)^0,w,c
  2039  00081C  220B               	addwfc	(?___awdiv+1)^0,f,c
  2040  00081E  C024  FFD9         	movff	SunPleaseFixTheDamnClock@pdawnhour,fsr2l
  2041  000822  C025  FFDA         	movff	SunPleaseFixTheDamnClock@pdawnhour+1,fsr2h
  2042  000826  C00A  FFDE         	movff	?___awdiv,postinc2
  2043  00082A  C00B  FFDD         	movff	?___awdiv+1,postdec2
  2044  00082E                     
  2045                           ;timers.c: 111:         *pduskhour = *pduskhour + timedifference / 60;
  2046  00082E  C028  FFD9         	movff	SunPleaseFixTheDamnClock@pduskhour,fsr2l
  2047  000832  C029  FFDA         	movff	SunPleaseFixTheDamnClock@pduskhour+1,fsr2h
  2048  000836  CFDE F031          	movff	postinc2,??_SunPleaseFixTheDamnClock
  2049  00083A  CFDD F032          	movff	postdec2,??_SunPleaseFixTheDamnClock+1
  2050  00083E  C039  F00A         	movff	SunPleaseFixTheDamnClock@timedifference,___awdiv@dividend
  2051  000842  C03A  F00B         	movff	SunPleaseFixTheDamnClock@timedifference+1,___awdiv@dividend+1
  2052  000846  0E00               	movlw	0
  2053  000848  6E0D               	movwf	(___awdiv@divisor+1)^0,c
  2054  00084A  0E3C               	movlw	60
  2055  00084C  6E0C               	movwf	___awdiv@divisor^0,c
  2056  00084E  EC4D  F006         	call	___awdiv	;wreg free
  2057  000852  5031               	movf	??_SunPleaseFixTheDamnClock^0,w,c
  2058  000854  260A               	addwf	?___awdiv^0,f,c
  2059  000856  5032               	movf	(??_SunPleaseFixTheDamnClock+1)^0,w,c
  2060  000858  220B               	addwfc	(?___awdiv+1)^0,f,c
  2061  00085A  C028  FFD9         	movff	SunPleaseFixTheDamnClock@pduskhour,fsr2l
  2062  00085E  C029  FFDA         	movff	SunPleaseFixTheDamnClock@pduskhour+1,fsr2h
  2063  000862  C00A  FFDE         	movff	?___awdiv,postinc2
  2064  000866  C00B  FFDD         	movff	?___awdiv+1,postdec2
  2065  00086A                     l182:
  2066  00086A  0012               	return		;funcret
  2067  00086C                     __end_of_SunPleaseFixTheDamnClock:
  2068                           	callstack 0
  2069                           
  2070 ;; *************** function _TimeAvg *****************
  2071 ;; Defined at:
  2072 ;;		line 138 in file "timers.c"
  2073 ;; Parameters:    Size  Location     Type
  2074 ;;  hour1           2   17[COMRAM] int 
  2075 ;;  minute1         2   19[COMRAM] int 
  2076 ;;  hour2           2   21[COMRAM] int 
  2077 ;;  minute2         2   23[COMRAM] int 
  2078 ;;  pavghour        2   25[COMRAM] PTR int 
  2079 ;;		 -> SunPleaseFixTheDamnClock@avghour(2), 
  2080 ;;  pavgminute      2   27[COMRAM] PTR int 
  2081 ;;		 -> SunPleaseFixTheDamnClock@avgminute(2), 
  2082 ;; Auto vars:     Size  Location     Type
  2083 ;;  HalfTimeDiff    2   33[COMRAM] int 
  2084 ;; Return value:  Size  Location     Type
  2085 ;;                  1    wreg      void 
  2086 ;; Registers used:
  2087 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2088 ;; Tracked objects:
  2089 ;;		On entry : 0/0
  2090 ;;		On exit  : 0/0
  2091 ;;		Unchanged: 0/0
  2092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2093 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2094 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2095 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2096 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2097 ;;Total ram usage:       18 bytes
  2098 ;; Hardware stack levels used: 1
  2099 ;; Hardware stack levels required when called: 2
  2100 ;; This function calls:
  2101 ;;		_TimeDiff
  2102 ;;		___awdiv
  2103 ;;		___awmod
  2104 ;; This function is called by:
  2105 ;;		_SunPleaseFixTheDamnClock
  2106 ;; This function uses a non-reentrant model
  2107 ;;
  2108                           
  2109                           	psect	text7
  2110  000B48                     __ptext7:
  2111                           	callstack 0
  2112  000B48                     _TimeAvg:
  2113                           	callstack 27
  2114  000B48                     
  2115                           ;timers.c: 138: void TimeAvg(int hour1, int minute1, int hour2, int minute2, int *pavgho
      +                          ur, int *pavgminute);timers.c: 139: {;timers.c: 140:     int HalfTimeDiff = TimeDiff(hou
      +                          r1, minute1, hour2, minute2) / 2;
  2116  000B48  C018  F007         	movff	TimeAvg@minute2,TimeDiff@minute2
  2117  000B4C  C019  F008         	movff	TimeAvg@minute2+1,TimeDiff@minute2+1
  2118  000B50  C016  F005         	movff	TimeAvg@hour2,TimeDiff@hour2
  2119  000B54  C017  F006         	movff	TimeAvg@hour2+1,TimeDiff@hour2+1
  2120  000B58  C014  F003         	movff	TimeAvg@minute1,TimeDiff@minute1
  2121  000B5C  C015  F004         	movff	TimeAvg@minute1+1,TimeDiff@minute1+1
  2122  000B60  C012  F001         	movff	TimeAvg@hour1,TimeDiff@hour1
  2123  000B64  C013  F002         	movff	TimeAvg@hour1+1,TimeDiff@hour1+1
  2124  000B68  ECAF  F006         	call	_TimeDiff	;wreg free
  2125  000B6C  C001  F00A         	movff	?_TimeDiff,___awdiv@dividend
  2126  000B70  C002  F00B         	movff	?_TimeDiff+1,___awdiv@dividend+1
  2127  000B74  0E00               	movlw	0
  2128  000B76  6E0D               	movwf	(___awdiv@divisor+1)^0,c
  2129  000B78  0E02               	movlw	2
  2130  000B7A  6E0C               	movwf	___awdiv@divisor^0,c
  2131  000B7C  EC4D  F006         	call	___awdiv	;wreg free
  2132  000B80  C00A  F022         	movff	?___awdiv,TimeAvg@HalfTimeDiff
  2133  000B84  C00B  F023         	movff	?___awdiv+1,TimeAvg@HalfTimeDiff+1
  2134  000B88                     
  2135                           ;timers.c: 142:     *pavghour = hour1 + HalfTimeDiff / 60;
  2136  000B88  C022  F00A         	movff	TimeAvg@HalfTimeDiff,___awdiv@dividend
  2137  000B8C  C023  F00B         	movff	TimeAvg@HalfTimeDiff+1,___awdiv@dividend+1
  2138  000B90  0E00               	movlw	0
  2139  000B92  6E0D               	movwf	(___awdiv@divisor+1)^0,c
  2140  000B94  0E3C               	movlw	60
  2141  000B96  6E0C               	movwf	___awdiv@divisor^0,c
  2142  000B98  EC4D  F006         	call	___awdiv	;wreg free
  2143  000B9C  5012               	movf	TimeAvg@hour1^0,w,c
  2144  000B9E  260A               	addwf	?___awdiv^0,f,c
  2145  000BA0  5013               	movf	(TimeAvg@hour1+1)^0,w,c
  2146  000BA2  220B               	addwfc	(?___awdiv+1)^0,f,c
  2147  000BA4  C01A  FFD9         	movff	TimeAvg@pavghour,fsr2l
  2148  000BA8  C01B  FFDA         	movff	TimeAvg@pavghour+1,fsr2h
  2149  000BAC  C00A  FFDE         	movff	?___awdiv,postinc2
  2150  000BB0  C00B  FFDD         	movff	?___awdiv+1,postdec2
  2151  000BB4                     
  2152                           ;timers.c: 143:     *pavgminute = minute1 + HalfTimeDiff % 60;
  2153  000BB4  C022  F001         	movff	TimeAvg@HalfTimeDiff,___awmod@dividend
  2154  000BB8  C023  F002         	movff	TimeAvg@HalfTimeDiff+1,___awmod@dividend+1
  2155  000BBC  0E00               	movlw	0
  2156  000BBE  6E04               	movwf	(___awmod@divisor+1)^0,c
  2157  000BC0  0E3C               	movlw	60
  2158  000BC2  6E03               	movwf	___awmod@divisor^0,c
  2159  000BC4  EC0A  F007         	call	___awmod	;wreg free
  2160  000BC8  5014               	movf	TimeAvg@minute1^0,w,c
  2161  000BCA  2601               	addwf	?___awmod^0,f,c
  2162  000BCC  5015               	movf	(TimeAvg@minute1+1)^0,w,c
  2163  000BCE  2202               	addwfc	(?___awmod+1)^0,f,c
  2164  000BD0  C01C  FFD9         	movff	TimeAvg@pavgminute,fsr2l
  2165  000BD4  C01D  FFDA         	movff	TimeAvg@pavgminute+1,fsr2h
  2166  000BD8  C001  FFDE         	movff	?___awmod,postinc2
  2167  000BDC  C002  FFDD         	movff	?___awmod+1,postdec2
  2168  000BE0                     
  2169                           ;timers.c: 145:     if (*pavgminute >= 60) {++*pavghour; *pavgminute = *pavgminute - 60;
      +                          }
  2170  000BE0  C01C  FFD9         	movff	TimeAvg@pavgminute,fsr2l
  2171  000BE4  C01D  FFDA         	movff	TimeAvg@pavgminute+1,fsr2h
  2172  000BE8  0E01               	movlw	1
  2173  000BEA  BEDB               	btfsc	plusw2,7,c
  2174  000BEC  EF02  F006         	goto	u1071
  2175  000BF0  0E01               	movlw	1
  2176  000BF2  50DB               	movf	plusw2,w,c
  2177  000BF4  E109               	bnz	u1070
  2178  000BF6  0E3C               	movlw	60
  2179  000BF8  5CDE               	subwf	postinc2,w,c
  2180  000BFA  A0D8               	btfss	status,0,c
  2181  000BFC  EF02  F006         	goto	u1071
  2182  000C00  EF04  F006         	goto	u1070
  2183  000C04                     u1071:
  2184  000C04  EF25  F006         	goto	l1436
  2185  000C08                     u1070:
  2186  000C08  C01A  FFD9         	movff	TimeAvg@pavghour,fsr2l
  2187  000C0C  C01B  FFDA         	movff	TimeAvg@pavghour+1,fsr2h
  2188  000C10  2ADE               	incf	postinc2,f,c
  2189  000C12  0E00               	movlw	0
  2190  000C14  22DD               	addwfc	postdec2,f,c
  2191  000C16  0EC4               	movlw	196
  2192  000C18  6E1E               	movwf	??_TimeAvg^0,c
  2193  000C1A  0EFF               	movlw	255
  2194  000C1C  6E1F               	movwf	(??_TimeAvg+1)^0,c
  2195  000C1E  C01C  FFD9         	movff	TimeAvg@pavgminute,fsr2l
  2196  000C22  C01D  FFDA         	movff	TimeAvg@pavgminute+1,fsr2h
  2197  000C26  CFDE F020          	movff	postinc2,??_TimeAvg+2
  2198  000C2A  CFDD F021          	movff	postdec2,??_TimeAvg+3
  2199  000C2E  501E               	movf	??_TimeAvg^0,w,c
  2200  000C30  2620               	addwf	(??_TimeAvg+2)^0,f,c
  2201  000C32  501F               	movf	(??_TimeAvg+1)^0,w,c
  2202  000C34  2221               	addwfc	(??_TimeAvg+3)^0,f,c
  2203  000C36  C01C  FFD9         	movff	TimeAvg@pavgminute,fsr2l
  2204  000C3A  C01D  FFDA         	movff	TimeAvg@pavgminute+1,fsr2h
  2205  000C3E  C020  FFDE         	movff	??_TimeAvg+2,postinc2
  2206  000C42  C021  FFDD         	movff	??_TimeAvg+3,postdec2
  2207  000C46  EF4C  F006         	goto	l200
  2208  000C4A                     l1436:
  2209  000C4A  C01C  FFD9         	movff	TimeAvg@pavgminute,fsr2l
  2210  000C4E  C01D  FFDA         	movff	TimeAvg@pavgminute+1,fsr2h
  2211  000C52  0E01               	movlw	1
  2212  000C54  BEDB               	btfsc	plusw2,7,c
  2213  000C56  EF31  F006         	goto	u1080
  2214  000C5A  EF2F  F006         	goto	u1081
  2215  000C5E                     u1081:
  2216  000C5E  EF4C  F006         	goto	l200
  2217  000C62                     u1080:
  2218  000C62  C01A  FFD9         	movff	TimeAvg@pavghour,fsr2l
  2219  000C66  C01B  FFDA         	movff	TimeAvg@pavghour+1,fsr2h
  2220  000C6A  06DE               	decf	postinc2,f,c
  2221  000C6C  0E00               	movlw	0
  2222  000C6E  5ADD               	subwfb	postdec2,f,c
  2223  000C70  C01C  FFD9         	movff	TimeAvg@pavgminute,fsr2l
  2224  000C74  C01D  FFDA         	movff	TimeAvg@pavgminute+1,fsr2h
  2225  000C78  CFDE F01E          	movff	postinc2,??_TimeAvg
  2226  000C7C  CFDD F01F          	movff	postdec2,??_TimeAvg+1
  2227  000C80  0E3C               	movlw	60
  2228  000C82  261E               	addwf	??_TimeAvg^0,f,c
  2229  000C84  0E00               	movlw	0
  2230  000C86  221F               	addwfc	(??_TimeAvg+1)^0,f,c
  2231  000C88  C01C  FFD9         	movff	TimeAvg@pavgminute,fsr2l
  2232  000C8C  C01D  FFDA         	movff	TimeAvg@pavgminute+1,fsr2h
  2233  000C90  C01E  FFDE         	movff	??_TimeAvg,postinc2
  2234  000C94  C01F  FFDD         	movff	??_TimeAvg+1,postdec2
  2235  000C98                     l200:
  2236  000C98  0012               	return		;funcret
  2237  000C9A                     __end_of_TimeAvg:
  2238                           	callstack 0
  2239                           
  2240 ;; *************** function ___awmod *****************
  2241 ;; Defined at:
  2242 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\awmod.c"
  2243 ;; Parameters:    Size  Location     Type
  2244 ;;  dividend        2    0[COMRAM] int 
  2245 ;;  divisor         2    2[COMRAM] int 
  2246 ;; Auto vars:     Size  Location     Type
  2247 ;;  sign            1    5[COMRAM] unsigned char 
  2248 ;;  counter         1    4[COMRAM] unsigned char 
  2249 ;; Return value:  Size  Location     Type
  2250 ;;                  2    0[COMRAM] int 
  2251 ;; Registers used:
  2252 ;;		wreg, status,2, status,0
  2253 ;; Tracked objects:
  2254 ;;		On entry : 0/0
  2255 ;;		On exit  : 0/0
  2256 ;;		Unchanged: 0/0
  2257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2258 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2259 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2260 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2261 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2262 ;;Total ram usage:        6 bytes
  2263 ;; Hardware stack levels used: 1
  2264 ;; Hardware stack levels required when called: 1
  2265 ;; This function calls:
  2266 ;;		Nothing
  2267 ;; This function is called by:
  2268 ;;		_SunPleaseFixTheDamnClock
  2269 ;;		_TimeAvg
  2270 ;; This function uses a non-reentrant model
  2271 ;;
  2272                           
  2273                           	psect	text8
  2274  000E14                     __ptext8:
  2275                           	callstack 0
  2276  000E14                     ___awmod:
  2277                           	callstack 28
  2278  000E14  0E00               	movlw	0
  2279  000E16  6E06               	movwf	___awmod@sign^0,c
  2280  000E18  BE02               	btfsc	(___awmod@dividend+1)^0,7,c
  2281  000E1A  EF13  F007         	goto	u950
  2282  000E1E  EF11  F007         	goto	u951
  2283  000E22                     u951:
  2284  000E22  EF19  F007         	goto	l1368
  2285  000E26                     u950:
  2286  000E26  6C01               	negf	___awmod@dividend^0,c
  2287  000E28  1E02               	comf	(___awmod@dividend+1)^0,f,c
  2288  000E2A  B0D8               	btfsc	status,0,c
  2289  000E2C  2A02               	incf	(___awmod@dividend+1)^0,f,c
  2290  000E2E  0E01               	movlw	1
  2291  000E30  6E06               	movwf	___awmod@sign^0,c
  2292  000E32                     l1368:
  2293  000E32  BE04               	btfsc	(___awmod@divisor+1)^0,7,c
  2294  000E34  EF20  F007         	goto	u960
  2295  000E38  EF1E  F007         	goto	u961
  2296  000E3C                     u961:
  2297  000E3C  EF24  F007         	goto	l1372
  2298  000E40                     u960:
  2299  000E40  6C03               	negf	___awmod@divisor^0,c
  2300  000E42  1E04               	comf	(___awmod@divisor+1)^0,f,c
  2301  000E44  B0D8               	btfsc	status,0,c
  2302  000E46  2A04               	incf	(___awmod@divisor+1)^0,f,c
  2303  000E48                     l1372:
  2304  000E48  5003               	movf	___awmod@divisor^0,w,c
  2305  000E4A  1004               	iorwf	(___awmod@divisor+1)^0,w,c
  2306  000E4C  B4D8               	btfsc	status,2,c
  2307  000E4E  EF2B  F007         	goto	u971
  2308  000E52  EF2D  F007         	goto	u970
  2309  000E56                     u971:
  2310  000E56  EF51  F007         	goto	l1388
  2311  000E5A                     u970:
  2312  000E5A  0E01               	movlw	1
  2313  000E5C  6E05               	movwf	___awmod@counter^0,c
  2314  000E5E  EF35  F007         	goto	l1378
  2315  000E62                     l1376:
  2316  000E62  90D8               	bcf	status,0,c
  2317  000E64  3603               	rlcf	___awmod@divisor^0,f,c
  2318  000E66  3604               	rlcf	(___awmod@divisor+1)^0,f,c
  2319  000E68  2A05               	incf	___awmod@counter^0,f,c
  2320  000E6A                     l1378:
  2321  000E6A  AE04               	btfss	(___awmod@divisor+1)^0,7,c
  2322  000E6C  EF3A  F007         	goto	u981
  2323  000E70  EF3C  F007         	goto	u980
  2324  000E74                     u981:
  2325  000E74  EF31  F007         	goto	l1376
  2326  000E78                     u980:
  2327  000E78                     l1380:
  2328  000E78  5003               	movf	___awmod@divisor^0,w,c
  2329  000E7A  5C01               	subwf	___awmod@dividend^0,w,c
  2330  000E7C  5004               	movf	(___awmod@divisor+1)^0,w,c
  2331  000E7E  5802               	subwfb	(___awmod@dividend+1)^0,w,c
  2332  000E80  A0D8               	btfss	status,0,c
  2333  000E82  EF45  F007         	goto	u991
  2334  000E86  EF47  F007         	goto	u990
  2335  000E8A                     u991:
  2336  000E8A  EF4B  F007         	goto	l1384
  2337  000E8E                     u990:
  2338  000E8E  5003               	movf	___awmod@divisor^0,w,c
  2339  000E90  5E01               	subwf	___awmod@dividend^0,f,c
  2340  000E92  5004               	movf	(___awmod@divisor+1)^0,w,c
  2341  000E94  5A02               	subwfb	(___awmod@dividend+1)^0,f,c
  2342  000E96                     l1384:
  2343  000E96  90D8               	bcf	status,0,c
  2344  000E98  3204               	rrcf	(___awmod@divisor+1)^0,f,c
  2345  000E9A  3203               	rrcf	___awmod@divisor^0,f,c
  2346  000E9C  2E05               	decfsz	___awmod@counter^0,f,c
  2347  000E9E  EF3C  F007         	goto	l1380
  2348  000EA2                     l1388:
  2349  000EA2  5006               	movf	___awmod@sign^0,w,c
  2350  000EA4  B4D8               	btfsc	status,2,c
  2351  000EA6  EF57  F007         	goto	u1001
  2352  000EAA  EF59  F007         	goto	u1000
  2353  000EAE                     u1001:
  2354  000EAE  EF5D  F007         	goto	l1392
  2355  000EB2                     u1000:
  2356  000EB2  6C01               	negf	___awmod@dividend^0,c
  2357  000EB4  1E02               	comf	(___awmod@dividend+1)^0,f,c
  2358  000EB6  B0D8               	btfsc	status,0,c
  2359  000EB8  2A02               	incf	(___awmod@dividend+1)^0,f,c
  2360  000EBA                     l1392:
  2361  000EBA  C001  F001         	movff	___awmod@dividend,?___awmod
  2362  000EBE  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  2363  000EC2  0012               	return		;funcret
  2364  000EC4                     __end_of___awmod:
  2365                           	callstack 0
  2366                           
  2367 ;; *************** function ___awdiv *****************
  2368 ;; Defined at:
  2369 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\awdiv.c"
  2370 ;; Parameters:    Size  Location     Type
  2371 ;;  dividend        2    9[COMRAM] int 
  2372 ;;  divisor         2   11[COMRAM] int 
  2373 ;; Auto vars:     Size  Location     Type
  2374 ;;  quotient        2   15[COMRAM] int 
  2375 ;;  sign            1   14[COMRAM] unsigned char 
  2376 ;;  counter         1   13[COMRAM] unsigned char 
  2377 ;; Return value:  Size  Location     Type
  2378 ;;                  2    9[COMRAM] int 
  2379 ;; Registers used:
  2380 ;;		wreg, status,2, status,0
  2381 ;; Tracked objects:
  2382 ;;		On entry : 0/0
  2383 ;;		On exit  : 0/0
  2384 ;;		Unchanged: 0/0
  2385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2386 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2387 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2388 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2389 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2390 ;;Total ram usage:        8 bytes
  2391 ;; Hardware stack levels used: 1
  2392 ;; Hardware stack levels required when called: 1
  2393 ;; This function calls:
  2394 ;;		Nothing
  2395 ;; This function is called by:
  2396 ;;		_SunPleaseFixTheDamnClock
  2397 ;;		_TimeAvg
  2398 ;; This function uses a non-reentrant model
  2399 ;;
  2400                           
  2401                           	psect	text9
  2402  000C9A                     __ptext9:
  2403                           	callstack 0
  2404  000C9A                     ___awdiv:
  2405                           	callstack 28
  2406  000C9A  0E00               	movlw	0
  2407  000C9C  6E0F               	movwf	___awdiv@sign^0,c
  2408  000C9E  BE0D               	btfsc	(___awdiv@divisor+1)^0,7,c
  2409  000CA0  EF56  F006         	goto	u890
  2410  000CA4  EF54  F006         	goto	u891
  2411  000CA8                     u891:
  2412  000CA8  EF5C  F006         	goto	l1324
  2413  000CAC                     u890:
  2414  000CAC  6C0C               	negf	___awdiv@divisor^0,c
  2415  000CAE  1E0D               	comf	(___awdiv@divisor+1)^0,f,c
  2416  000CB0  B0D8               	btfsc	status,0,c
  2417  000CB2  2A0D               	incf	(___awdiv@divisor+1)^0,f,c
  2418  000CB4  0E01               	movlw	1
  2419  000CB6  6E0F               	movwf	___awdiv@sign^0,c
  2420  000CB8                     l1324:
  2421  000CB8  BE0B               	btfsc	(___awdiv@dividend+1)^0,7,c
  2422  000CBA  EF63  F006         	goto	u900
  2423  000CBE  EF61  F006         	goto	u901
  2424  000CC2                     u901:
  2425  000CC2  EF69  F006         	goto	l1330
  2426  000CC6                     u900:
  2427  000CC6  6C0A               	negf	___awdiv@dividend^0,c
  2428  000CC8  1E0B               	comf	(___awdiv@dividend+1)^0,f,c
  2429  000CCA  B0D8               	btfsc	status,0,c
  2430  000CCC  2A0B               	incf	(___awdiv@dividend+1)^0,f,c
  2431  000CCE  0E01               	movlw	1
  2432  000CD0  1A0F               	xorwf	___awdiv@sign^0,f,c
  2433  000CD2                     l1330:
  2434  000CD2  0E00               	movlw	0
  2435  000CD4  6E11               	movwf	(___awdiv@quotient+1)^0,c
  2436  000CD6  0E00               	movlw	0
  2437  000CD8  6E10               	movwf	___awdiv@quotient^0,c
  2438  000CDA  500C               	movf	___awdiv@divisor^0,w,c
  2439  000CDC  100D               	iorwf	(___awdiv@divisor+1)^0,w,c
  2440  000CDE  B4D8               	btfsc	status,2,c
  2441  000CE0  EF74  F006         	goto	u911
  2442  000CE4  EF76  F006         	goto	u910
  2443  000CE8                     u911:
  2444  000CE8  EF9E  F006         	goto	l1352
  2445  000CEC                     u910:
  2446  000CEC  0E01               	movlw	1
  2447  000CEE  6E0E               	movwf	___awdiv@counter^0,c
  2448  000CF0  EF7E  F006         	goto	l1338
  2449  000CF4                     l1336:
  2450  000CF4  90D8               	bcf	status,0,c
  2451  000CF6  360C               	rlcf	___awdiv@divisor^0,f,c
  2452  000CF8  360D               	rlcf	(___awdiv@divisor+1)^0,f,c
  2453  000CFA  2A0E               	incf	___awdiv@counter^0,f,c
  2454  000CFC                     l1338:
  2455  000CFC  AE0D               	btfss	(___awdiv@divisor+1)^0,7,c
  2456  000CFE  EF83  F006         	goto	u921
  2457  000D02  EF85  F006         	goto	u920
  2458  000D06                     u921:
  2459  000D06  EF7A  F006         	goto	l1336
  2460  000D0A                     u920:
  2461  000D0A                     l1340:
  2462  000D0A  90D8               	bcf	status,0,c
  2463  000D0C  3610               	rlcf	___awdiv@quotient^0,f,c
  2464  000D0E  3611               	rlcf	(___awdiv@quotient+1)^0,f,c
  2465  000D10  500C               	movf	___awdiv@divisor^0,w,c
  2466  000D12  5C0A               	subwf	___awdiv@dividend^0,w,c
  2467  000D14  500D               	movf	(___awdiv@divisor+1)^0,w,c
  2468  000D16  580B               	subwfb	(___awdiv@dividend+1)^0,w,c
  2469  000D18  A0D8               	btfss	status,0,c
  2470  000D1A  EF91  F006         	goto	u931
  2471  000D1E  EF93  F006         	goto	u930
  2472  000D22                     u931:
  2473  000D22  EF98  F006         	goto	l1348
  2474  000D26                     u930:
  2475  000D26  500C               	movf	___awdiv@divisor^0,w,c
  2476  000D28  5E0A               	subwf	___awdiv@dividend^0,f,c
  2477  000D2A  500D               	movf	(___awdiv@divisor+1)^0,w,c
  2478  000D2C  5A0B               	subwfb	(___awdiv@dividend+1)^0,f,c
  2479  000D2E  8010               	bsf	___awdiv@quotient^0,0,c
  2480  000D30                     l1348:
  2481  000D30  90D8               	bcf	status,0,c
  2482  000D32  320D               	rrcf	(___awdiv@divisor+1)^0,f,c
  2483  000D34  320C               	rrcf	___awdiv@divisor^0,f,c
  2484  000D36  2E0E               	decfsz	___awdiv@counter^0,f,c
  2485  000D38  EF85  F006         	goto	l1340
  2486  000D3C                     l1352:
  2487  000D3C  500F               	movf	___awdiv@sign^0,w,c
  2488  000D3E  B4D8               	btfsc	status,2,c
  2489  000D40  EFA4  F006         	goto	u941
  2490  000D44  EFA6  F006         	goto	u940
  2491  000D48                     u941:
  2492  000D48  EFAA  F006         	goto	l1356
  2493  000D4C                     u940:
  2494  000D4C  6C10               	negf	___awdiv@quotient^0,c
  2495  000D4E  1E11               	comf	(___awdiv@quotient+1)^0,f,c
  2496  000D50  B0D8               	btfsc	status,0,c
  2497  000D52  2A11               	incf	(___awdiv@quotient+1)^0,f,c
  2498  000D54                     l1356:
  2499  000D54  C010  F00A         	movff	___awdiv@quotient,?___awdiv
  2500  000D58  C011  F00B         	movff	___awdiv@quotient+1,?___awdiv+1
  2501  000D5C  0012               	return		;funcret
  2502  000D5E                     __end_of___awdiv:
  2503                           	callstack 0
  2504                           
  2505 ;; *************** function _TimeDiff *****************
  2506 ;; Defined at:
  2507 ;;		line 118 in file "timers.c"
  2508 ;; Parameters:    Size  Location     Type
  2509 ;;  hour1           2    0[COMRAM] int 
  2510 ;;  minute1         2    2[COMRAM] int 
  2511 ;;  hour2           2    4[COMRAM] int 
  2512 ;;  minute2         2    6[COMRAM] int 
  2513 ;; Auto vars:     Size  Location     Type
  2514 ;;		None
  2515 ;; Return value:  Size  Location     Type
  2516 ;;                  2    0[COMRAM] int 
  2517 ;; Registers used:
  2518 ;;		wreg, status,2, status,0
  2519 ;; Tracked objects:
  2520 ;;		On entry : 0/0
  2521 ;;		On exit  : 0/0
  2522 ;;		Unchanged: 0/0
  2523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2524 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2525 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2526 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2527 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2528 ;;Total ram usage:        9 bytes
  2529 ;; Hardware stack levels used: 1
  2530 ;; Hardware stack levels required when called: 1
  2531 ;; This function calls:
  2532 ;;		Nothing
  2533 ;; This function is called by:
  2534 ;;		_SunPleaseFixTheDamnClock
  2535 ;;		_TimeAvg
  2536 ;; This function uses a non-reentrant model
  2537 ;;
  2538                           
  2539                           	psect	text10
  2540  000D5E                     __ptext10:
  2541                           	callstack 0
  2542  000D5E                     _TimeDiff:
  2543                           	callstack 28
  2544  000D5E                     
  2545                           ;timers.c: 118: int TimeDiff(int hour1, int minute1, int hour2, int minute2);timers.c: 1
      +                          19: {;timers.c: 120:     if (hour2 > hour1) {
  2546  000D5E  5005               	movf	TimeDiff@hour2^0,w,c
  2547  000D60  5C01               	subwf	TimeDiff@hour1^0,w,c
  2548  000D62  5002               	movf	(TimeDiff@hour1+1)^0,w,c
  2549  000D64  0A80               	xorlw	128
  2550  000D66  6E09               	movwf	??_TimeDiff^0,c
  2551  000D68  5006               	movf	(TimeDiff@hour2+1)^0,w,c
  2552  000D6A  0A80               	xorlw	128
  2553  000D6C  5809               	subwfb	??_TimeDiff^0,w,c
  2554  000D6E  B0D8               	btfsc	status,0,c
  2555  000D70  EFBC  F006         	goto	u851
  2556  000D74  EFBE  F006         	goto	u850
  2557  000D78                     u851:
  2558  000D78  EFDA  F006         	goto	l1302
  2559  000D7C                     u850:
  2560  000D7C  EFC9  F006         	goto	l1300
  2561  000D80                     l1296:
  2562                           
  2563                           ;timers.c: 122:             --hour2;
  2564  000D80  0605               	decf	TimeDiff@hour2^0,f,c
  2565  000D82  A0D8               	btfss	status,0,c
  2566  000D84  0606               	decf	(TimeDiff@hour2+1)^0,f,c
  2567  000D86                     
  2568                           ;timers.c: 123:             minute2 = minute2 + 60;
  2569  000D86  0E3C               	movlw	60
  2570  000D88  2407               	addwf	TimeDiff@minute2^0,w,c
  2571  000D8A  6E07               	movwf	TimeDiff@minute2^0,c
  2572  000D8C  0E00               	movlw	0
  2573  000D8E  2008               	addwfc	(TimeDiff@minute2+1)^0,w,c
  2574  000D90  6E08               	movwf	(TimeDiff@minute2+1)^0,c
  2575  000D92                     l1300:
  2576                           
  2577                           ;timers.c: 121:         while (hour2 > hour1) {
  2578  000D92  5005               	movf	TimeDiff@hour2^0,w,c
  2579  000D94  5C01               	subwf	TimeDiff@hour1^0,w,c
  2580  000D96  5002               	movf	(TimeDiff@hour1+1)^0,w,c
  2581  000D98  0A80               	xorlw	128
  2582  000D9A  6E09               	movwf	??_TimeDiff^0,c
  2583  000D9C  5006               	movf	(TimeDiff@hour2+1)^0,w,c
  2584  000D9E  0A80               	xorlw	128
  2585  000DA0  5809               	subwfb	??_TimeDiff^0,w,c
  2586  000DA2  A0D8               	btfss	status,0,c
  2587  000DA4  EFD6  F006         	goto	u861
  2588  000DA8  EFD8  F006         	goto	u860
  2589  000DAC                     u861:
  2590  000DAC  EFC0  F006         	goto	l1296
  2591  000DB0                     u860:
  2592  000DB0  EF03  F007         	goto	l1312
  2593  000DB4                     l1302:
  2594  000DB4  5001               	movf	TimeDiff@hour1^0,w,c
  2595  000DB6  5C05               	subwf	TimeDiff@hour2^0,w,c
  2596  000DB8  5006               	movf	(TimeDiff@hour2+1)^0,w,c
  2597  000DBA  0A80               	xorlw	128
  2598  000DBC  6E09               	movwf	??_TimeDiff^0,c
  2599  000DBE  5002               	movf	(TimeDiff@hour1+1)^0,w,c
  2600  000DC0  0A80               	xorlw	128
  2601  000DC2  5809               	subwfb	??_TimeDiff^0,w,c
  2602  000DC4  B0D8               	btfsc	status,0,c
  2603  000DC6  EFE7  F006         	goto	u871
  2604  000DCA  EFE9  F006         	goto	u870
  2605  000DCE                     u871:
  2606  000DCE  EF03  F007         	goto	l1312
  2607  000DD2                     u870:
  2608  000DD2  EFF4  F006         	goto	l1310
  2609  000DD6                     l1306:
  2610                           
  2611                           ;timers.c: 128:             --hour1;
  2612  000DD6  0601               	decf	TimeDiff@hour1^0,f,c
  2613  000DD8  A0D8               	btfss	status,0,c
  2614  000DDA  0602               	decf	(TimeDiff@hour1+1)^0,f,c
  2615  000DDC                     
  2616                           ;timers.c: 129:             minute1 = minute1 + 60;
  2617  000DDC  0E3C               	movlw	60
  2618  000DDE  2403               	addwf	TimeDiff@minute1^0,w,c
  2619  000DE0  6E03               	movwf	TimeDiff@minute1^0,c
  2620  000DE2  0E00               	movlw	0
  2621  000DE4  2004               	addwfc	(TimeDiff@minute1+1)^0,w,c
  2622  000DE6  6E04               	movwf	(TimeDiff@minute1+1)^0,c
  2623  000DE8                     l1310:
  2624                           
  2625                           ;timers.c: 127:         while (hour1 > hour2) {
  2626  000DE8  5001               	movf	TimeDiff@hour1^0,w,c
  2627  000DEA  5C05               	subwf	TimeDiff@hour2^0,w,c
  2628  000DEC  5006               	movf	(TimeDiff@hour2+1)^0,w,c
  2629  000DEE  0A80               	xorlw	128
  2630  000DF0  6E09               	movwf	??_TimeDiff^0,c
  2631  000DF2  5002               	movf	(TimeDiff@hour1+1)^0,w,c
  2632  000DF4  0A80               	xorlw	128
  2633  000DF6  5809               	subwfb	??_TimeDiff^0,w,c
  2634  000DF8  A0D8               	btfss	status,0,c
  2635  000DFA  EF01  F007         	goto	u881
  2636  000DFE  EF03  F007         	goto	u880
  2637  000E02                     u881:
  2638  000E02  EFEB  F006         	goto	l1306
  2639  000E06                     u880:
  2640  000E06                     l1312:
  2641                           
  2642                           ;timers.c: 132:     return minute2 - minute1;
  2643  000E06  5003               	movf	TimeDiff@minute1^0,w,c
  2644  000E08  5C07               	subwf	TimeDiff@minute2^0,w,c
  2645  000E0A  6E01               	movwf	?_TimeDiff^0,c
  2646  000E0C  5004               	movf	(TimeDiff@minute1+1)^0,w,c
  2647  000E0E  5808               	subwfb	(TimeDiff@minute2+1)^0,w,c
  2648  000E10  6E02               	movwf	(?_TimeDiff+1)^0,c
  2649  000E12  0012               	return		;funcret
  2650  000E14                     __end_of_TimeDiff:
  2651                           	callstack 0
  2652                           
  2653 ;; *************** function _SmallHours *****************
  2654 ;; Defined at:
  2655 ;;		line 42 in file "lights.c"
  2656 ;; Parameters:    Size  Location     Type
  2657 ;;  hour            2    0[COMRAM] int 
  2658 ;;  minute          2    2[COMRAM] int 
  2659 ;; Auto vars:     Size  Location     Type
  2660 ;;		None
  2661 ;; Return value:  Size  Location     Type
  2662 ;;                  1    wreg      void 
  2663 ;; Registers used:
  2664 ;;		wreg, status,2, status,0
  2665 ;; Tracked objects:
  2666 ;;		On entry : 0/0
  2667 ;;		On exit  : 0/0
  2668 ;;		Unchanged: 0/0
  2669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2670 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2671 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2672 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2673 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2674 ;;Total ram usage:        4 bytes
  2675 ;; Hardware stack levels used: 1
  2676 ;; Hardware stack levels required when called: 1
  2677 ;; This function calls:
  2678 ;;		Nothing
  2679 ;; This function is called by:
  2680 ;;		_main
  2681 ;; This function uses a non-reentrant model
  2682 ;;
  2683                           
  2684                           	psect	text11
  2685  000FB2                     __ptext11:
  2686                           	callstack 0
  2687  000FB2                     _SmallHours:
  2688                           	callstack 29
  2689  000FB2                     
  2690                           ;lights.c: 42: void SmallHours(int hour, int minute);lights.c: 43: {;lights.c: 44:     i
      +                          f (hour >= 1 && hour < 5) {
  2691  000FB2  BE02               	btfsc	(SmallHours@hour+1)^0,7,c
  2692  000FB4  EFE4  F007         	goto	u1461
  2693  000FB8  5002               	movf	(SmallHours@hour+1)^0,w,c
  2694  000FBA  E108               	bnz	u1460
  2695  000FBC  0401               	decf	SmallHours@hour^0,w,c
  2696  000FBE  A0D8               	btfss	status,0,c
  2697  000FC0  EFE4  F007         	goto	u1461
  2698  000FC4  EFE6  F007         	goto	u1460
  2699  000FC8                     u1461:
  2700  000FC8  EFF7  F007         	goto	l1562
  2701  000FCC                     u1460:
  2702  000FCC  BE02               	btfsc	(SmallHours@hour+1)^0,7,c
  2703  000FCE  EFF4  F007         	goto	u1470
  2704  000FD2  5002               	movf	(SmallHours@hour+1)^0,w,c
  2705  000FD4  E107               	bnz	u1471
  2706  000FD6  0E05               	movlw	5
  2707  000FD8  5C01               	subwf	SmallHours@hour^0,w,c
  2708  000FDA  B0D8               	btfsc	status,0,c
  2709  000FDC  EFF2  F007         	goto	u1471
  2710  000FE0  EFF4  F007         	goto	u1470
  2711  000FE4                     u1471:
  2712  000FE4  EFF7  F007         	goto	l1562
  2713  000FE8                     u1470:
  2714  000FE8                     
  2715                           ;lights.c: 45:         CM1CON0bits.EN = 0;
  2716  000FE8  010E               	movlb	14	; () banked
  2717  000FEA  9FD0               	bcf	208,7,b	;volatile
  2718                           
  2719                           ;lights.c: 46:         LATHbits.LATH3 = 0;
  2720  000FEC  9680               	bcf	128,3,c	;volatile
  2721  000FEE                     l1562:
  2722                           
  2723                           ;lights.c: 49:     if (hour == 5 && minute == 0) {CM1CON0bits.EN = 1;}
  2724  000FEE  0E05               	movlw	5
  2725  000FF0  1801               	xorwf	SmallHours@hour^0,w,c
  2726  000FF2  1002               	iorwf	(SmallHours@hour+1)^0,w,c
  2727  000FF4  A4D8               	btfss	status,2,c
  2728  000FF6  EFFF  F007         	goto	u1481
  2729  000FFA  EF01  F008         	goto	u1480
  2730  000FFE                     u1481:
  2731  000FFE  EF0C  F008         	goto	l126
  2732  001002                     u1480:
  2733  001002  5003               	movf	SmallHours@minute^0,w,c
  2734  001004  1004               	iorwf	(SmallHours@minute+1)^0,w,c
  2735  001006  A4D8               	btfss	status,2,c
  2736  001008  EF08  F008         	goto	u1491
  2737  00100C  EF0A  F008         	goto	u1490
  2738  001010                     u1491:
  2739  001010  EF0C  F008         	goto	l126
  2740  001014                     u1490:
  2741  001014  010E               	movlb	14	; () banked
  2742  001016  8FD0               	bsf	208,7,b	;volatile
  2743  001018                     l126:
  2744  001018  0012               	return		;funcret
  2745  00101A                     __end_of_SmallHours:
  2746                           	callstack 0
  2747                           
  2748 ;; *************** function _Lights_init *****************
  2749 ;; Defined at:
  2750 ;;		line 7 in file "lights.c"
  2751 ;; Parameters:    Size  Location     Type
  2752 ;;		None
  2753 ;; Auto vars:     Size  Location     Type
  2754 ;;		None
  2755 ;; Return value:  Size  Location     Type
  2756 ;;                  1    wreg      void 
  2757 ;; Registers used:
  2758 ;;		None
  2759 ;; Tracked objects:
  2760 ;;		On entry : 0/0
  2761 ;;		On exit  : 0/0
  2762 ;;		Unchanged: 0/0
  2763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2764 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2765 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2766 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2767 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2768 ;;Total ram usage:        0 bytes
  2769 ;; Hardware stack levels used: 1
  2770 ;; Hardware stack levels required when called: 1
  2771 ;; This function calls:
  2772 ;;		Nothing
  2773 ;; This function is called by:
  2774 ;;		_main
  2775 ;; This function uses a non-reentrant model
  2776 ;;
  2777                           
  2778                           	psect	text12
  2779  0010C4                     __ptext12:
  2780                           	callstack 0
  2781  0010C4                     _Lights_init:
  2782                           	callstack 29
  2783  0010C4                     
  2784                           ;lights.c: 10:     LATGbits.LATG0 = 0;
  2785  0010C4  907F               	bcf	127,0,c	;volatile
  2786                           
  2787                           ;lights.c: 11:     LATGbits.LATG1 = 0;
  2788  0010C6  927F               	bcf	127,1,c	;volatile
  2789                           
  2790                           ;lights.c: 12:     LATAbits.LATA2 = 0;
  2791  0010C8  9479               	bcf	121,2,c	;volatile
  2792                           
  2793                           ;lights.c: 13:     LATFbits.LATF6 = 0;
  2794  0010CA  9C7E               	bcf	126,6,c	;volatile
  2795                           
  2796                           ;lights.c: 14:     LATAbits.LATA4 = 0;
  2797  0010CC  9879               	bcf	121,4,c	;volatile
  2798                           
  2799                           ;lights.c: 15:     LATHbits.LATH3 = 0;
  2800  0010CE  9680               	bcf	128,3,c	;volatile
  2801                           
  2802                           ;lights.c: 18:     TRISGbits.TRISG0 = 0;
  2803  0010D0  9087               	bcf	135,0,c	;volatile
  2804                           
  2805                           ;lights.c: 19:     TRISGbits.TRISG1 = 0;
  2806  0010D2  9287               	bcf	135,1,c	;volatile
  2807                           
  2808                           ;lights.c: 20:     TRISAbits.TRISA2 = 0;
  2809  0010D4  9481               	bcf	129,2,c	;volatile
  2810                           
  2811                           ;lights.c: 21:     TRISFbits.TRISF6 = 0;
  2812  0010D6  9C86               	bcf	134,6,c	;volatile
  2813                           
  2814                           ;lights.c: 22:     TRISAbits.TRISA4 = 0;
  2815  0010D8  9881               	bcf	129,4,c	;volatile
  2816                           
  2817                           ;lights.c: 23:     TRISHbits.TRISH3 = 0;
  2818  0010DA  9688               	bcf	136,3,c	;volatile
  2819  0010DC  0012               	return		;funcret
  2820  0010DE                     __end_of_Lights_init:
  2821                           	callstack 0
  2822                           
  2823 ;; *************** function _LEDarray_disp_bin *****************
  2824 ;; Defined at:
  2825 ;;		line 29 in file "lights.c"
  2826 ;; Parameters:    Size  Location     Type
  2827 ;;  number          2    0[COMRAM] int 
  2828 ;; Auto vars:     Size  Location     Type
  2829 ;;		None
  2830 ;; Return value:  Size  Location     Type
  2831 ;;                  1    wreg      void 
  2832 ;; Registers used:
  2833 ;;		None
  2834 ;; Tracked objects:
  2835 ;;		On entry : 0/0
  2836 ;;		On exit  : 0/0
  2837 ;;		Unchanged: 0/0
  2838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2839 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2840 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2841 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2842 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2843 ;;Total ram usage:        2 bytes
  2844 ;; Hardware stack levels used: 1
  2845 ;; Hardware stack levels required when called: 1
  2846 ;; This function calls:
  2847 ;;		Nothing
  2848 ;; This function is called by:
  2849 ;;		_main
  2850 ;; This function uses a non-reentrant model
  2851 ;;
  2852                           
  2853                           	psect	text13
  2854  000F42                     __ptext13:
  2855                           	callstack 0
  2856  000F42                     _LEDarray_disp_bin:
  2857                           	callstack 29
  2858  000F42                     
  2859                           ;lights.c: 29: void LEDarray_disp_bin(int number);lights.c: 30: {;lights.c: 32:     if (
      +                          number & 0b00001) {LATGbits.LATG0 = 1;} else {LATGbits.LATG0 = 0;}
  2860  000F42  A001               	btfss	LEDarray_disp_bin@number^0,0,c
  2861  000F44  EFA6  F007         	goto	u1411
  2862  000F48  EFA8  F007         	goto	u1410
  2863  000F4C                     u1411:
  2864  000F4C  EFAB  F007         	goto	l111
  2865  000F50                     u1410:
  2866  000F50  807F               	bsf	127,0,c	;volatile
  2867  000F52  EFAC  F007         	goto	l112
  2868  000F56                     l111:
  2869  000F56  907F               	bcf	127,0,c	;volatile
  2870  000F58                     l112:
  2871                           
  2872                           ;lights.c: 33:     if (number & 0b00010) {LATGbits.LATG1 = 1;} else {LATGbits.LATG1 = 0;
      +                          }
  2873  000F58  A201               	btfss	LEDarray_disp_bin@number^0,1,c
  2874  000F5A  EFB1  F007         	goto	u1421
  2875  000F5E  EFB3  F007         	goto	u1420
  2876  000F62                     u1421:
  2877  000F62  EFB6  F007         	goto	l113
  2878  000F66                     u1420:
  2879  000F66  827F               	bsf	127,1,c	;volatile
  2880  000F68  EFB7  F007         	goto	l114
  2881  000F6C                     l113:
  2882  000F6C  927F               	bcf	127,1,c	;volatile
  2883  000F6E                     l114:
  2884                           
  2885                           ;lights.c: 34:     if (number & 0b00100) {LATAbits.LATA2 = 1;} else {LATAbits.LATA2 = 0;
      +                          }
  2886  000F6E  A401               	btfss	LEDarray_disp_bin@number^0,2,c
  2887  000F70  EFBC  F007         	goto	u1431
  2888  000F74  EFBE  F007         	goto	u1430
  2889  000F78                     u1431:
  2890  000F78  EFC1  F007         	goto	l115
  2891  000F7C                     u1430:
  2892  000F7C  8479               	bsf	121,2,c	;volatile
  2893  000F7E  EFC2  F007         	goto	l116
  2894  000F82                     l115:
  2895  000F82  9479               	bcf	121,2,c	;volatile
  2896  000F84                     l116:
  2897                           
  2898                           ;lights.c: 35:     if (number & 0b01000) {LATFbits.LATF6 = 1;} else {LATFbits.LATF6 = 0;
      +                          }
  2899  000F84  A601               	btfss	LEDarray_disp_bin@number^0,3,c
  2900  000F86  EFC7  F007         	goto	u1441
  2901  000F8A  EFC9  F007         	goto	u1440
  2902  000F8E                     u1441:
  2903  000F8E  EFCC  F007         	goto	l117
  2904  000F92                     u1440:
  2905  000F92  8C7E               	bsf	126,6,c	;volatile
  2906  000F94  EFCD  F007         	goto	l118
  2907  000F98                     l117:
  2908  000F98  9C7E               	bcf	126,6,c	;volatile
  2909  000F9A                     l118:
  2910                           
  2911                           ;lights.c: 36:     if (number & 0b10000) {LATAbits.LATA4 = 1;} else {LATAbits.LATA4 = 0;
      +                          }
  2912  000F9A  A801               	btfss	LEDarray_disp_bin@number^0,4,c
  2913  000F9C  EFD2  F007         	goto	u1451
  2914  000FA0  EFD4  F007         	goto	u1450
  2915  000FA4                     u1451:
  2916  000FA4  EFD7  F007         	goto	l119
  2917  000FA8                     u1450:
  2918  000FA8  8879               	bsf	121,4,c	;volatile
  2919  000FAA  EFD8  F007         	goto	l121
  2920  000FAE                     l119:
  2921  000FAE  9879               	bcf	121,4,c	;volatile
  2922  000FB0                     l121:
  2923  000FB0  0012               	return		;funcret
  2924  000FB2                     __end_of_LEDarray_disp_bin:
  2925                           	callstack 0
  2926                           
  2927 ;; *************** function _Interrupts_init *****************
  2928 ;; Defined at:
  2929 ;;		line 8 in file "interrupts.c"
  2930 ;; Parameters:    Size  Location     Type
  2931 ;;		None
  2932 ;; Auto vars:     Size  Location     Type
  2933 ;;		None
  2934 ;; Return value:  Size  Location     Type
  2935 ;;                  1    wreg      void 
  2936 ;; Registers used:
  2937 ;;		None
  2938 ;; Tracked objects:
  2939 ;;		On entry : 0/0
  2940 ;;		On exit  : 0/0
  2941 ;;		Unchanged: 0/0
  2942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2943 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2944 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2945 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2946 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2947 ;;Total ram usage:        0 bytes
  2948 ;; Hardware stack levels used: 1
  2949 ;; Hardware stack levels required when called: 1
  2950 ;; This function calls:
  2951 ;;		Nothing
  2952 ;; This function is called by:
  2953 ;;		_main
  2954 ;; This function uses a non-reentrant model
  2955 ;;
  2956                           
  2957                           	psect	text14
  2958  001100                     __ptext14:
  2959                           	callstack 0
  2960  001100                     _Interrupts_init:
  2961                           	callstack 29
  2962  001100                     
  2963                           ;interrupts.c: 11:     PIE0bits.TMR0IE = 1;
  2964  001100  010E               	movlb	14	; () banked
  2965  001102  8B29               	bsf	41,5,b	;volatile
  2966                           
  2967                           ;interrupts.c: 12:     PIE2bits.C1IE = 1;
  2968  001104  812B               	bsf	43,0,b	;volatile
  2969                           
  2970                           ;interrupts.c: 13:     INTCONbits.PEIE = 1;
  2971  001106  8CF2               	bsf	242,6,c	;volatile
  2972                           
  2973                           ;interrupts.c: 14:     INTCONbits.GIE = 1;
  2974  001108  8EF2               	bsf	242,7,c	;volatile
  2975  00110A                     
  2976                           ; BSR set to: 14
  2977  00110A  0012               	return		;funcret
  2978  00110C                     __end_of_Interrupts_init:
  2979                           	callstack 0
  2980                           
  2981 ;; *************** function _Comp1_init *****************
  2982 ;; Defined at:
  2983 ;;		line 21 in file "comparator.c"
  2984 ;; Parameters:    Size  Location     Type
  2985 ;;		None
  2986 ;; Auto vars:     Size  Location     Type
  2987 ;;		None
  2988 ;; Return value:  Size  Location     Type
  2989 ;;                  1    wreg      void 
  2990 ;; Registers used:
  2991 ;;		wreg, status,2, cstack
  2992 ;; Tracked objects:
  2993 ;;		On entry : 0/0
  2994 ;;		On exit  : 0/0
  2995 ;;		Unchanged: 0/0
  2996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2997 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2998 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2999 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3000 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3001 ;;Total ram usage:        0 bytes
  3002 ;; Hardware stack levels used: 1
  3003 ;; Hardware stack levels required when called: 2
  3004 ;; This function calls:
  3005 ;;		_DAC_init
  3006 ;; This function is called by:
  3007 ;;		_main
  3008 ;; This function uses a non-reentrant model
  3009 ;;
  3010                           
  3011                           	psect	text15
  3012  00107E                     __ptext15:
  3013                           	callstack 0
  3014  00107E                     _Comp1_init:
  3015                           	callstack 28
  3016  00107E                     
  3017                           ;comparator.c: 23:     TRISFbits.TRISF7 = 1;
  3018  00107E  8E86               	bsf	134,7,c	;volatile
  3019  001080                     
  3020                           ;comparator.c: 24:     CM1NCHbits.NCH = 0b011;
  3021  001080  010E               	movlb	14	; () banked
  3022  001082  51D2               	movf	210,w,b	;volatile
  3023  001084  0BF8               	andlw	-8
  3024  001086  0903               	iorlw	3
  3025  001088  6FD2               	movwf	210,b	;volatile
  3026                           
  3027                           ;comparator.c: 25:     CM1PCHbits.PCH = 0b101;
  3028  00108A  51D3               	movf	211,w,b	;volatile
  3029  00108C  0BF8               	andlw	-8
  3030  00108E  0905               	iorlw	5
  3031  001090  6FD3               	movwf	211,b	;volatile
  3032  001092                     
  3033                           ; BSR set to: 14
  3034                           ;comparator.c: 26:     CM1CON0bits.HYS = 1;
  3035  001092  83D0               	bsf	208,1,b	;volatile
  3036  001094                     
  3037                           ; BSR set to: 14
  3038                           ;comparator.c: 27:     CM1CON0bits.POL = 1;
  3039  001094  89D0               	bsf	208,4,b	;volatile
  3040  001096                     
  3041                           ; BSR set to: 14
  3042                           ;comparator.c: 28:     CM1CON1bits.INTP = 1;
  3043  001096  83D1               	bsf	209,1,b	;volatile
  3044  001098                     
  3045                           ; BSR set to: 14
  3046                           ;comparator.c: 29:     CM1CON1bits.INTN = 1;
  3047  001098  81D1               	bsf	209,0,b	;volatile
  3048  00109A                     
  3049                           ; BSR set to: 14
  3050                           ;comparator.c: 30:     DAC_init();
  3051  00109A  EC6F  F008         	call	_DAC_init	;wreg free
  3052  00109E                     
  3053                           ;comparator.c: 31:     CM1CON0bits.EN = 1;
  3054  00109E  010E               	movlb	14	; () banked
  3055  0010A0  8FD0               	bsf	208,7,b	;volatile
  3056  0010A2                     
  3057                           ; BSR set to: 14
  3058  0010A2  0012               	return		;funcret
  3059  0010A4                     __end_of_Comp1_init:
  3060                           	callstack 0
  3061                           
  3062 ;; *************** function _DAC_init *****************
  3063 ;; Defined at:
  3064 ;;		line 7 in file "comparator.c"
  3065 ;; Parameters:    Size  Location     Type
  3066 ;;		None
  3067 ;; Auto vars:     Size  Location     Type
  3068 ;;		None
  3069 ;; Return value:  Size  Location     Type
  3070 ;;                  1    wreg      void 
  3071 ;; Registers used:
  3072 ;;		wreg, status,2
  3073 ;; Tracked objects:
  3074 ;;		On entry : 0/0
  3075 ;;		On exit  : 0/0
  3076 ;;		Unchanged: 0/0
  3077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3078 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3079 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3080 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3081 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3082 ;;Total ram usage:        0 bytes
  3083 ;; Hardware stack levels used: 1
  3084 ;; Hardware stack levels required when called: 1
  3085 ;; This function calls:
  3086 ;;		Nothing
  3087 ;; This function is called by:
  3088 ;;		_Comp1_init
  3089 ;; This function uses a non-reentrant model
  3090 ;;
  3091                           
  3092                           	psect	text16
  3093  0010DE                     __ptext16:
  3094                           	callstack 0
  3095  0010DE                     _DAC_init:
  3096                           	callstack 28
  3097  0010DE                     
  3098                           ;comparator.c: 9:     DAC1CON0bits.PSS = 0b00;
  3099  0010DE  0EF3               	movlw	-13
  3100  0010E0  010E               	movlb	14	; () banked
  3101  0010E2  17C6               	andwf	198,f,b	;volatile
  3102  0010E4                     
  3103                           ; BSR set to: 14
  3104                           ;comparator.c: 10:     DAC1CON0bits.NSS = 0b0;
  3105  0010E4  91C6               	bcf	198,0,b	;volatile
  3106                           
  3107                           ;comparator.c: 14:     DAC1CON1bits.DAC1R = 0b11011;
  3108  0010E6  51C7               	movf	199,w,b	;volatile
  3109  0010E8  0BE0               	andlw	-32
  3110  0010EA  091B               	iorlw	27
  3111  0010EC  6FC7               	movwf	199,b	;volatile
  3112  0010EE                     
  3113                           ; BSR set to: 14
  3114                           ;comparator.c: 15:     DAC1CON0bits.DAC1EN = 1;
  3115  0010EE  8FC6               	bsf	198,7,b	;volatile
  3116  0010F0                     
  3117                           ; BSR set to: 14
  3118  0010F0  0012               	return		;funcret
  3119  0010F2                     __end_of_DAC_init:
  3120                           	callstack 0
  3121                           
  3122 ;; *************** function _ISR *****************
  3123 ;; Defined at:
  3124 ;;		line 20 in file "interrupts.c"
  3125 ;; Parameters:    Size  Location     Type
  3126 ;;		None
  3127 ;; Auto vars:     Size  Location     Type
  3128 ;;		None
  3129 ;; Return value:  Size  Location     Type
  3130 ;;                  1    wreg      void 
  3131 ;; Registers used:
  3132 ;;		wreg, status,2
  3133 ;; Tracked objects:
  3134 ;;		On entry : 0/0
  3135 ;;		On exit  : 0/0
  3136 ;;		Unchanged: 0/0
  3137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3138 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3139 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3140 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3141 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3142 ;;Total ram usage:        0 bytes
  3143 ;; Hardware stack levels used: 1
  3144 ;; This function calls:
  3145 ;;		Nothing
  3146 ;; This function is called by:
  3147 ;;		Interrupt level 2
  3148 ;; This function uses a non-reentrant model
  3149 ;;
  3150                           
  3151                           	psect	intcode
  3152  000008                     __pintcode:
  3153                           	callstack 0
  3154  000008                     _ISR:
  3155                           	callstack 27
  3156                           
  3157                           ; BSR set to: 14
  3158                           ;incstack = 0
  3159  000008  824F               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  3160  00000A                     
  3161                           ;interrupts.c: 22:     if (PIR0bits.TMR0IF == 1) {
  3162  00000A  010E               	movlb	14	; () banked
  3163  00000C  AB33               	btfss	51,5,b	;volatile
  3164  00000E  EF0B  F000         	goto	i2u78_41
  3165  000012  EF0D  F000         	goto	i2u78_40
  3166  000016                     i2u78_41:
  3167  000016  EF14  F000         	goto	i2l1254
  3168  00001A                     i2u78_40:
  3169  00001A                     
  3170                           ; BSR set to: 14
  3171                           ;interrupts.c: 23:         minutehand = 1;
  3172  00001A  0E01               	movlw	1
  3173  00001C  6E4E               	movwf	_minutehand^0,c
  3174                           
  3175                           ;interrupts.c: 24:         TMR0H=0b00011011;
  3176  00001E  0E1B               	movlw	27
  3177  000020  6ED4               	movwf	212,c	;volatile
  3178                           
  3179                           ;interrupts.c: 25:         TMR0L=0b00011110;
  3180  000022  0E1E               	movlw	30
  3181  000024  6ED3               	movwf	211,c	;volatile
  3182  000026                     
  3183                           ; BSR set to: 14
  3184                           ;interrupts.c: 26:         PIR0bits.TMR0IF = 0;
  3185  000026  9B33               	bcf	51,5,b	;volatile
  3186  000028                     i2l1254:
  3187                           
  3188                           ; BSR set to: 14
  3189                           ;interrupts.c: 29:     if (PIR2bits.C1IF == 1) {
  3190  000028  A135               	btfss	53,0,b	;volatile
  3191  00002A  EF19  F000         	goto	i2u79_41
  3192  00002E  EF1B  F000         	goto	i2u79_40
  3193  000032                     i2u79_41:
  3194  000032  EF2B  F000         	goto	i2l54
  3195  000036                     i2u79_40:
  3196  000036                     
  3197                           ; BSR set to: 14
  3198                           ;interrupts.c: 30:         if (CM1CON0bits.OUT) {LATHbits.LATH3 = 1; dawndusk = 1;}
  3199  000036  ADD0               	btfss	208,6,b	;volatile
  3200  000038  EF20  F000         	goto	i2u80_41
  3201  00003C  EF22  F000         	goto	i2u80_40
  3202  000040                     i2u80_41:
  3203  000040  EF27  F000         	goto	i2l52
  3204  000044                     i2u80_40:
  3205  000044                     
  3206                           ; BSR set to: 14
  3207  000044  8680               	bsf	128,3,c	;volatile
  3208  000046                     i2l1260:
  3209                           
  3210                           ; BSR set to: 14
  3211  000046  0E01               	movlw	1
  3212  000048  6E4D               	movwf	_dawndusk^0,c
  3213  00004A  EF2A  F000         	goto	i2l1264
  3214  00004E                     i2l52:
  3215                           
  3216                           ; BSR set to: 14
  3217  00004E  9680               	bcf	128,3,c	;volatile
  3218  000050  EF23  F000         	goto	i2l1260
  3219  000054                     i2l1264:
  3220                           
  3221                           ; BSR set to: 14
  3222                           ;interrupts.c: 32:         PIR2bits.C1IF = 0;
  3223  000054  9135               	bcf	53,0,b	;volatile
  3224  000056                     i2l54:
  3225                           
  3226                           ; BSR set to: 14
  3227  000056  924F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  3228  000058  0011               	retfie		f
  3229  00005A                     __end_of_ISR:
  3230                           	callstack 0
  3231  0000                     
  3232                           	psect	rparam
  3233  0000                     
  3234                           	psect	temp
  3235  00004F                     btemp:
  3236                           	callstack 0
  3237  00004F                     	ds	1
  3238  0000                     int$flags	set	btemp
  3239  0000                     wtemp8	set	btemp+1
  3240  0000                     ttemp5	set	btemp+1
  3241  0000                     ttemp6	set	btemp+4
  3242  0000                     ttemp7	set	btemp+8
  3243                           
  3244                           	psect	idloc
  3245                           
  3246                           ;Config register IDLOC0 @ 0x200000
  3247                           ;	unspecified, using default values
  3248  200000                     	org	2097152
  3249  200000  0FFF               	dw	4095
  3250                           
  3251                           ;Config register IDLOC1 @ 0x200002
  3252                           ;	unspecified, using default values
  3253  200002                     	org	2097154
  3254  200002  0FFF               	dw	4095
  3255                           
  3256                           ;Config register IDLOC2 @ 0x200004
  3257                           ;	unspecified, using default values
  3258  200004                     	org	2097156
  3259  200004  0FFF               	dw	4095
  3260                           
  3261                           ;Config register IDLOC3 @ 0x200006
  3262                           ;	unspecified, using default values
  3263  200006                     	org	2097158
  3264  200006  0FFF               	dw	4095
  3265                           
  3266                           ;Config register IDLOC4 @ 0x200008
  3267                           ;	unspecified, using default values
  3268  200008                     	org	2097160
  3269  200008  0FFF               	dw	4095
  3270                           
  3271                           ;Config register IDLOC5 @ 0x20000A
  3272                           ;	unspecified, using default values
  3273  20000A                     	org	2097162
  3274  20000A  0FFF               	dw	4095
  3275                           
  3276                           ;Config register IDLOC6 @ 0x20000C
  3277                           ;	unspecified, using default values
  3278  20000C                     	org	2097164
  3279  20000C  0FFF               	dw	4095
  3280                           
  3281                           ;Config register IDLOC7 @ 0x20000E
  3282                           ;	unspecified, using default values
  3283  20000E                     	org	2097166
  3284  20000E  0FFF               	dw	4095
  3285                           
  3286                           	psect	config
  3287                           
  3288                           ;Config register CONFIG1L @ 0x300000
  3289                           ;	External Oscillator mode Selection bits
  3290                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  3291                           ;	Power-up default value for COSC bits
  3292                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  3293  300000                     	org	3145728
  3294  300000  AA                 	db	170
  3295                           
  3296                           ;Config register CONFIG1H @ 0x300001
  3297                           ;	unspecified, using default values
  3298                           ;	Clock Out Enable bit
  3299                           ;	CLKOUTEN = 0x1, unprogrammed default
  3300                           ;	Clock Switch Enable bit
  3301                           ;	CSWEN = 0x1, unprogrammed default
  3302                           ;	Fail-Safe Clock Monitor Enable bit
  3303                           ;	FCMEN = 0x1, unprogrammed default
  3304  300001                     	org	3145729
  3305  300001  FF                 	db	255
  3306                           
  3307                           ;Config register CONFIG2L @ 0x300002
  3308                           ;	unspecified, using default values
  3309                           ;	Master Clear Enable bit
  3310                           ;	MCLRE = 0x1, unprogrammed default
  3311                           ;	Power-up Timer Enable bit
  3312                           ;	PWRTE = 0x1, unprogrammed default
  3313                           ;	Low-power BOR enable bit
  3314                           ;	LPBOREN = 0x1, unprogrammed default
  3315                           ;	Brown-out Reset Enable bits
  3316                           ;	BOREN = 0x3, unprogrammed default
  3317  300002                     	org	3145730
  3318  300002  FF                 	db	255
  3319                           
  3320                           ;Config register CONFIG2H @ 0x300003
  3321                           ;	unspecified, using default values
  3322                           ;	Brown Out Reset Voltage selection bits
  3323                           ;	BORV = 0x3, unprogrammed default
  3324                           ;	ZCD Disable bit
  3325                           ;	ZCD = 0x1, unprogrammed default
  3326                           ;	PPSLOCK bit One-Way Set Enable bit
  3327                           ;	PPS1WAY = 0x1, unprogrammed default
  3328                           ;	Stack Full/Underflow Reset Enable bit
  3329                           ;	STVREN = 0x1, unprogrammed default
  3330                           ;	Debugger Enable bit
  3331                           ;	DEBUG = 0x1, unprogrammed default
  3332                           ;	Extended Instruction Set Enable bit
  3333                           ;	XINST = 0x1, unprogrammed default
  3334  300003                     	org	3145731
  3335  300003  FF                 	db	255
  3336                           
  3337                           ;Config register CONFIG3L @ 0x300004
  3338                           ;	WDT Period Select bits
  3339                           ;	WDTCPS = 0x1F, unprogrammed default
  3340                           ;	WDT operating mode
  3341                           ;	WDTE = OFF, WDT Disabled
  3342  300004                     	org	3145732
  3343  300004  9F                 	db	159
  3344                           
  3345                           ;Config register CONFIG3H @ 0x300005
  3346                           ;	unspecified, using default values
  3347                           ;	WDT Window Select bits
  3348                           ;	WDTCWS = 0x7, unprogrammed default
  3349                           ;	WDT input clock selector
  3350                           ;	WDTCCS = 0x7, unprogrammed default
  3351  300005                     	org	3145733
  3352  300005  FF                 	db	255
  3353                           
  3354                           ;Config register CONFIG4L @ 0x300006
  3355                           ;	unspecified, using default values
  3356                           ;	Write Protection Block 0
  3357                           ;	WRT0 = 0x1, unprogrammed default
  3358                           ;	Write Protection Block 1
  3359                           ;	WRT1 = 0x1, unprogrammed default
  3360                           ;	Write Protection Block 2
  3361                           ;	WRT2 = 0x1, unprogrammed default
  3362                           ;	Write Protection Block 3
  3363                           ;	WRT3 = 0x1, unprogrammed default
  3364                           ;	Write Protection Block 3
  3365                           ;	WRT4 = 0x1, unprogrammed default
  3366                           ;	Write Protection Block 3
  3367                           ;	WRT5 = 0x1, unprogrammed default
  3368                           ;	Write Protection Block 3
  3369                           ;	WRT6 = 0x1, unprogrammed default
  3370                           ;	Write Protection Block 3
  3371                           ;	WRT7 = 0x1, unprogrammed default
  3372  300006                     	org	3145734
  3373  300006  FF                 	db	255
  3374                           
  3375                           ;Config register CONFIG4H @ 0x300007
  3376                           ;	unspecified, using default values
  3377                           ;	Configuration Register Write Protection bit
  3378                           ;	WRTC = 0x1, unprogrammed default
  3379                           ;	Boot Block Write Protection bit
  3380                           ;	WRTB = 0x1, unprogrammed default
  3381                           ;	Data EEPROM Write Protection bit
  3382                           ;	WRTD = 0x1, unprogrammed default
  3383                           ;	Scanner Enable bit
  3384                           ;	SCANE = 0x1, unprogrammed default
  3385                           ;	Low Voltage Programming Enable bit
  3386                           ;	LVP = 0x1, unprogrammed default
  3387  300007                     	org	3145735
  3388  300007  FF                 	db	255
  3389                           
  3390                           ;Config register CONFIG5L @ 0x300008
  3391                           ;	unspecified, using default values
  3392                           ;	UserNVM Program Memory Code Protection bit
  3393                           ;	CP = 0x1, unprogrammed default
  3394                           ;	DataNVM Memory Code Protection bit
  3395                           ;	CPD = 0x1, unprogrammed default
  3396  300008                     	org	3145736
  3397  300008  FF                 	db	255
  3398                           
  3399                           ;Config register CONFIG5H @ 0x300009
  3400                           ;	unspecified, using default values
  3401  300009                     	org	3145737
  3402  300009  FF                 	db	255
  3403                           
  3404                           ;Config register CONFIG6L @ 0x30000A
  3405                           ;	unspecified, using default values
  3406                           ;	Table Read Protection Block 0
  3407                           ;	EBTR0 = 0x1, unprogrammed default
  3408                           ;	Table Read Protection Block 1
  3409                           ;	EBTR1 = 0x1, unprogrammed default
  3410                           ;	Table Read Protection Block 2
  3411                           ;	EBTR2 = 0x1, unprogrammed default
  3412                           ;	Table Read Protection Block 3
  3413                           ;	EBTR3 = 0x1, unprogrammed default
  3414                           ;	Table Read Protection Block 4
  3415                           ;	EBTR4 = 0x1, unprogrammed default
  3416                           ;	Table Read Protection Block 5
  3417                           ;	EBTR5 = 0x1, unprogrammed default
  3418                           ;	Table Read Protection Block 6
  3419                           ;	EBTR6 = 0x1, unprogrammed default
  3420                           ;	Table Read Protection Block 7
  3421                           ;	EBTR7 = 0x1, unprogrammed default
  3422  30000A                     	org	3145738
  3423  30000A  FF                 	db	255
  3424                           
  3425                           ;Config register CONFIG6H @ 0x30000B
  3426                           ;	unspecified, using default values
  3427                           ;	Boot Block Table Read Protection bit
  3428                           ;	EBTRB = 0x1, unprogrammed default
  3429  30000B                     	org	3145739
  3430  30000B  FF                 	db	255
  3431                           tosu	equ	0xFFF
  3432                           tosh	equ	0xFFE
  3433                           tosl	equ	0xFFD
  3434                           stkptr	equ	0xFFC
  3435                           pclatu	equ	0xFFB
  3436                           pclath	equ	0xFFA
  3437                           pcl	equ	0xFF9
  3438                           tblptru	equ	0xFF8
  3439                           tblptrh	equ	0xFF7
  3440                           tblptrl	equ	0xFF6
  3441                           tablat	equ	0xFF5
  3442                           prodh	equ	0xFF4
  3443                           prodl	equ	0xFF3
  3444                           indf0	equ	0xFEF
  3445                           postinc0	equ	0xFEE
  3446                           postdec0	equ	0xFED
  3447                           preinc0	equ	0xFEC
  3448                           plusw0	equ	0xFEB
  3449                           fsr0h	equ	0xFEA
  3450                           fsr0l	equ	0xFE9
  3451                           wreg	equ	0xFE8
  3452                           indf1	equ	0xFE7
  3453                           postinc1	equ	0xFE6
  3454                           postdec1	equ	0xFE5
  3455                           preinc1	equ	0xFE4
  3456                           plusw1	equ	0xFE3
  3457                           fsr1h	equ	0xFE2
  3458                           fsr1l	equ	0xFE1
  3459                           bsr	equ	0xFE0
  3460                           indf2	equ	0xFDF
  3461                           postinc2	equ	0xFDE
  3462                           postdec2	equ	0xFDD
  3463                           preinc2	equ	0xFDC
  3464                           plusw2	equ	0xFDB
  3465                           fsr2h	equ	0xFDA
  3466                           fsr2l	equ	0xFD9
  3467                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     76      78
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    UpdateDawnDusk@pduskminute	PTR int  size(2) Largest target is 2
		 -> main@duskminute(COMRAM[2]), 

    UpdateDawnDusk@pduskhour	PTR int  size(2) Largest target is 2
		 -> main@duskhour(COMRAM[2]), 

    UpdateDawnDusk@pminute	PTR int  size(2) Largest target is 2
		 -> main@minute(COMRAM[2]), 

    UpdateDawnDusk@pdawnminute	PTR int  size(2) Largest target is 2
		 -> main@dawnminute(COMRAM[2]), 

    UpdateDawnDusk@pdawnhour	PTR int  size(2) Largest target is 2
		 -> main@dawnhour(COMRAM[2]), 

    UpdateDawnDusk@phour	PTR int  size(2) Largest target is 2
		 -> main@hour(COMRAM[2]), 

    TimeAvg@pavgminute	PTR int  size(2) Largest target is 2
		 -> SunPleaseFixTheDamnClock@avgminute(COMRAM[2]), 

    TimeAvg@pavghour	PTR int  size(2) Largest target is 2
		 -> SunPleaseFixTheDamnClock@avghour(COMRAM[2]), 

    SunPleaseFixTheDamnClock@phour	PTR int  size(2) Largest target is 2
		 -> main@hour(COMRAM[2]), 

    SunPleaseFixTheDamnClock@pminute	PTR int  size(2) Largest target is 2
		 -> main@minute(COMRAM[2]), 

    SunPleaseFixTheDamnClock@pduskminute	PTR int  size(2) Largest target is 2
		 -> main@duskminute(COMRAM[2]), 

    SunPleaseFixTheDamnClock@pduskhour	PTR int  size(2) Largest target is 2
		 -> main@duskhour(COMRAM[2]), 

    SunPleaseFixTheDamnClock@pdawnminute	PTR int  size(2) Largest target is 2
		 -> main@dawnminute(COMRAM[2]), 

    SunPleaseFixTheDamnClock@pdawnhour	PTR int  size(2) Largest target is 2
		 -> main@dawnhour(COMRAM[2]), 

    Timekeeper@pDST	PTR unsigned char  size(2) Largest target is 1
		 -> main@DST(COMRAM[1]), 

    Timekeeper@pyear	PTR unsigned int  size(2) Largest target is 2
		 -> main@year(COMRAM[2]), 

    Timekeeper@pmonth	PTR unsigned char  size(2) Largest target is 1
		 -> main@month(COMRAM[1]), 

    Timekeeper@pdayofweek	PTR unsigned char  size(2) Largest target is 1
		 -> main@dayofweek(COMRAM[1]), 

    Timekeeper@pday	PTR unsigned char  size(2) Largest target is 1
		 -> main@day(COMRAM[1]), 

    Timekeeper@phour	PTR int  size(2) Largest target is 2
		 -> main@hour(COMRAM[2]), 

    Timekeeper@pminute	PTR int  size(2) Largest target is 2
		 -> main@minute(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_SunPleaseFixTheDamnClock
    _Timekeeper->_LeapYear
    _LeapYear->___lwmod
    _SunPleaseFixTheDamnClock->_TimeAvg
    _TimeAvg->___awdiv
    ___awdiv->_TimeDiff

Critical Paths under _ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                18    18      0   12606
                                             58 COMRAM    18    18      0
                         _Comp1_init
                    _Interrupts_init
                  _LEDarray_disp_bin
                        _Lights_init
                         _SmallHours
           _SunPleaseFixTheDamnClock
                         _Timekeeper
                        _Timer0_init
                     _UpdateDawnDusk
 ---------------------------------------------------------------------------------
 (1) _UpdateDawnDusk                                      17     4     13     950
                                              0 COMRAM    17     4     13
 ---------------------------------------------------------------------------------
 (1) _Timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Timekeeper                                          16     2     14    2404
                                             10 COMRAM    16     2     14
                           _LeapYear
 ---------------------------------------------------------------------------------
 (2) _LeapYear                                             5     3      2     706
                                              5 COMRAM     5     3      2
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     463
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (1) _SunPleaseFixTheDamnClock                            23    10     13    8094
                                             35 COMRAM    23    10     13
                            _TimeAvg
                           _TimeDiff
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) _TimeAvg                                             18     6     12    3693
                                             17 COMRAM    18     6     12
                           _TimeDiff
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     904
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4    1060
                                              9 COMRAM     8     4      4
                           _TimeDiff (ARG)
 ---------------------------------------------------------------------------------
 (2) _TimeDiff                                             9     1      8     876
                                              0 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (1) _SmallHours                                           4     0      4     240
                                              0 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (1) _Lights_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LEDarray_disp_bin                                    2     0      2     186
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _Interrupts_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Comp1_init                                           0     0      0       0
                           _DAC_init
 ---------------------------------------------------------------------------------
 (2) _DAC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _ISR                                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Comp1_init
     _DAC_init
   _Interrupts_init
   _LEDarray_disp_bin
   _Lights_init
   _SmallHours
   _SunPleaseFixTheDamnClock
     _TimeAvg
       _TimeDiff
       ___awdiv
         _TimeDiff (ARG)
       ___awmod
     _TimeDiff
     ___awdiv
     ___awmod
   _Timekeeper
     _LeapYear
       ___lwmod
   _Timer0_init
   _UpdateDawnDusk

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      33        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK13           EA      0       0      31        0.0%
BANK13              EA      0       0      32        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     4C      4E       1       83.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      4E       8        0.0%
DATA                 0      0      4E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Thu Nov 04 10:32:41 2021

                  Timekeeper@pdayofweek 0015                                      l20 10A2  
                                    l17 10F0                                      l45 110A  
                                    l81 08C4                            ___awdiv@sign 000F  
                     ??_Interrupts_init 0001                                     l111 0F56  
                                   l112 0F58                                     l200 0C98  
                                   l121 0FB0                                     l113 0F6C  
                                   l114 0F6E                                     l210 0B46  
                                   l115 0F82                                     l203 0AAC  
                                   l116 0F84                                     l108 10DC  
                                   l117 0F98                                     l118 0F9A  
                                   l126 1018                                     l119 0FAE  
                                   l145 10C2                                     l162 04B2  
                                   l182 086A                                     l166 0F3E  
                                   l175 0656                                     l177 070E  
                                   l169 0F40                                     l194 0E12  
                                   l444 0D5C                                     l457 0EC2  
                                   l721 107C                                     l714 1074  
                                   _ISR 0008                                     u900 0CC6  
                                   u901 0CC2                                     u910 0CEC  
                                   u911 0CE8                                     u920 0D0A  
                                   u921 0D06                                     u850 0D7C  
                                   u930 0D26                                     u851 0D78  
                                   u931 0D22                                     u860 0DB0  
                                   u940 0D4C                                     u861 0DAC  
                                   u941 0D48                                     u870 0DD2  
                                   u950 0E26                                     u871 0DCE  
                                   u951 0E22                                     u880 0E06  
                                   u960 0E40                                     u881 0E02  
                                   u961 0E3C                                     u890 0CAC  
                                   u970 0E5A                                     u891 0CA8  
                                   u971 0E56                                     u980 0E78  
                                   u981 0E74                                     u990 0E8E  
                                   u991 0E8A                            ___awmod@sign 0006  
                                  ?_ISR 0001                                    l1010 10EE  
                                  l1006 10DE                                    l1008 10E4  
                                  l1040 107E                                    l1050 1098  
                                  l1042 1080                                    l1052 109A  
                                  l1044 1092                                    l1300 0D92  
                                  l1060 10A4                                    l1054 109E  
                                  l1046 1094                                    l1310 0DE8  
                                  l1302 0DB4                                    l1062 10AC  
                                  l1048 1096                                    l1056 1100  
                                  l1312 0E06                                    l1320 0CAC  
                                  l1400 1034                                    l1064 10B6  
                                  l1058 10C4                                    l1306 0DD6  
                                  l1330 0CD2                                    l1322 0CB4  
                                  l1410 106E                                    l1402 103C  
                                  l1066 10C0                                    l1308 0DDC  
                                  l1340 0D0A                                    l1332 0CDA  
                                  l1324 0CB8                                    l1316 0C9A  
                                  l1404 104A                                    l1412 0EC4  
                                  l1500 02E6                                    l1350 0D36  
                                  l1342 0D10                                    l1334 0CEC  
                                  l1326 0CC6                                    l1318 0C9E  
                                  l1430 0BB4                                    l1406 1060  
                                  l1422 0F3A                                    l1414 0EE2  
                                  l1510 035A                                    l1502 0300  
                                  l1344 0D26                                    l1336 0CF4  
                                  l1352 0D3C                                    l1328 0CCE  
                                  l1360 0E14                                    l1432 0BE0  
                                  l1600 0620                                    l1408 1068  
                                  l1416 0F08                                    l1520 03B2  
                                  l1504 031A                                    l1512 0364  
                                  l1440 005E                                    l1354 0D4C  
                                  l1346 0D2E                                    l1338 0CFC  
                                  l1370 0E40                                    l1362 0E18  
                                  l1434 0C08                                    l1426 0B48  
                                  l1610 0778                                    l1602 067E  
                                  l1418 0F10                                    l1522 03CA  
                                  l1530 0418                                    l1514 037E  
                                  l1506 0334                                    l1450 00D2  
                                  l1442 0088                                    l1292 0D5E  
                                  l1356 0D54                                    l1348 0D30  
                                  l1380 0E78                                    l1372 0E48  
                                  l1364 0E26                                    l1436 0C4A  
                                  l1428 0B88                                    l1612 0790  
                                  l1604 06C0                                    l1540 0498  
                                  l1532 0432                                    l1524 03E4  
                                  l1516 038A                                    l1508 034E  
                                  l1460 0126                                    l1452 00DC  
                                  l1444 0098                                    l1620 086C  
                                  l1550 0F7C                                    l1390 0EB2  
                                  l1382 0E8E                                    l1374 0E5A  
                                  l1366 0E2E                                    l1438 0C62  
                                  l1614 07C6                                    l1606 06D8  
                                  l1542 04A6                                    l1534 044A  
                                  l1526 03FE                                    l1518 0398  
                                  l1470 0194                                    l1462 0140  
                                  l1454 00E6                                    l1446 00A6  
                                  l1630 0914                                    l1622 08B4  
                                  l1552 0F92                                    l1544 0F42  
                                  l1560 0FE8                                    l1296 0D80  
                                  l1392 0EBA                                    l1384 0E96  
                                  l1376 0E62                                    l1368 0E32  
                                  l1616 07F2                                    l1608 0736  
                                  l1536 0466                                    l1528 040C  
                                  l1480 0202                                    l1472 01AE  
                                  l1464 0164                                    l1456 0100  
                                  l1448 00C2                                    l1640 0980  
                                  l1632 0920                                    l1624 08C0  
                                  l1554 0FA8                                    l1546 0F50  
                                  l1562 0FEE                                    l1298 0D86  
                                  l1386 0E9C                                    l1378 0E6A  
                                  l1618 082E                                    l1538 0480  
                                  l1490 0276                                    l1482 021C  
                                  l1474 01D2                                    l1466 0170  
                                  l1458 010C                                    l1570 0A0E  
                                  l1642 0994                                    l1634 0934  
                                  l1626 08D4                                    l1548 0F66  
                                  l1564 1002                                    l1556 0FB2  
                                  l1388 0EA2                                    l1396 101A  
                                  l1484 0236                                    l1492 0280  
                                  l1476 01DE                                    l1468 017A  
                                  l1580 0ABA                                    l1572 0A1C  
                                  l1644 09A6                                    l1636 0944  
                                  l1628 0910                                    l1566 1014  
                                  l1558 0FCC                                    l1590 0508  
                                  l1398 102C                                    l1494 029A  
                                  l1486 0250                                    l1478 01E8  
                                  l1582 0ACA                                    l1574 0A2C  
                                  l1638 097C                                    l1592 0534  
                                  l1496 02B2                                    l1488 026A  
                                  l1584 0AFA                                    l1576 0A5C  
                                  l1568 09E6                                    l1594 0550  
                                  l1498 02CC                                    l1586 0B16  
                                  l1578 0A78                                    l1596 056C  
                                  l1588 04B4                                    l1598 0608  
                                  u1000 0EB2                                    u1001 0EAE  
                                  u1010 102C                                    u1011 1028  
                                  u1020 104A                                    u1100 00C2  
                                  u1021 1046                                    u1101 00BE  
                                  u1030 1060                                    u1110 0100  
                                  u1031 105C                                    u1111 00FC  
                                  u1040 0EE2                                    u1200 0236  
                                  u1120 0126                                    u1041 0EDE  
                                  u1201 0232                                    u1121 0122  
                                  u1050 0F08                                    u1210 0250  
                                  u1130 0140                                    u1051 0F04  
                                  u1211 024C                                    u1131 013C  
                                  u1060 0F36                                    u1300 034E  
                                  u1220 026A                                    u1140 0164  
                                  u1061 0F32                                    u1301 034A  
                                  u1221 0266                                    u1141 0160  
                                  u1070 0C08                                    u1310 037E  
                                  u1230 029A                                    u1150 0194  
                                  u1071 0C04                                    u1311 037A  
                                  u1231 0296                                    u1151 0190  
                                  u1080 0C62                                    u1400 0498  
                                  u1320 03B2                                    u1240 02B2  
                                  u1160 01AE                                    u1081 0C5E  
                                  u1401 0494                                    u1321 03AE  
                                  u1241 02AE                                    u1161 01AA  
                                  u1410 0F50                                    u1330 03CA  
                                  u1250 02CC                                    u1170 01D2  
                                  u1090 0088                                    u1411 0F4C  
                                  u1331 03C6                                    u1251 02C8  
                                  u1171 01CE                                    u1091 0084  
                                  u1420 0F66                                    u1340 03E4  
                                  u1260 02E6                                    u1180 0202  
                                  u1500 0A0E                                    u1421 0F62  
                                  u1341 03E0                                    u1261 02E2  
                                  u1181 01FE                                    u1501 0A0A  
                                  u1430 0F7C                                    u1350 03FE  
                                  u1270 0300                                    u1190 021C  
                                  u1510 0A1C                                    u1431 0F78  
                                  u1351 03FA                                    u1271 02FC  
                                  u1191 0218                                    u1511 0A18  
                                  u1440 0F92                                    u1600 0736  
                                  u1360 0432                                    u1280 031A  
                                  u1520 0A2C                                    u1441 0F8E  
                                  u1601 0732                                    u1361 042E  
                                  u1281 0316                                    u1521 0A28  
                                  u1450 0FA8                                    u1610 0790  
                                  u1370 044A                                    u1290 0334  
                                  u1530 0ABA                                    u1451 0FA4  
                                  u1611 078C                                    u1371 0446  
                                  u1291 0330                                    u1531 0AB6  
                                  u1460 0FCC                                    u1380 0466  
                                  u1540 0ACA                                    u1620 08D4  
                                  u1461 0FC8                                    u1381 0462  
                                  u1541 0AC6                                    u1621 08D0  
                                  u1470 0FE8                                    u1550 0550  
                                  u1390 0480                                    u1630 0944  
                                  u1471 0FE4                                    u1551 054C  
                                  u1391 047C                                    u1631 0940  
                                  u1480 1002                                    u1560 056C  
                                  u1640 0994                                    u1481 0FFE  
                                  u1561 0568                                    u1641 0990  
                                  u1490 1014                                    u1570 0620  
                                  u1650 09A6                                    u1491 1010  
                                  u1571 061C                                    u1651 09A2  
                                  u1580 067E                                    u1581 067A  
                                  u1590 06D8                                    u1591 06D4  
                                  i2l52 004E                                    i2l54 0056  
                                  _main 086C                                    fsr1h 000FE2  
                                  fsr2h 000FDA                                    indf2 000FDF  
                                  fsr1l 000FE1                                    fsr2l 000FD9  
                                  btemp 004F                                    start 005A  
                      __end_of_DAC_init 10F2                            ___param_bank 000000  
                                 ??_ISR 0001                              _Comp1_init 107E  
                          main@dawnhour 003F                         __end_of_TimeAvg 0C9A  
                         ??_Lights_init 0001                                   ?_main 0001  
                       __end_of___awdiv 0D5E                         __end_of___awmod 0EC4  
                       ___awdiv@divisor 000C                         __end_of___lwmod 107E  
                       ___awdiv@counter 000E                                   _TMR0H 000FD4  
                                 _TMR0L 000FD3                            main@duskhour 0041  
                                 plusw2 000FDB                                   ttemp5 0050  
                                 ttemp6 0053                                   ttemp7 0057  
                                 status 000FD8                                   wtemp8 0050  
                       __initialization 10F2                        __end_of_LeapYear 0F42  
                          __end_of_main 09E6                _SunPleaseFixTheDamnClock 04B4  
                                ??_main 003B                           __activetblptr 000000  
                      __end_of_TimeDiff 0E14                           main@dayofweek 003D  
                   __end_of_Lights_init 10DE                     UpdateDawnDusk@phour 0009  
                      ___awdiv@dividend 000A                                  i2l1250 001A  
                                i2l1260 0046                                  i2l1252 0026  
                                i2l1254 0028                                  i2l1264 0054  
                                i2l1256 0036                                  i2l1248 000A  
                                i2l1258 0044                       _LEDarray_disp_bin 0F42  
                            _SmallHours 0FB2                      ?_LEDarray_disp_bin 0001  
                         ??_Timer0_init 0001                               ??_TimeAvg 001E  
                           ?_Comp1_init 0001                               ??___awdiv 000E  
                             ??___awmod 0005                               ??___lwmod 0005  
                            _Timekeeper 005E                     ??_LEDarray_disp_bin 0003  
                      ___awdiv@quotient 0010                         ___awmod@divisor 0003  
   SunPleaseFixTheDamnClock@pdawnminute 0026                                  isa$std 000001  
                       ___awmod@counter 0005                               ?_DAC_init 0001  
             __end_of_LEDarray_disp_bin 0FB2                              __accesstop 0060  
               __end_of__initialization 10F6                        LeapYear@leapyear 000A  
                      Timekeeper@pmonth 000D                           ___rparam_used 000001  
                       _Interrupts_init 1100                          __pcstackCOMRAM 0001  
                       TimeDiff@minute1 0003                         TimeDiff@minute2 0007  
     SunPleaseFixTheDamnClock@avgminute 0037                     __end_of_Timer0_init 10C4  
                           _Lights_init 10C4                       UpdateDawnDusk@DST 000D  
   SunPleaseFixTheDamnClock@pduskminute 002A                              ??_DAC_init 0001  
     SunPleaseFixTheDamnClock@pdawnhour 0024                               ?_LeapYear 0006  
                        Timekeeper@pDST 0017                     __size_of_Comp1_init 0026  
                        Timekeeper@pday 000F                          main@dawnminute 0044  
                         TimeDiff@hour1 0001                           TimeDiff@hour2 0005  
     SunPleaseFixTheDamnClock@pduskhour 0028                             ?_SmallHours 0001  
                             ?_TimeDiff 0001                         TimeAvg@pavghour 001A  
                           ?_Timekeeper 000B                       TimeAvg@pavgminute 001C  
SunPleaseFixTheDamnClock@timedifference 0039                                 i2u80_40 0044  
                               i2u80_41 0040                                 i2u78_40 001A  
                               i2u78_41 0016                                 i2u79_40 0036  
                               i2u79_41 0032                              ??_LeapYear 0008  
            __size_of_LEDarray_disp_bin 0070                 __end_of_Interrupts_init 110C  
                        main@duskminute 0046                        SmallHours@minute 0003  
            ??_SunPleaseFixTheDamnClock 0031                                 __Hparam 0000  
                            ??_TimeDiff 0009                                 __Lparam 0000  
                               _TimeAvg 0B48                             _Timer0_init 10A4  
                               ___awdiv 0C9A                                 ___awmod 0E14  
                               ___lwmod 101A                                 __pcinit 10F2  
                               __ramtop 0E00                                 __ptext0 086C  
                               __ptext1 09E6                                 __ptext2 10A4  
                               __ptext3 005E                                 __ptext4 0EC4  
                               __ptext5 101A                                 __ptext6 04B4  
                               __ptext7 0B48                                 __ptext8 0E14  
                               __ptext9 0C9A                            __size_of_ISR 0052  
               __size_of_UpdateDawnDusk 0162                        ___awmod@dividend 0001  
                   __size_of_SmallHours 0068                                 main@DST 003E  
                               main@day 0043                    end_of_initialization 10F6  
                            _minutehand 004E                     __size_of_Timekeeper 0456  
                               postdec1 000FE5                                 postdec2 000FDD  
                          ??_Comp1_init 0001                                 postinc1 000FE6  
                               postinc2 000FDE                               _TRISAbits 000F81  
             UpdateDawnDusk@pdawnminute 0003                               _TRISFbits 000F86  
                             _TRISGbits 000F87                               _TRISHbits 000F88  
                     Timekeeper@pminute 0013                       __size_of_DAC_init 0014  
                    __end_of_Comp1_init 10A4                             _CM1CON0bits 000ED0  
                           _CM1CON1bits 000ED1                        ?_Interrupts_init 0001  
                            main@minute 0049                            ?_Lights_init 0001  
                   start_initialization 10F2                             __end_of_ISR 005A  
       SunPleaseFixTheDamnClock@avghour 0035               UpdateDawnDusk@pduskminute 0007  
       SunPleaseFixTheDamnClock@pminute 002E                       __size_of_LeapYear 007E  
                          ??_SmallHours 0005                       __size_of_TimeDiff 00B6  
                          ??_Timekeeper 0019                          _UpdateDawnDusk 09E6  
                       Timekeeper@phour 0011                         Timekeeper@pyear 000B  
                           __pbssCOMRAM 004D                      __end_of_SmallHours 101A  
         SunPleaseFixTheDamnClock@phour 002C                      __end_of_Timekeeper 04B4  
                              ?_TimeAvg 0012                            TimeAvg@hour1 0012  
                          TimeAvg@hour2 0016                            ?_Timer0_init 0001  
                        TimeAvg@minute1 0014                          TimeAvg@minute2 0018  
                             __pintcode 0008                                ?___awdiv 000A  
                              ?___awmod 0001                                ?___lwmod 0001  
                __end_of_UpdateDawnDusk 0B48                   UpdateDawnDusk@pminute 000B  
                              _DAC_init 10DE                                _LATAbits 000F79  
                              _LATFbits 000F7E                                _LATGbits 000F7F  
                              _LATHbits 000F80                                _PIE0bits 000E29  
                              _PIE2bits 000E2B                 UpdateDawnDusk@pdawnhour 0001  
                              _PIR0bits 000E33                                _PIR2bits 000E35  
               UpdateDawnDusk@pduskhour 0005                         ?_UpdateDawnDusk 0001  
     __size_of_SunPleaseFixTheDamnClock 03B8                    __size_of_Lights_init 001A  
             ?_SunPleaseFixTheDamnClock 0024                               main@month 0048  
                            _CM1NCHbits 000ED2                              _CM1PCHbits 000ED3  
                              _LeapYear 0EC4                                __Hrparam 0000  
                              _TimeDiff 0D5E                                __Lrparam 0000  
                      __size_of_TimeAvg 0152                        __size_of___awdiv 00C4  
                      __size_of___awmod 00B0                        __size_of___lwmod 0064  
                            _T0CON0bits 000FD5                              _T0CON1bits 000FD6  
                              _dawndusk 004D                                __ptext10 0D5E  
                              __ptext11 0FB2                                __ptext12 10C4  
                              __ptext13 0F42                                __ptext14 1100  
                              __ptext15 107E                                __ptext16 10DE  
               LEDarray_disp_bin@number 0001                          SmallHours@hour 0001  
                         __size_of_main 017A                                isa$xinst 000000  
              __size_of_Interrupts_init 000C                                int$flags 004F  
                  __size_of_Timer0_init 0020                                main@hour 004B  
                              main@year 003B                              _INTCONbits 000FF2  
                   TimeAvg@HalfTimeDiff 0022             SunPleaseFixTheDamnClock@DST 0030  
                              intlevel2 0000                            _DAC1CON0bits 000EC6  
                          _DAC1CON1bits 000EC7                        ___lwmod@dividend 0001  
                          LeapYear@year 0006                         ___lwmod@divisor 0003  
                       ___lwmod@counter 0005        __end_of_SunPleaseFixTheDamnClock 086C  
                      ??_UpdateDawnDusk 000E  
